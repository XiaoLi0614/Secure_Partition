package j.util.ui;

import javax.swing.*;
import javax.imageio.ImageIO;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import lesani.gui.frame.MFrame;

/**
 * Created by IntelliJ IDEA.
 * User: Mohsen Lesani
 * Date: Feb 12, 2005
 * Time: 5:34:44 PM
 */

// TODO: If the Ok and Save keys want to be shown the class should no inherit from the MFrame class 
public class ImageFrame extends MFrame
{
	// not synchronized on image
	//private JPanel imagePanelScrollPaneBackPanel;
	//private JScrollPane imagePanelScrollPane;
	private BufferedImage image;
	private JButton closeButton;
	private JButton saveButton;
	private JFileChooser fileChooser;
	private JPanel bottomPanel;

	private JPanel imagePanel = new JPanel() {
		public void paint(Graphics g)
		{
			g.drawImage(image, 0, 0, null);
		}

		public Dimension getMinimumSize()
		{
			return new Dimension(image.getWidth() , image.getHeight());
		}

		public Dimension getPreferredSize()
		{
			return new Dimension(image.getWidth(), image.getHeight());
		}

		public Dimension getMaximumSize()
		{
			return new Dimension(image.getWidth(), image.getHeight());
		}
	};

	public ImageFrame(String title, BufferedImage image)
	{
		super(title);
		this.image = image;
		init();
	}

	public ImageFrame(j.core.image.Image image)
	{
		this.image = image.getBufferedImage();
		init();
	}

	private void init()
	{

		fileChooser = new JFileChooser();
		setDisposeOnClose();
		JPanel mainPanel = new JPanel();
		mainPanel.setLayout(new BorderLayout());
		mainPanel.add(imagePanel, BorderLayout.CENTER);

		setMainPanel(mainPanel);
		setBottomPanel(bottomPanel);

        closeButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				ImageFrame.this.dispose();
			}
		});

		saveButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				int returnVal = fileChooser.showSaveDialog(ImageFrame.this);
				if (returnVal == JFileChooser.APPROVE_OPTION)
				{
					File file = fileChooser.getSelectedFile();

					try
					{
						ImageIO.write(image, "JPG", file);
					}
					catch (IOException ioe)
					{
						JOptionPane.showMessageDialog(ImageFrame.this,
								"The file could not be saved.",
								"Error",
								JOptionPane.ERROR_MESSAGE);
					}
				}
				//do nothing

			}
		});

		/*
		imagePanelScrollPaneBackPanel.setPreferredSize(imagePanel.getPreferredSize());
		imagePanelScrollPaneBackPanel.setMinimumSize(imagePanel.getMinimumSize());
		imagePanelScrollPaneBackPanel.setMaximumSize(imagePanel.getMaximumSize());
		*/
		//imagePanelScrollPane.getViewport().getAddedAndScaled(imagePanel);

		pack();
	}

	public BufferedImage getImage() {
		return image;
	}

	public void setImage(j.core.image.Image image)
	{
		this.image = image.getBufferedImage();
		/*
		imagePanelScrollPaneBackPanel.setPreferredSize(imagePanel.getPreferredSize());
		imagePanelScrollPaneBackPanel.setMaximumSize(imagePanel.getMaximumSize());
		*/
	}
}
