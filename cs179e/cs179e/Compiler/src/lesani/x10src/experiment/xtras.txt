/*
        Console.OUT.println("--------------------------------------");
        val mat = new IntMatrix([2, 5, 6, 2, 1]);
        val vmat = mat.transpose();
        Console.OUT.println(vmat.transpose());
        Console.OUT.println();

        val tuple = Lib.sortI(vmat);
        Console.OUT.println(tuple._1.transpose());
        Console.OUT.println(tuple._2.transpose());
        Console.OUT.println();

        val tuple2 = Lib.sortDI(vmat);
        Console.OUT.println(tuple2._1.transpose());
        Console.OUT.println(tuple2._2.transpose());
        Console.OUT.println();
        Console.OUT.println("--------------------------------------");

        Console.OUT.println("--------------------------------------");
        val a = new IntMatrix([-1, 0, 2, 4, 6]);
        val b = new IntMatrix([-1, 0, 1, 3]);
        val c = Lib.union(a, b);
        Console.OUT.println(a);
        Console.OUT.println(b);
        Console.OUT.println(c);
        val result = new IntMatrix([-1, 0, 1, 2, 3, 4, 6]);
        Console.OUT.println(Lib.eq(c, result));

        Console.OUT.println("--------------------------------------");
*/




//        var mat1: IntMatrix = new IntMatrix(2, 5);
//        Console.OUT.println(mat1);
/*
        var mat1: BooleanMatrix = new BooleanMatrix([false, false, true, true]);
        var mat2: BooleanMatrix = new BooleanMatrix([false, true, false, true]);
        var mat3: BooleanMatrix = mat1 == mat2;
        Console.OUT.println(mat3);
*/

/*
        var mat1: IntMatrix = new IntMatrix([1, 4, 5]);
        Console.OUT.println(mat1(1,1));
        mat1(1, 1) = 2;
        Console.OUT.println(mat1(1,1));
*/



/*
        Lib.f();

        var mat1: IntMatrix = new IntMatrix([1, 4, 5]);
        var mat2: IntMatrix = new IntMatrix([2, 5, 7]);
        var mat3: IntMatrix = mat1 + mat2;
        var mat4: IntMatrix = 1 + mat2;
        var mat5: IntMatrix = - mat1;

        Console.OUT.println(mat3);
        Console.OUT.println(mat4);
        Console.OUT.println(mat5);
        Console.OUT.println(true ? 1 : 2);
*/

/*
        var mat1: BooleanMatrix = new BooleanMatrix([false, false, true, true]);
        var mat2: BooleanMatrix = new BooleanMatrix([false, true, false, true]);
        var mat3: BooleanMatrix = mat1 | mat2;
        Console.OUT.println(mat3);

        var imat1: IntMatrix = new IntMatrix([1, 4, 0]);
        var bmat1: BooleanMatrix = Lib.logical(imat1);
        Console.OUT.println(bmat1);

        var b: Boolean = true | false;
        Console.OUT.println(b);

        var j: Boolean = true ^ false;
*/


/*
        var m: IntMatrix = new IntMatrix([1, 4, 5]);
        Console.OUT.println(m.n);
        Console.OUT.println(m.dim(1));
        Console.OUT.println(m.m);
        Console.OUT.println(m.dim(2));

        for(i in m.values())
            Console.OUT.println(i);
*/


/*
        val tuple: Tuple3[Int, Double, Int] = new Tuple3[Int, Double, Int](1, 3.3, 2);
        Console.OUT.println(tuple._2);
*/

/*
//        val a1 = new GMatrix(2, 3);
//        val a2 = new GMatrix(2, 3);
//        val a3 = a1 + a2;

//        val b : GMatrix = null;
//        val b = new GMatrix(4, 4);
//        val b = new GMatrix(3, 4);
//        val c = a1 * b;



//        Console.OUT.println(newHVector([1, 2, 3]).typeName());
//        var a0: Matrix(1, 3) = newHVector([1, 2, 3]);

        var a0p: IntMatrix = new IntMatrix([1, 2, 3]);

//        Console.OUT.println((new Matrix([1, 2, 3])).typeName());
//        var a1 <: HVector(3) = new Matrix([1, 2, 3]);


        Console.OUT.println(a0p(1, 2));
        Console.OUT.println(a0p);
//        var a2: Matrix(3, 3) = newMatrix(
//            [[1, 2, 3],
//             [4, 5, 6],
//             [7, 8, 9]]);

        var a2p: IntMatrix = new IntMatrix(
            [[1, 2, 3],
             [4, 5, 6],
             [7, 8, 9]]);

        Console.OUT.println(a2p(2, 1));
        Console.OUT.println(a2p);
*/
/*
        Console.OUT.println("--------------------------------------");
        val mat = new IntMatrix([[1, 2, 3],
                                 [4, 5, 6],
                                 [7, 8, 9]]);
*/
/*
        val mat = new DoubleMatrix([[1.0, 2.0, 3.0],
                                    [4.0, 5.0, 6.0],
                                    [7.0, 8.0, 9.0]]);
*//*

        val n = singularValueDecomposition(mat);
        Console.OUT.println(n);

        Console.OUT.println("--------------------------------------");
*/
