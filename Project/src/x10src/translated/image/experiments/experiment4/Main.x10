
public class Main {

	public static def main(args: Array[String]): Void {
		var asser0: Boolean = Lib.logical(1);
		var asser1: Boolean = Lib.logical(1);
		var asser2: Boolean = Lib.logical(1);
		var asser3: Boolean = Lib.logical(1);
		var asser4: Boolean = Lib.logical(1);
		var asser5: Boolean = Lib.logical(1);
		var asser6: Boolean = Lib.logical(1);
		var asser7: Boolean = Lib.logical(1);
		var asser8: Boolean = Lib.logical(1);
		var asser9: Boolean = Lib.logical(1);
		var asser10: Boolean = Lib.logical(1);
		var asser11: Boolean = Lib.logical(1);
		var asser12: Boolean = Lib.logical(1);
		var asser13: Boolean = Lib.logical(1);
		var asser14: Boolean = Lib.logical(1);
		var asser15: Boolean = Lib.logical(1);
		var asser16: Boolean = Lib.logical(1);
		var asser17: Boolean = Lib.logical(1);
		var asser18: Boolean = Lib.logical(1);
		var asser19: Boolean = Lib.logical(1);
		var asser20: Boolean = Lib.logical(1);
		var m: IntMatrix = new IntMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);
		Lib.disp("m = ");
		Lib.disp(m);
		Lib.disp(" ");
		var hv: IntMatrix = new IntMatrix([1, 2, 3, 4, 5, 6]);
		Lib.disp("hv = ");
		Lib.disp(hv);
		Lib.disp(" ");
		var vv: IntMatrix = new IntMatrix([[1], [2], [3], [4], [5], [6]]);
		Lib.disp("vv = ");
		Lib.disp(vv);
		Lib.disp(" ");
		Lib.disp("---------------------------");
		Lib.disp("Simple indexing");
		Lib.disp("m(2,2) =");
		Lib.disp(m(2, 2));
		asser1 = (m(2, 2) == 5);
		Check.check(asser1);
		Lib.disp("---------------------------");
		Lib.disp("Multi indexing");
		Lib.disp("m([1 3], [1 3]) =");
		Lib.disp(m(new IntMatrix([1, 3]), new IntMatrix([1, 3])));
		var a2: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 3]), new IntMatrix([1, 3])), new IntMatrix([[1, 3], [7, 9]]));
		asser2 = AllTrue.allTrue(a2);
		Check.check(asser2);
		Lib.disp("---------------------------");
		Lib.disp("Simple and Multi indexing 1");
		Lib.disp("m(1, [1 3]) =");
		Lib.disp(m(1, new IntMatrix([1, 3])));
		var a3: BooleanMatrix = Lib.eq(m(1, new IntMatrix([1, 3])), new IntMatrix([1, 3]));
		asser3 = AllTrue.allTrue(a3);
		Check.check(asser3);
		Lib.disp("---------------------------");
		Lib.disp("Simple and Multi indexing 2");
		Lib.disp("m([1 3], 1) =");
		Lib.disp(m(new IntMatrix([1, 3]), 1));
		var a4: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 3]), 1), new IntMatrix([[1], [7]]));
		asser4 = AllTrue.allTrue(a4);
		Check.check(asser4);
		Lib.disp("---------------------------");
		Lib.disp("Colon - Test 1");
		Lib.disp("m(:, [1 3]) =");
		Lib.disp(m(new IntMatrix(1, m.n), new IntMatrix([1, 3])));
		var a5: BooleanMatrix = Lib.eq(m(new IntMatrix(1, m.n), new IntMatrix([1, 3])), new IntMatrix([[1, 3], [4, 6], [7, 9]]));
		asser5 = AllTrue.allTrue(a5);
		Check.check(asser5);
		Lib.disp("---------------------------");
		Lib.disp("Colon - Test 2");
		Lib.disp("m([1, 3], :) =");
		Lib.disp(m(new IntMatrix([1, 3]), new IntMatrix(1, m.m)));
		var a6: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 3]), new IntMatrix(1, m.m)), new IntMatrix([[1, 2, 3], [7, 8, 9]]));
		asser6 = AllTrue.allTrue(a6);
		Check.check(asser6);
		Lib.disp("---------------------------");
		Lib.disp("End - Test 1");
		Lib.disp("m(end, [1 3]) =");
		Lib.disp(m(m.n, new IntMatrix([1, 3])));
		var a7: BooleanMatrix = Lib.eq(m(m.n, new IntMatrix([1, 3])), new IntMatrix([7, 9]));
		asser7 = AllTrue.allTrue(a7);
		Check.check(asser7);
		Lib.disp("---------------------------");
		Lib.disp("End - Test 2");
		Lib.disp("m([1, 3], end) =");
		Lib.disp(m(new IntMatrix([1, 3]), m.m));
		var a8: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 3]), m.m), new IntMatrix([[3], [9]]));
		asser8 = AllTrue.allTrue(a8);
		Check.check(asser8);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 1 - Test 1");
		Lib.disp("hv([1 5])");
		Lib.disp(hv(new IntMatrix([1, 5])));
		var a9: BooleanMatrix = Lib.eq(hv(new IntMatrix([1, 5])), new IntMatrix([1, 5]));
		asser9 = AllTrue.allTrue(a9);
		Check.check(asser9);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 1 - Test 2");
		Lib.disp("hv([1, 5])");
		Lib.disp(hv(new IntMatrix([[1], [5]])));
		var a10: BooleanMatrix = Lib.eq(hv(new IntMatrix([[1], [5]])), new IntMatrix([1, 5]));
		asser10 = AllTrue.allTrue(a10);
		Check.check(asser10);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 1 - Test 3");
		Lib.disp("vv([1 5])");
		Lib.disp(vv(new IntMatrix([1, 5])));
		var a11: BooleanMatrix = Lib.eq(vv(new IntMatrix([1, 5])), new IntMatrix([[1], [5]]));
		asser11 = AllTrue.allTrue(a11);
		Check.check(asser11);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 1 - Test 4");
		Lib.disp("vv([1; 5])");
		Lib.disp(vv(new IntMatrix([[1], [5]])));
		var a12: BooleanMatrix = Lib.eq(vv(new IntMatrix([[1], [5]])), new IntMatrix([[1], [5]]));
		asser12 = AllTrue.allTrue(a12);
		Check.check(asser12);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 2 - Test 1");
		Lib.disp("m([1 5])");
		Lib.disp(m(new IntMatrix([1, 5])));
		var a13: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 5])), new IntMatrix([1, 5]));
		asser13 = AllTrue.allTrue(a13);
		Check.check(asser13);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 2 - Test 2");
		Lib.disp("m([1; 5])");
		Lib.disp(m(new IntMatrix([[1], [5]])));
		var a14: BooleanMatrix = Lib.eq(m(new IntMatrix([[1], [5]])), new IntMatrix([[1], [5]]));
		asser14 = AllTrue.allTrue(a14);
		Check.check(asser14);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 2 - Test 3");
		Lib.disp("hv([1 3; 2 5])");
		Lib.disp(hv(new IntMatrix([[1, 3], [2, 5]])));
		var a15: BooleanMatrix = Lib.eq(hv(new IntMatrix([[1, 3], [2, 5]])), new IntMatrix([[1, 3], [2, 5]]));
		asser15 = AllTrue.allTrue(a15);
		Check.check(asser15);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 2 - Test 4");
		Lib.disp("vv([1 3; 2 5])");
		Lib.disp(vv(new IntMatrix([[1, 3], [2, 5]])));
		var a16: BooleanMatrix = Lib.eq(vv(new IntMatrix([[1, 3], [2, 5]])), new IntMatrix([[1, 3], [2, 5]]));
		asser16 = AllTrue.allTrue(a16);
		Check.check(asser16);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 2 - Test 5");
		Lib.disp("m([1 3; 5 7])");
		Lib.disp(m(new IntMatrix([[1, 3], [5, 7]])));
		var a17: BooleanMatrix = Lib.eq(m(new IntMatrix([[1, 3], [5, 7]])), new IntMatrix([[1, 7], [5, 3]]));
		asser17 = AllTrue.allTrue(a17);
		Check.check(asser17);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing, Single index");
		Lib.disp("m(6) =");
		Lib.disp(m(6));
		asser18 = (m(6) == 8);
		Check.check(asser18);
		Lib.disp("---------------------------");
		Lib.disp("Single Colon");
		Lib.disp("m(:) =");
		Lib.disp(m.singleColumn());
		var a19: BooleanMatrix = Lib.eq(m.singleColumn(), new IntMatrix([[1], [4], [7], [2], [5], [8], [3], [6], [9]]));
		asser19 = AllTrue.allTrue(a19);
		Check.check(asser19);
		Lib.disp("---------------------------");
		Lib.disp("Single End");
		Lib.disp("m(end) =");
		Lib.disp(m((m.n * m.m)));
		asser20 = (m((m.n * m.m)) == 9);
		Check.check(asser20);
		var b: BooleanMatrix = Lib.logical(new IntMatrix([[0, 1, 0], [1, 0, 1], [0, 0, 0]]));
		Lib.disp("b = ");
		Lib.disp(b);
		Lib.disp(" ");
		Lib.disp("---------------------------");
		Lib.disp("Logical Indexing");
		Lib.disp("m(b) =");
		Lib.disp(m(b));
		var a21: BooleanMatrix = Lib.eq(m(b), new IntMatrix([[4], [2], [6]]));
		var asser21: Boolean = AllTrue.allTrue(a21);
		Check.check(asser21);
		Lib.disp("---------------------------");
		var asser: Boolean = ((((((((((((((((((((asser1 && asser2) && asser3) && asser4) && asser5) && asser6) && asser7) && asser8) && asser9) && asser10) && asser11) && asser12) && asser13) && asser14) && asser15) && asser16) && asser17) && asser18) && asser19) && asser20) && asser21);
		if (asser) 
			Lib.disp("Success.");
		else 
			Lib.disp("Failure.");
	}

}

