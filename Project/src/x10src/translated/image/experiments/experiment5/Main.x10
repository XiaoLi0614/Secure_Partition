
public class Main {

	public static def main(args: Array[String]): Void {
		var m: IntMatrix = new IntMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);
		Lib.disp("m = ");
		Lib.disp(m.clone());
		Lib.disp(" ");
		Lib.disp("---------------------------");
		Lib.disp("Simple indexing");
		Lib.disp("m(2,2) = 9");
		m(2, 2) = 9;
		var asser1: Boolean = (m(2, 2) == 9);
		Check.check(asser1);
		Lib.disp("---------------------------");
		Lib.disp("Multi indexing 1");
		Lib.disp("m([1 3], [1 3]) = 9");
		m(new IntMatrix([1, 3]), new IntMatrix([1, 3])) = 9;
		var a2: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 3]), new IntMatrix([1, 3])), new IntMatrix([[9, 9], [9, 9]]));
		var asser2: Boolean = AllTrue.allTrue(a2.clone());
		Check.check(asser2);
		Lib.disp("---------------------------");
		Lib.disp("Multi indexing 2");
		Lib.disp("m([1 3], [1 3]) = [5 5; 5 5]");
		m(new IntMatrix([1, 3]), new IntMatrix([1, 3])) = new IntMatrix([[5, 5], [5, 5]]);
		var a3: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 3]), new IntMatrix([1, 3])), new IntMatrix([[5, 5], [5, 5]]));
		var asser3: Boolean = AllTrue.allTrue(a3.clone());
		Check.check(asser3);
		Lib.disp("---------------------------");
		Lib.disp("Single and Multi indexing 1 - 1");
		Lib.disp("m(1, [1 3]) = 3");
		m(1, new IntMatrix([1, 3])) = 3;
		var a4: BooleanMatrix = Lib.eq(m(1, new IntMatrix([1, 3])), new IntMatrix([3, 3]));
		var asser4: Boolean = AllTrue.allTrue(a4.clone());
		Check.check(asser4);
		Lib.disp("---------------------------");
		Lib.disp("Single and Multi indexing 1 - 2");
		Lib.disp("m(1, [1 3]) = [4 4]");
		m(1, new IntMatrix([1, 3])) = new IntMatrix([4, 4]);
		var a5: BooleanMatrix = Lib.eq(m(1, new IntMatrix([1, 3])), new IntMatrix([4, 4]));
		var asser5: Boolean = AllTrue.allTrue(a5.clone());
		Check.check(asser5);
		Lib.disp("---------------------------");
		Lib.disp("Single and Multi indexing 2 - 1");
		Lib.disp("m([1 3], 1) = 5");
		m(new IntMatrix([1, 3]), 1) = 5;
		var a6: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 3]), 1), new IntMatrix([[5], [5]]));
		var asser6: Boolean = AllTrue.allTrue(a6.clone());
		Check.check(asser6);
		Lib.disp("---------------------------");
		Lib.disp("Single and Multi indexing 2 - 2");
		Lib.disp("m([1 3], 1) = [6 6]");
		m(new IntMatrix([1, 3]), 1) = new IntMatrix([[6], [6]]);
		var a7: BooleanMatrix = Lib.eq(m(new IntMatrix([1, 3]), 1), new IntMatrix([[6], [6]]));
		var asser7: Boolean = AllTrue.allTrue(a7.clone());
		Check.check(asser7);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 1");
		Lib.disp("m([3 4; 6 7]) = 5");
		m(new IntMatrix([[3, 4], [6, 7]])) = 5;
		var a8: BooleanMatrix = Lib.eq(m(new IntMatrix([[3, 4], [6, 7]])), new IntMatrix([[5, 5], [5, 5]]));
		var asser8: Boolean = AllTrue.allTrue(a8.clone());
		Check.check(asser8);
		Lib.disp("---------------------------");
		Lib.disp("Linear Indexing 1");
		Lib.disp("m([3 4; 6 7]) = 5");
		m(new IntMatrix([[3, 4], [6, 7]])) = new IntMatrix([[1, 2], [3, 4]]);
		var a9: BooleanMatrix = Lib.eq(m(new IntMatrix([[3, 4], [6, 7]])), new IntMatrix([[1, 2], [3, 4]]));
		var asser9: Boolean = AllTrue.allTrue(a9.clone());
		Check.check(asser9);
		Lib.disp("---------------------------");
		Lib.disp("Logical Indexing 1");
		Lib.disp("m(logical([1 0 1; 0 0 0; 0 1 0])) = 5");
		m = new IntMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);
		var i10: BooleanMatrix = Lib.logical(new IntMatrix([[1, 0, 1], [0, 0, 0], [0, 1, 0]]));
		m(i10) = 5;
		var a10: BooleanMatrix = Lib.eq(m(i10), new IntMatrix([[5], [5], [5]]));
		var asser10: Boolean = AllTrue.allTrue(a10.clone());
		Check.check(asser10);
		Lib.disp("---------------------------");
		Lib.disp("Logical Indexing 1");
		Lib.disp("m(logical([1 0 1; 0 0 0; 0 1 0])) = [1 2 3]");
		m = new IntMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);
		var i11: BooleanMatrix = Lib.logical(new IntMatrix([[1, 0, 1], [0, 0, 0], [0, 1, 0]]));
		m(i11) = new IntMatrix([1, 2, 3]);
		var a11: BooleanMatrix = Lib.eq(m(i11), new IntMatrix([[1], [2], [3]]));
		var asser11: Boolean = AllTrue.allTrue(a11.clone());
		Check.check(asser11);
		Lib.disp("---------------------------");
		Lib.disp("Colon Assignment 1");
		Lib.disp("m(:) = 5");
		m = new IntMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);
		Lib.colonAssign(m, 5);
		var a12: BooleanMatrix = Lib.eq(m, new IntMatrix([[5, 5, 5], [5, 5, 5], [5, 5, 5]]));
		var asser12: Boolean = AllTrue.allTrue(a12.clone());
		Check.check(asser12);
		Lib.disp("---------------------------");
		Lib.disp("Colon Assignment 2");
		Lib.disp("m(:) = [9 8 7; 6 5 4;3 2 1];");
		m = new IntMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);
		Lib.colonAssign(m, new IntMatrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]]));
		var a13: BooleanMatrix = Lib.eq(m, new IntMatrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]]));
		var asser13: Boolean = AllTrue.allTrue(a13.clone());
		Check.check(asser13);
		Lib.disp("---------------------------");
		var asser: Boolean = ((((((((((((asser1 && asser2) && asser3) && asser4) && asser5) && asser6) && asser7) && asser8) && asser9) && asser10) && asser11) && asser12) && asser13);
		if (asser) 
			Lib.disp("Success.");
		else 
			Lib.disp("Failure.");
	}

}

