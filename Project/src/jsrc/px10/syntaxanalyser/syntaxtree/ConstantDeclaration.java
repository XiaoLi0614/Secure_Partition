//
// Generated by JTB 1.3.2
//

package jsrc.px10.syntaxanalyser.syntaxtree;

/**
 * Grammar production:
 * f0 -> Visibility()
 * f1 -> "static"
 * f2 -> "final"
 * f3 -> Type()
 * f4 -> Identifier()
 * f5 -> "="
 * f6 -> Expression()
 * f7 -> ";"
 */
public class ConstantDeclaration implements Node {
   public Visibility f0;
   public NodeToken f1;
   public NodeToken f2;
   public Type f3;
   public Identifier f4;
   public NodeToken f5;
   public Expression f6;
   public NodeToken f7;

   public ConstantDeclaration(Visibility n0, NodeToken n1, NodeToken n2, Type n3, Identifier n4, NodeToken n5, Expression n6, NodeToken n7) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
   }

   public ConstantDeclaration(Visibility n0, Type n1, Identifier n2, Expression n3) {
      f0 = n0;
      f1 = new NodeToken("static");
      f2 = new NodeToken("final");
      f3 = n1;
      f4 = n2;
      f5 = new NodeToken("=");
      f6 = n3;
      f7 = new NodeToken(";");
   }

   public void accept(jsrc.px10.syntaxanalyser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jsrc.px10.syntaxanalyser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jsrc.px10.syntaxanalyser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jsrc.px10.syntaxanalyser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

