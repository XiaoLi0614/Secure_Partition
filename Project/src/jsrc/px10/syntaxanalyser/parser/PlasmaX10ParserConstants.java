/* Generated By:JavaCC: Do not edit this line. PlasmaX10ParserConstants.java */
package jsrc.px10.syntaxanalyser.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PlasmaX10ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int LPAREN = 9;
  /** RegularExpression Id. */
  int RPAREN = 10;
  /** RegularExpression Id. */
  int LSQPAREN = 11;
  /** RegularExpression Id. */
  int RSQPAREN = 12;
  /** RegularExpression Id. */
  int LBRACE = 13;
  /** RegularExpression Id. */
  int RBRACE = 14;
  /** RegularExpression Id. */
  int SEMICOLON = 15;
  /** RegularExpression Id. */
  int DOT = 16;
  /** RegularExpression Id. */
  int ASSIGN = 17;
  /** RegularExpression Id. */
  int LT = 18;
  /** RegularExpression Id. */
  int PLUS = 19;
  /** RegularExpression Id. */
  int MINUS = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int QUESTION = 23;
  /** RegularExpression Id. */
  int CLASS = 24;
  /** RegularExpression Id. */
  int VALUE = 25;
  /** RegularExpression Id. */
  int FINAL = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int ELSE = 28;
  /** RegularExpression Id. */
  int FALSE = 29;
  /** RegularExpression Id. */
  int TRUE = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int VOID = 32;
  /** RegularExpression Id. */
  int BOOLEAN = 33;
  /** RegularExpression Id. */
  int INTEGER = 34;
  /** RegularExpression Id. */
  int NEW = 35;
  /** RegularExpression Id. */
  int GET = 36;
  /** RegularExpression Id. */
  int CONTAINS = 37;
  /** RegularExpression Id. */
  int HIGH = 38;
  /** RegularExpression Id. */
  int LOW = 39;
  /** RegularExpression Id. */
  int NEXT = 40;
  /** RegularExpression Id. */
  int PREV = 41;
  /** RegularExpression Id. */
  int ISFIRST = 42;
  /** RegularExpression Id. */
  int ISLAST = 43;
  /** RegularExpression Id. */
  int COORD = 44;
  /** RegularExpression Id. */
  int ORDINAL = 45;
  /** RegularExpression Id. */
  int PUBLIC = 46;
  /** RegularExpression Id. */
  int RETURN = 47;
  /** RegularExpression Id. */
  int STATIC = 48;
  /** RegularExpression Id. */
  int STRING = 49;
  /** RegularExpression Id. */
  int THIS = 50;
  /** RegularExpression Id. */
  int PRINTLN = 51;
  /** RegularExpression Id. */
  int PRINT = 52;
  /** RegularExpression Id. */
  int PRINTERROR = 53;
  /** RegularExpression Id. */
  int CURRENTTIME = 54;
  /** RegularExpression Id. */
  int JAVAIOSIZE = 55;
  /** RegularExpression Id. */
  int FACTORYPlace = 56;
  /** RegularExpression Id. */
  int FACTORYBlock = 57;
  /** RegularExpression Id. */
  int FACTORYEMPTYREGION = 58;
  /** RegularExpression Id. */
  int FACTORYPOINT = 59;
  /** RegularExpression Id. */
  int JAVALANGOBJECT = 60;
  /** RegularExpression Id. */
  int BREAK = 61;
  /** RegularExpression Id. */
  int SUPER = 62;
  /** RegularExpression Id. */
  int THROW = 63;
  /** RegularExpression Id. */
  int RUNTIMEEXCEPTION = 64;
  /** RegularExpression Id. */
  int DOUBLE = 65;
  /** RegularExpression Id. */
  int LONG = 66;
  /** RegularExpression Id. */
  int SHORT = 67;
  /** RegularExpression Id. */
  int BYTE = 68;
  /** RegularExpression Id. */
  int REGION = 69;
  /** RegularExpression Id. */
  int ID = 70;
  /** RegularExpression Id. */
  int PLACES = 71;
  /** RegularExpression Id. */
  int RANK = 72;
  /** RegularExpression Id. */
  int DISTRIBUTION = 73;
  /** RegularExpression Id. */
  int DIST = 74;
  /** RegularExpression Id. */
  int SWITCH = 75;
  /** RegularExpression Id. */
  int ATEACH = 76;
  /** RegularExpression Id. */
  int FINISH = 77;
  /** RegularExpression Id. */
  int MAIN = 78;
  /** RegularExpression Id. */
  int MATH = 79;
  /** RegularExpression Id. */
  int SIN = 80;
  /** RegularExpression Id. */
  int COS = 81;
  /** RegularExpression Id. */
  int POW = 82;
  /** RegularExpression Id. */
  int EXP = 83;
  /** RegularExpression Id. */
  int SQRT = 84;
  /** RegularExpression Id. */
  int ABS = 85;
  /** RegularExpression Id. */
  int PLACE = 86;
  /** RegularExpression Id. */
  int MIN = 87;
  /** RegularExpression Id. */
  int MAX = 88;
  /** RegularExpression Id. */
  int LOG = 89;
  /** RegularExpression Id. */
  int SUM = 90;
  /** RegularExpression Id. */
  int SIZE = 91;
  /** RegularExpression Id. */
  int EQUALS = 92;
  /** RegularExpression Id. */
  int PRIVATE = 93;
  /** RegularExpression Id. */
  int FOREACH = 94;
  /** RegularExpression Id. */
  int FINALLY = 95;
  /** RegularExpression Id. */
  int POINT = 96;
  /** RegularExpression Id. */
  int CONTINUE = 97;
  /** RegularExpression Id. */
  int INSTANCEOF = 98;
  /** RegularExpression Id. */
  int DO = 99;
  /** RegularExpression Id. */
  int FOR = 100;
  /** RegularExpression Id. */
  int HERE = 101;
  /** RegularExpression Id. */
  int DISTUNIQUE = 102;
  /** RegularExpression Id. */
  int CASE = 103;
  /** RegularExpression Id. */
  int ASYNC = 104;
  /** RegularExpression Id. */
  int OR = 105;
  /** RegularExpression Id. */
  int DEFAULT_TOKEN = 106;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 107;
  /** RegularExpression Id. */
  int POINT_LITERAL = 108;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 109;
  /** RegularExpression Id. */
  int HEX_LITERAL = 110;
  /** RegularExpression Id. */
  int LONG_LITERAL = 111;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 112;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 113;
  /** RegularExpression Id. */
  int EXPONENT = 114;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 115;
  /** RegularExpression Id. */
  int STRING_LITERAL = 116;
  /** RegularExpression Id. */
  int IDENTIFIER = 117;
  /** RegularExpression Id. */
  int LETTER = 118;
  /** RegularExpression Id. */
  int DIGIT = 119;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 120;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 121;
  /** RegularExpression Id. */
  int GT = 122;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"+\"",
    "\"-\"",
    "\"&&\"",
    "\"!\"",
    "\"?\"",
    "\"class\"",
    "\"value\"",
    "\"final\"",
    "\"if\"",
    "\"else\"",
    "\"false\"",
    "\"true\"",
    "\"while\"",
    "\"void\"",
    "\"boolean\"",
    "\"int\"",
    "\"new\"",
    "\"get\"",
    "\"contains\"",
    "\"high\"",
    "\"low\"",
    "\"next\"",
    "\"prev\"",
    "\"isFirst\"",
    "\"isLast\"",
    "\"coord\"",
    "\"ordinal\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"String\"",
    "\"this\"",
    "\"System.out.println\"",
    "\"System.out.print\"",
    "\"System.err.println\"",
    "\"System.currentTimeMillis\"",
    "\"java.io.Integer.SIZE\"",
    "\"dist.factory.place\"",
    "\"dist.factory.block\"",
    "\"region.factory.emptyRegion\"",
    "\"point.factory.point\"",
    "\"java.lang.Object\"",
    "\"break\"",
    "\"super\"",
    "\"throw\"",
    "\"RuntimeException\"",
    "\"double\"",
    "\"long\"",
    "\"short\"",
    "\"byte\"",
    "\"region\"",
    "\"id\"",
    "\"place.places\"",
    "\"rank\"",
    "\"distribution\"",
    "\"dist\"",
    "\"switch\"",
    "\"ateach\"",
    "\"finish\"",
    "\"main\"",
    "\"Math\"",
    "\"sin\"",
    "\"cos\"",
    "\"pow\"",
    "\"exp\"",
    "\"sqrt\"",
    "\"abs\"",
    "\"place\"",
    "\"min\"",
    "\"max\"",
    "\"log\"",
    "\"sum\"",
    "\"size\"",
    "\"equals\"",
    "\"private\"",
    "\"foreach\"",
    "\"finally\"",
    "\"point\"",
    "\"continue\"",
    "\"instanceof\"",
    "\"do\"",
    "\"for\"",
    "\"here\"",
    "\"dist.UNIQUE\"",
    "\"case\"",
    "\"async\"",
    "\"or\"",
    "\"default\"",
    "<INTEGER_LITERAL>",
    "<POINT_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<LONG_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\",\"",
    "\":\"",
    "\"==\"",
    "\"||\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"->\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"dist.factory.blockCyclic\"",
    "\"place.FIRST_PLACE\"",
    "\"place.MAX_PLACES\"",
    "\"java.lang.Integer.SIZE\"",
  };

}
