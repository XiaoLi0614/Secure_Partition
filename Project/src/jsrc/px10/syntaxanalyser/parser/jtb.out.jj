//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(PlasmaX10Parser)
package jsrc.px10.syntaxanalyser.parser;

import jsrc.px10.syntaxanalyser.syntaxtree.*;
import java.util.Vector;


public class PlasmaX10Parser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(PlasmaX10Parser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <DOT: ".">
   | <ASSIGN: "=">
   | <LT: "<">
   | <PLUS: "+">
   | <MINUS: "-">
   | <AND: "&&">
   | <NOT: "!">
   | <QUESTION: "?">
   | <CLASS: "class">
   | <VALUE: "value">
   | <FINAL: "final">
   | <IF: "if">
   | <ELSE: "else">
   | <FALSE: "false">
   | <TRUE: "true">
   | <WHILE: "while">
   | <VOID: "void">
   | <BOOLEAN: "boolean">
   | <INTEGER: "int">
   | <NEW: "new">
   | <GET: "get">
   | <CONTAINS: "contains">
   | <HIGH: "high">
   | <LOW: "low">
   | <NEXT: "next">
   | <PREV: "prev">
   | <ISFIRST: "isFirst">
   | <ISLAST: "isLast">
   | <COORD: "coord">
   | <ORDINAL: "ordinal">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <STATIC: "static">
   | <STRING: "String">
   | <THIS: "this">
   | <PRINTLN: "System.out.println">
   | <PRINT: "System.out.print">
   | <PRINTERROR: "System.err.println">
   | <CURRENTTIME: "System.currentTimeMillis">
   | <JAVAIOSIZE: "java.io.Integer.SIZE">
   | <FACTORYPlace: "dist.factory.place">
   | <FACTORYBlock: "dist.factory.block">
   | <FACTORYEMPTYREGION: "region.factory.emptyRegion">
   | <FACTORYPOINT: "point.factory.point">
   | <JAVALANGOBJECT: "java.lang.Object">
   | <BREAK: "break">
   | <SUPER: "super">
   | <THROW: "throw">
   | <RUNTIMEEXCEPTION: "RuntimeException">
   | <DOUBLE: "double">
   | <LONG: "long">
   | <SHORT: "short">
   | <BYTE: "byte">
   | <REGION: "region">
   | <ID: "id">
   | <PLACES: "place.places">
   | <RANK: "rank">
   | <DISTRIBUTION: "distribution">
   | <DIST: "dist">
   | <SWITCH: "switch">
   | <ATEACH: "ateach">
   | <FINISH: "finish">
   | <MAIN: "main">
   | <MATH: "Math">
   | <SIN: "sin">
   | <COS: "cos">
   | <POW: "pow">
   | <EXP: "exp">
   | <SQRT: "sqrt">
   | <ABS: "abs">
   | <PLACE: "place">
   | <MIN: "min">
   | <MAX: "max">
   | <LOG: "log">
   | <SUM: "sum">
   | <SIZE: "size">
   | <EQUALS: "equals">
   | <PRIVATE: "private">
   | <FOREACH: "foreach">
   | <FINALLY: "finally">
   | <POINT: "point">
   | <CONTINUE: "continue">
   | <INSTANCEOF: "instanceof">
   | <DO: "do">
   | <FOR: "for">
   | <HERE: "here">
   | <DISTUNIQUE: "dist.UNIQUE">
   | <CASE: "case">
   | <ASYNC: "async">
   | <OR: "or">
   | <DEFAULT_TOKEN: "default">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
   | <POINT_LITERAL: <DECIMAL_LITERAL> (["p", "P"]) | <HEX_LITERAL> (["p", "P"]) | <OCTAL_LITERAL> (["p", "P"])>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <LONG_LITERAL: <INTEGER_LITERAL> "L" | <HEX_LITERAL> "L">
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "'" ((~["'", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))) "'">
   | <STRING_LITERAL: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

TOKEN :
{
   <RUNSIGNEDSHIFT: ">>>">
   | <RSIGNEDSHIFT: ">>">
   | <GT: ">">
}

File File() :
{
   NodeListOptional n0 = new NodeListOptional();
   TopLevelDeclaration n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=TopLevelDeclaration()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new File(n0,n2); }
}

TopLevelDeclaration TopLevelDeclaration() :
{
   NodeChoice n0;
   MainClass n1;
   ClassDeclaration n2;
   ValueDeclaration n3;

   
}
{
   (
      LOOKAHEAD(12)
      n1=MainClass()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=ClassDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ValueDeclaration()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new TopLevelDeclaration(n0); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   Identifier n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="class" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="{" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="public" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="static" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12="void" { n11 = JTBToolkit.makeNodeToken(n12); }
   n14="main" { n13 = JTBToolkit.makeNodeToken(n14); }
   n16="(" { n15 = JTBToolkit.makeNodeToken(n16); }
   n18="String" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20="[" { n19 = JTBToolkit.makeNodeToken(n20); }
   n22="]" { n21 = JTBToolkit.makeNodeToken(n22); }
   n23=Identifier()
   n25=")" { n24 = JTBToolkit.makeNodeToken(n25); }
   n27="{" { n26 = JTBToolkit.makeNodeToken(n27); }
   n28=Statement()
   n30="}" { n29 = JTBToolkit.makeNodeToken(n30); }
   n32="}" { n31 = JTBToolkit.makeNodeToken(n32); }
   
   { return new MainClass(n0,n2,n4,n5,n7,n9,n11,n13,n15,n17,n19,n21,n23,n24,n26,n28,n29,n31); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeOptional n0 = new NodeOptional();
   Public n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   ClassMember n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n1=Public()
      { n0.addNode(n1); }
   )?
   n3="class" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="{" { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=ClassMember()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n10="}" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ClassDeclaration(n0,n2,n4,n5,n7,n9); }
}

ValueDeclaration ValueDeclaration() :
{
   NodeOptional n0 = new NodeOptional();
   Public n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   ValueMember n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n1=Public()
      { n0.addNode(n1); }
   )?
   n3="value" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="{" { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=ValueMember()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n10="}" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ValueDeclaration(n0,n2,n4,n5,n7,n9); }
}

ClassMember ClassMember() :
{
   NodeChoice n0;
   ConstructorDeclaration n1;
   MethodDeclaration n2;
   ConstantDeclaration n3;
   InitializableConstantDeclaration n4;
   UpdatableFieldDeclaration n5;

   
}
{
   (
      LOOKAHEAD("public" Identifier() "(")
      n1=ConstructorDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(MethodModifier() ReturnType() Identifier() "(")
      n2=MethodDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=ConstantDeclaration()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(2)
      n4=InitializableConstantDeclaration()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=UpdatableFieldDeclaration()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new ClassMember(n0); }
}

ValueMember ValueMember() :
{
   NodeChoice n0;
   ConstructorDeclaration n1;
   MethodDeclaration n2;
   ConstantDeclaration n3;
   InitializableConstantDeclaration n4;

   
}
{
   (
      LOOKAHEAD("public" Identifier() "(")
      n1=ConstructorDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(MethodModifier() ReturnType() Identifier() "(")
      n2=MethodDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=ConstantDeclaration()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(2)
      n4=InitializableConstantDeclaration()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new ValueMember(n0); }
}

ConstructorDeclaration ConstructorDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   FormalParameterList n6;
   NodeToken n7;
   Token n8;
   Block n9;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=FormalParameterList()
      { n5.addNode(n6); }
   )?
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Block()
   
   { return new ConstructorDeclaration(n0,n2,n3,n5,n7,n9); }
}

Visibility Visibility() :
{
   NodeChoice n0;
   Public n1;
   Private n2;

   
}
{
   (
      n1=Public()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Private()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Visibility(n0); }
}

ConstantDeclaration ConstantDeclaration() :
{
   Visibility n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   Type n5;
   Identifier n6;
   NodeToken n7;
   Token n8;
   Expression n9;
   NodeToken n10;
   Token n11;

   
}
{
   n0=Visibility()
   n2="static" { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="final" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Type()
   n6=Identifier()
   n8="=" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Expression()
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new ConstantDeclaration(n0,n1,n3,n5,n6,n7,n9,n10); }
}

InitializableConstantDeclaration InitializableConstantDeclaration() :
{
   Visibility n0;
   NodeToken n1;
   Token n2;
   Type n3;
   Identifier n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=Visibility()
   n2="final" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Type()
   n4=Identifier()
   n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new InitializableConstantDeclaration(n0,n1,n3,n4,n5); }
}

UpdatableFieldDeclaration UpdatableFieldDeclaration() :
{
   Visibility n0;
   Type n1;
   Identifier n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=Visibility()
   n1=Type()
   n2=Identifier()
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new UpdatableFieldDeclaration(n0,n1,n2,n3); }
}

PublicStatic PublicStatic() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="static" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new PublicStatic(n0,n2); }
}

Public Public() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Public(n0); }
}

Private Private() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="private" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Private(n0); }
}

MethodDeclaration MethodDeclaration() :
{
   MethodModifier n0;
   ReturnType n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   FormalParameterList n6;
   NodeToken n7;
   Token n8;
   Block n9;

   
}
{
   n0=MethodModifier()
   n1=ReturnType()
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=FormalParameterList()
      { n5.addNode(n6); }
   )?
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Block()
   
   { return new MethodDeclaration(n0,n1,n2,n3,n5,n7,n9); }
}

MethodModifier MethodModifier() :
{
   NodeChoice n0;
   PublicStatic n1;
   Public n2;
   Private n3;

   
}
{
   (
      LOOKAHEAD("public" "static")
      n1=PublicStatic()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Public()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Private()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new MethodModifier(n0); }
}

FormalParameterList FormalParameterList() :
{
   FormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalParameterRest n2;

   
}
{
   n0=FormalParameter()
   (
      n2=FormalParameterRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FormalParameterList(n0,n1); }
}

FormalParameter FormalParameter() :
{
   FinalFormalParameter n0;

   
}
{
   n0=FinalFormalParameter()
   
   { return new FormalParameter(n0); }
}

FinalFormalParameter FinalFormalParameter() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   Type n3;
   Identifier n4;

   
}
{
   (
      n2="final" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=Type()
   n4=Identifier()
   
   { return new FinalFormalParameter(n0,n3,n4); }
}

FormalParameterRest FormalParameterRest() :
{
   NodeToken n0;
   Token n1;
   FormalParameter n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FormalParameter()
   
   { return new FormalParameterRest(n0,n2); }
}

ReturnType ReturnType() :
{
   NodeChoice n0;
   VoidType n1;
   Type n2;

   
}
{
   (
      n1=VoidType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Type()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ReturnType(n0); }
}

VoidType VoidType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="void" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new VoidType(n0); }
}

Type Type() :
{
   NodeChoice n0;
   UpdatableArrayType n1;
   ValueArrayType n2;
   NonArrayType n3;

   
}
{
   (
      LOOKAHEAD(UpdatableArrayType())
      n1=UpdatableArrayType()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(ValueArrayType())
      n2=ValueArrayType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=NonArrayType()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new Type(n0); }
}

UpdatableArrayType UpdatableArrayType() :
{
   NonArrayType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   RankEquation n5;
   NodeOptional n6 = new NodeOptional();
   DistributionEquation n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=NonArrayType()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=RankEquation()
   (
      n7=DistributionEquation()
      { n6.addNode(n7); }
   )?
   n9="]" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new UpdatableArrayType(n0,n1,n3,n5,n6,n8); }
}

ValueArrayType ValueArrayType() :
{
   NonArrayType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   RankEquation n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=NonArrayType()
   n2="value" { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=RankEquation()
   n9="]" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new ValueArrayType(n0,n1,n3,n5,n7,n8); }
}

RankEquation RankEquation() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   IntegerLiteral n4;

   
}
{
   n1="rank" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="==" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=IntegerLiteral()
   
   { return new RankEquation(n0,n2,n4); }
}

DistributionEquation DistributionEquation() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Identifier n6;

   
}
{
   n1="&&" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="distribution" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="==" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Identifier()
   
   { return new DistributionEquation(n0,n2,n4,n6); }
}

NonArrayType NonArrayType() :
{
   NodeChoice n0;
   BooleanType n1;
   ByteType n2;
   ShortType n3;
   IntegerType n4;
   LongType n5;
   DoubleType n6;
   StringType n7;
   PlaceType n8;
   DistType n9;
   RegionType n10;
   PointType n11;
   ClassNameType n12;

   
}
{
   (
      n1=BooleanType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ByteType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ShortType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IntegerType()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=LongType()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=DoubleType()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=StringType()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=PlaceType()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=DistType()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=RegionType()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=PointType()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=ClassNameType()
      { n0 = new NodeChoice(n12, 11); }
   )
   
   { return new NonArrayType(n0); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="boolean" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

ByteType ByteType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="byte" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ByteType(n0); }
}

ShortType ShortType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="short" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShortType(n0); }
}

IntegerType IntegerType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerType(n0); }
}

LongType LongType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="long" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new LongType(n0); }
}

DoubleType DoubleType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="double" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DoubleType(n0); }
}

StringType StringType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="String" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new StringType(n0); }
}

PlaceType PlaceType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="place" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlaceType(n0); }
}

DistType DistType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="dist" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=RankEquation()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DistType(n0,n2,n4,n6,n7); }
}

RegionType RegionType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="region" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=RankEquation()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new RegionType(n0,n2,n4,n6,n7); }
}

PointType PointType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="point" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=RankEquation()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PointType(n0,n2,n4,n6,n7); }
}

ClassNameType ClassNameType() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new ClassNameType(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   Assignment n1;
   AsyncStatement n2;
   Block n3;
   BreakStatement n4;
   ContinueStatement n5;
   DoStatement n6;
   FinishStatement n7;
   IfStatement n8;
   LoopStatement n9;
   PostfixStatement n10;
   PrintlnStatement n11;
   PrintStatement n12;
   PrintErrorStatement n13;
   ReturnStatement n14;
   SwitchStatement n15;
   ThrowStatement n16;
   WhileStatement n17;

   
}
{
   (
      LOOKAHEAD(Assignment())
      n1=Assignment()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=AsyncStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Block()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=BreakStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ContinueStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=DoStatement()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=FinishStatement()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=IfStatement()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=LoopStatement()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=PostfixStatement()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=PrintlnStatement()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=PrintStatement()
      { n0 = new NodeChoice(n12, 11); }
   |
      n13=PrintErrorStatement()
      { n0 = new NodeChoice(n13, 12); }
   |
      n14=ReturnStatement()
      { n0 = new NodeChoice(n14, 13); }
   |
      n15=SwitchStatement()
      { n0 = new NodeChoice(n15, 14); }
   |
      n16=ThrowStatement()
      { n0 = new NodeChoice(n16, 15); }
   |
      n17=WhileStatement()
      { n0 = new NodeChoice(n17, 16); }
   )
   
   { return new Statement(n0); }
}

Assignment Assignment() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=PrimaryExpression()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Assignment(n0,n1,n3,n4); }
}

AsyncStatement AsyncStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Block n7;

   
}
{
   n1="async" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Block()
   
   { return new AsyncStatement(n0,n2,n4,n5,n7); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   BlockStatement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=BlockStatement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Block(n0,n2,n4); }
}

BlockStatement BlockStatement() :
{
   NodeChoice n0;
   FinalVariableDeclaration n1;
   UpdatableVariableDeclaration n2;
   Statement n3;

   
}
{
   (
      n1=FinalVariableDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(Type() Identifier() "=")
      n2=UpdatableVariableDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Statement()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new BlockStatement(n0); }
}

FinalVariableDeclaration FinalVariableDeclaration() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="final" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new FinalVariableDeclaration(n0,n2,n3,n4,n6,n7); }
}

UpdatableVariableDeclaration UpdatableVariableDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=Type()
   n1=Identifier()
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new UpdatableVariableDeclaration(n0,n1,n2,n4,n5); }
}

BreakStatement BreakStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="break" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new BreakStatement(n0,n2); }
}

ContinueStatement ContinueStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="continue" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ContinueStatement(n0,n2); }
}

DoStatement DoStatement() :
{
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1="do" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   n4="while" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new DoStatement(n0,n2,n3,n5,n7,n8,n10); }
}

FinishStatement FinishStatement() :
{
   NodeToken n0;
   Token n1;
   Statement n2;

   
}
{
   n1="finish" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   
   { return new FinishStatement(n0,n2); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   ElseClause n9;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   (
      LOOKAHEAD(1)
      n9=ElseClause()
      { n8.addNode(n9); }
   )?
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8); }
}

ElseClause ElseClause() :
{
   NodeToken n0;
   Token n1;
   Statement n2;

   
}
{
   n1="else" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   
   { return new ElseClause(n0,n2); }
}

LoopStatement LoopStatement() :
{
   LoopQualifier n0;
   NodeToken n1;
   Token n2;
   PointType n3;
   ExplodedSpecification n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   Statement n10;

   
}
{
   n0=LoopQualifier()
   n2="(" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PointType()
   n4=ExplodedSpecification()
   n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Statement()
   
   { return new LoopStatement(n0,n1,n3,n4,n5,n7,n8,n10); }
}

LoopQualifier LoopQualifier() :
{
   NodeChoice n0;
   Ateach n1;
   For n2;
   Foreach n3;

   
}
{
   (
      n1=Ateach()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=For()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Foreach()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new LoopQualifier(n0); }
}

Ateach Ateach() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="ateach" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Ateach(n0); }
}

For For() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="for" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new For(n0); }
}

Foreach Foreach() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="foreach" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Foreach(n0); }
}

ExplodedSpecification ExplodedSpecification() :
{
   NodeChoice n0;
   PointNameCoordinates n1;
   PointName n2;
   Coordinates n3;

   
}
{
   (
      LOOKAHEAD(Identifier() "[")
      n1=PointNameCoordinates()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PointName()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Coordinates()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new ExplodedSpecification(n0); }
}

PointNameCoordinates PointNameCoordinates() :
{
   PointName n0;
   Coordinates n1;

   
}
{
   n0=PointName()
   n1=Coordinates()
   
   { return new PointNameCoordinates(n0,n1); }
}

PointName PointName() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new PointName(n0); }
}

Coordinates Coordinates() :
{
   NodeToken n0;
   Token n1;
   IdentifierList n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IdentifierList()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Coordinates(n0,n2,n3); }
}

IdentifierList IdentifierList() :
{
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   IdentifierRest n2;

   
}
{
   n0=Identifier()
   (
      n2=IdentifierRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new IdentifierList(n0,n1); }
}

IdentifierRest IdentifierRest() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new IdentifierRest(n0,n2); }
}

PostfixStatement PostfixStatement() :
{
   PostfixExpression n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=PostfixExpression()
   n2=";" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new PostfixStatement(n0,n1); }
}

PrintlnStatement PrintlnStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintlnStatement(n0,n2,n4,n5,n7); }
}

PrintStatement PrintStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.print" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintStatement(n0,n2,n4,n5,n7); }
}

PrintErrorStatement PrintErrorStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.err.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintErrorStatement(n0,n2,n4,n5,n7); }
}

ReturnStatement ReturnStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="return" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Expression()
      { n2.addNode(n3); }
   )?
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ReturnStatement(n0,n2,n4); }
}

SwitchStatement SwitchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   SwitchEntry n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="switch" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=SwitchEntry()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12="}" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new SwitchStatement(n0,n2,n4,n5,n7,n9,n11); }
}

SwitchEntry SwitchEntry() :
{
   SwitchLabel n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   BlockStatement n4;

   
}
{
   n0=SwitchLabel()
   n2=":" { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=BlockStatement()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new SwitchEntry(n0,n1,n3); }
}

SwitchLabel SwitchLabel() :
{
   NodeChoice n0;
   Case n1;
   Default n2;

   
}
{
   (
      n1=Case()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Default()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new SwitchLabel(n0); }
}

Case Case() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="case" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new Case(n0,n2); }
}

Default Default() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="default" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Default(n0); }
}

ThrowStatement ThrowStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="throw" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="new" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="RuntimeException" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=";" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ThrowStatement(n0,n2,n4,n6,n8,n9,n11); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

Expression Expression() :
{
   ConditionalExpression n0;

   
}
{
   n0=ConditionalExpression()
   
   { return new Expression(n0); }
}

ConditionalExpression ConditionalExpression() :
{
   ConditionalOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   ConditionalExpressionRest n2;

   
}
{
   n0=ConditionalOrExpression()
   (
      n2=ConditionalExpressionRest()
      { n1.addNode(n2); }
   )?
   
   { return new ConditionalExpression(n0,n1); }
}

ConditionalExpressionRest ConditionalExpressionRest() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   Expression n5;

   
}
{
   n1="?" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Expression()
   
   { return new ConditionalExpressionRest(n0,n2,n3,n5); }
}

ConditionalOrExpression ConditionalOrExpression() :
{
   ConditionalAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ConditionalOrExpressionRest n2;

   
}
{
   n0=ConditionalAndExpression()
   (
      n2=ConditionalOrExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ConditionalOrExpression(n0,n1); }
}

ConditionalOrExpressionRest ConditionalOrExpressionRest() :
{
   NodeToken n0;
   Token n1;
   ConditionalAndExpression n2;

   
}
{
   n1="||" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ConditionalAndExpression()
   
   { return new ConditionalOrExpressionRest(n0,n2); }
}

ConditionalAndExpression ConditionalAndExpression() :
{
   InclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ConditionalAndExpressionRest n2;

   
}
{
   n0=InclusiveOrExpression()
   (
      n2=ConditionalAndExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ConditionalAndExpression(n0,n1); }
}

ConditionalAndExpressionRest ConditionalAndExpressionRest() :
{
   NodeToken n0;
   Token n1;
   InclusiveOrExpression n2;

   
}
{
   n1="&&" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=InclusiveOrExpression()
   
   { return new ConditionalAndExpressionRest(n0,n2); }
}

InclusiveOrExpression InclusiveOrExpression() :
{
   ExclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   InclusiveOrExpressionRest n2;

   
}
{
   n0=ExclusiveOrExpression()
   (
      n2=InclusiveOrExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new InclusiveOrExpression(n0,n1); }
}

InclusiveOrExpressionRest InclusiveOrExpressionRest() :
{
   NodeToken n0;
   Token n1;
   ExclusiveOrExpression n2;

   
}
{
   n1="|" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ExclusiveOrExpression()
   
   { return new InclusiveOrExpressionRest(n0,n2); }
}

ExclusiveOrExpression ExclusiveOrExpression() :
{
   AndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ExclusiveOrExpressionRest n2;

   
}
{
   n0=AndExpression()
   (
      n2=ExclusiveOrExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExclusiveOrExpression(n0,n1); }
}

ExclusiveOrExpressionRest ExclusiveOrExpressionRest() :
{
   NodeToken n0;
   Token n1;
   AndExpression n2;

   
}
{
   n1="^" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AndExpression()
   
   { return new ExclusiveOrExpressionRest(n0,n2); }
}

AndExpression AndExpression() :
{
   EqualityExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   AndExpressionRest n2;

   
}
{
   n0=EqualityExpression()
   (
      n2=AndExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AndExpression(n0,n1); }
}

AndExpressionRest AndExpressionRest() :
{
   NodeToken n0;
   Token n1;
   EqualityExpression n2;

   
}
{
   n1="&" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=EqualityExpression()
   
   { return new AndExpressionRest(n0,n2); }
}

EqualityExpression EqualityExpression() :
{
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   EqualityExpressionRest n2;

   
}
{
   n0=RelationalExpression()
   (
      n2=EqualityExpressionRest()
      { n1.addNode(n2); }
   )?
   
   { return new EqualityExpression(n0,n1); }
}

EqualityExpressionRest EqualityExpressionRest() :
{
   NodeChoice n0;
   EqualsExpression n1;
   NonEqualsExpression n2;

   
}
{
   (
      n1=EqualsExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=NonEqualsExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new EqualityExpressionRest(n0); }
}

EqualsExpression EqualsExpression() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1="==" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new EqualsExpression(n0,n2); }
}

NonEqualsExpression NonEqualsExpression() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1="!=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new NonEqualsExpression(n0,n2); }
}

RelationalExpression RelationalExpression() :
{
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   RelationalExpressionRest n2;

   
}
{
   n0=ShiftExpression()
   (
      n2=RelationalExpressionRest()
      { n1.addNode(n2); }
   )?
   
   { return new RelationalExpression(n0,n1); }
}

RelationalExpressionRest RelationalExpressionRest() :
{
   NodeChoice n0;
   LessThanExpression n1;
   GreaterThanExpression n2;
   LessThanEqualExpression n3;
   GreaterThanEqualExpression n4;

   
}
{
   (
      n1=LessThanExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=GreaterThanExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=LessThanEqualExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=GreaterThanEqualExpression()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new RelationalExpressionRest(n0); }
}

LessThanExpression LessThanExpression() :
{
   NodeToken n0;
   Token n1;
   ShiftExpression n2;

   
}
{
   n1="<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShiftExpression()
   
   { return new LessThanExpression(n0,n2); }
}

GreaterThanExpression GreaterThanExpression() :
{
   NodeToken n0;
   Token n1;
   ShiftExpression n2;

   
}
{
   n1=">" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShiftExpression()
   
   { return new GreaterThanExpression(n0,n2); }
}

LessThanEqualExpression LessThanEqualExpression() :
{
   NodeToken n0;
   Token n1;
   ShiftExpression n2;

   
}
{
   n1="<=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShiftExpression()
   
   { return new LessThanEqualExpression(n0,n2); }
}

GreaterThanEqualExpression GreaterThanEqualExpression() :
{
   NodeToken n0;
   Token n1;
   ShiftExpression n2;

   
}
{
   n1=">=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShiftExpression()
   
   { return new GreaterThanEqualExpression(n0,n2); }
}

ShiftExpression ShiftExpression() :
{
   AdditiveExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ShiftExpressionRest n2;

   
}
{
   n0=AdditiveExpression()
   (
      n2=ShiftExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ShiftExpression(n0,n1); }
}

ShiftExpressionRest ShiftExpressionRest() :
{
   NodeChoice n0;
   ShiftLeftExpression n1;
   ShiftRightExpression n2;
   ShiftRightUnsignedExpression n3;

   
}
{
   (
      n1=ShiftLeftExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ShiftRightExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ShiftRightUnsignedExpression()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new ShiftExpressionRest(n0); }
}

ShiftLeftExpression ShiftLeftExpression() :
{
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;

   
}
{
   n1="<<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AdditiveExpression()
   
   { return new ShiftLeftExpression(n0,n2); }
}

ShiftRightExpression ShiftRightExpression() :
{
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;

   
}
{
   n1=">>" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AdditiveExpression()
   
   { return new ShiftRightExpression(n0,n2); }
}

ShiftRightUnsignedExpression ShiftRightUnsignedExpression() :
{
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;

   
}
{
   n1=">>>" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AdditiveExpression()
   
   { return new ShiftRightUnsignedExpression(n0,n2); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   AdditiveExpressionRest n2;

   
}
{
   n0=MultiplicativeExpression()
   (
      n2=AdditiveExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AdditiveExpression(n0,n1); }
}

AdditiveExpressionRest AdditiveExpressionRest() :
{
   NodeChoice n0;
   PlusOffset n1;
   PlusExpression n2;
   MinusExpression n3;

   
}
{
   (
      LOOKAHEAD(PlusOffset())
      n1=PlusOffset()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlusExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=MinusExpression()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new AdditiveExpressionRest(n0); }
}

PlusOffset PlusOffset() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpressionList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="+" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ExpressionList()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new PlusOffset(n0,n2,n4,n5); }
}

PlusExpression PlusExpression() :
{
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;

   
}
{
   n1="+" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplicativeExpression()
   
   { return new PlusExpression(n0,n2); }
}

MinusExpression MinusExpression() :
{
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;

   
}
{
   n1="-" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplicativeExpression()
   
   { return new MinusExpression(n0,n2); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   MapExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   MultiplicativeExpressionRest n2;

   
}
{
   n0=MapExpression()
   (
      n2=MultiplicativeExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MultiplicativeExpression(n0,n1); }
}

MultiplicativeExpressionRest MultiplicativeExpressionRest() :
{
   NodeChoice n0;
   TimesOffset n1;
   TimesExpression n2;
   DivideOffset n3;
   DivideExpression n4;
   ModulusExpression n5;

   
}
{
   (
      LOOKAHEAD(TimesOffset())
      n1=TimesOffset()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TimesExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(DivideOffset())
      n3=DivideOffset()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DivideExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ModulusExpression()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new MultiplicativeExpressionRest(n0); }
}

TimesOffset TimesOffset() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpressionList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="*" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ExpressionList()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new TimesOffset(n0,n2,n4,n5); }
}

TimesExpression TimesExpression() :
{
   NodeToken n0;
   Token n1;
   MapExpression n2;

   
}
{
   n1="*" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MapExpression()
   
   { return new TimesExpression(n0,n2); }
}

DivideOffset DivideOffset() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpressionList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="/" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ExpressionList()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new DivideOffset(n0,n2,n4,n5); }
}

DivideExpression DivideExpression() :
{
   NodeToken n0;
   Token n1;
   MapExpression n2;

   
}
{
   n1="/" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MapExpression()
   
   { return new DivideExpression(n0,n2); }
}

ModulusExpression ModulusExpression() :
{
   NodeToken n0;
   Token n1;
   MapExpression n2;

   
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MapExpression()
   
   { return new ModulusExpression(n0,n2); }
}

MapExpression MapExpression() :
{
   RegionExpression n0;
   NodeOptional n1 = new NodeOptional();
   MapExpressionRest n2;

   
}
{
   n0=RegionExpression()
   (
      n2=MapExpressionRest()
      { n1.addNode(n2); }
   )?
   
   { return new MapExpression(n0,n1); }
}

MapExpressionRest MapExpressionRest() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   
}
{
   n1="->" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new MapExpressionRest(n0,n2); }
}

RegionExpression RegionExpression() :
{
   NodeChoice n0;
   RegionConstant n1;
   UnaryExpression n2;

   
}
{
   (
      n1=RegionConstant()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=UnaryExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new RegionExpression(n0); }
}

RegionConstant RegionConstant() :
{
   NodeToken n0;
   Token n1;
   ColonExpression n2;
   NodeListOptional n3 = new NodeListOptional();
   ColonRest n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ColonExpression()
   (
      n4=ColonRest()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new RegionConstant(n0,n2,n3,n5); }
}

ColonRest ColonRest() :
{
   NodeToken n0;
   Token n1;
   ColonExpression n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ColonExpression()
   
   { return new ColonRest(n0,n2); }
}

ColonExpression ColonExpression() :
{
   NodeChoice n0;
   ColonPair n1;
   Expression n2;

   
}
{
   (
      LOOKAHEAD(Expression() ":")
      n1=ColonPair()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Expression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ColonExpression(n0); }
}

ColonPair ColonPair() :
{
   Expression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   
}
{
   n0=Expression()
   n2=":" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   
   { return new ColonPair(n0,n1,n3); }
}

MathExpression MathExpression() :
{
   NodeChoice n0;
   SinExpression n1;
   CosExpression n2;
   PowExpression n3;
   ExpExpression n4;
   SqrtExpression n5;
   AbsExpression n6;
   MinExpression n7;
   MaxExpression n8;
   LogExpression n9;

   
}
{
   (
      LOOKAHEAD(3)
      n1=SinExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(3)
      n2=CosExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(3)
      n3=PowExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(3)
      n4=ExpExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(3)
      n5=SqrtExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(3)
      n6=AbsExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(3)
      n7=MinExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(3)
      n8=MaxExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(3)
      n9=LogExpression()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new MathExpression(n0); }
}

SinExpression SinExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="sin" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new SinExpression(n0,n2,n4,n6,n8,n9); }
}

CosExpression CosExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="cos" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new CosExpression(n0,n2,n4,n6,n8,n9); }
}

PowExpression PowExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="pow" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=Expression()
   n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new PowExpression(n0,n2,n4,n6,n8,n9,n11,n12); }
}

ExpExpression ExpExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="exp" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ExpExpression(n0,n2,n4,n6,n8,n9); }
}

SqrtExpression SqrtExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="sqrt" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new SqrtExpression(n0,n2,n4,n6,n8,n9); }
}

AbsExpression AbsExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="abs" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new AbsExpression(n0,n2,n4,n6,n8,n9); }
}

MinExpression MinExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="min" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=Expression()
   n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new MinExpression(n0,n2,n4,n6,n8,n9,n11,n12); }
}

MaxExpression MaxExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="max" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=Expression()
   n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new MaxExpression(n0,n2,n4,n6,n8,n9,n11,n12); }
}

LogExpression LogExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="log" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new LogExpression(n0,n2,n4,n6,n8,n9); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   UnaryPlusExpression n1;
   UnaryMinusExpression n2;
   PreIncrementExpression n3;
   PreDecrementExpression n4;
   ComplimentExpression n5;
   NotExpression n6;
   CoercionToIntExpression n7;
   CoercionToDoubleExpression n8;
   CoercionToLongExpression n9;
   CoercionToShortExpression n10;
   CoercionToByteExpression n11;
   TypeAnnotatedExpression n12;
   PostfixExpression n13;

   
}
{
   (
      n1=UnaryPlusExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=UnaryMinusExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=PreIncrementExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=PreDecrementExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ComplimentExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=NotExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(CoercionToIntExpression())
      n7=CoercionToIntExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(CoercionToDoubleExpression())
      n8=CoercionToDoubleExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(CoercionToLongExpression())
      n9=CoercionToLongExpression()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(CoercionToShortExpression())
      n10=CoercionToShortExpression()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(CoercionToByteExpression())
      n11=CoercionToByteExpression()
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(TypeAnnotatedExpression())
      n12=TypeAnnotatedExpression()
      { n0 = new NodeChoice(n12, 11); }
   |
      n13=PostfixExpression()
      { n0 = new NodeChoice(n13, 12); }
   )
   
   { return new UnaryExpression(n0); }
}

UnaryPlusExpression UnaryPlusExpression() :
{
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;

   
}
{
   n1="+" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrimaryExpression()
   
   { return new UnaryPlusExpression(n0,n2); }
}

UnaryMinusExpression UnaryMinusExpression() :
{
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;

   
}
{
   n1="-" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrimaryExpression()
   
   { return new UnaryMinusExpression(n0,n2); }
}

PreIncrementExpression PreIncrementExpression() :
{
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;

   
}
{
   n1="++" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrimaryExpression()
   
   { return new PreIncrementExpression(n0,n2); }
}

PreDecrementExpression PreDecrementExpression() :
{
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;

   
}
{
   n1="--" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrimaryExpression()
   
   { return new PreDecrementExpression(n0,n2); }
}

ComplimentExpression ComplimentExpression() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   
}
{
   n1="~" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new ComplimentExpression(n0,n2); }
}

NotExpression NotExpression() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   
}
{
   n1="!" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new NotExpression(n0,n2); }
}

CoercionToIntExpression CoercionToIntExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="int" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=UnaryExpression()
   
   { return new CoercionToIntExpression(n0,n2,n4,n6); }
}

CoercionToDoubleExpression CoercionToDoubleExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="double" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=UnaryExpression()
   
   { return new CoercionToDoubleExpression(n0,n2,n4,n6); }
}

CoercionToLongExpression CoercionToLongExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="long" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=UnaryExpression()
   
   { return new CoercionToLongExpression(n0,n2,n4,n6); }
}

CoercionToShortExpression CoercionToShortExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="short" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=UnaryExpression()
   
   { return new CoercionToShortExpression(n0,n2,n4,n6); }
}

CoercionToByteExpression CoercionToByteExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="byte" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=UnaryExpression()
   
   { return new CoercionToByteExpression(n0,n2,n4,n6); }
}

TypeAnnotatedExpression TypeAnnotatedExpression() :
{
   NodeToken n0;
   Token n1;
   TypeAnnotation n2;
   NodeToken n3;
   Token n4;
   UnaryExpression n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeAnnotation()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=UnaryExpression()
   
   { return new TypeAnnotatedExpression(n0,n2,n3,n5); }
}

TypeAnnotation TypeAnnotation() :
{
   NodeChoice n0;
   UpdatableArrayType n1;
   ValueArrayType n2;
   DistType n3;
   RegionType n4;
   PointType n5;

   
}
{
   (
      LOOKAHEAD(UpdatableArrayType())
      n1=UpdatableArrayType()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(ValueArrayType())
      n2=ValueArrayType()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(DistType())
      n3=DistType()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(RegionType())
      n4=RegionType()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(PointType())
      n5=PointType()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new TypeAnnotation(n0); }
}

PostfixExpression PostfixExpression() :
{
   NodeChoice n0;
   PostIncrementExpression n1;
   PostDecrementExpression n2;
   PrimaryExpression n3;
   Place n4;
   FactoryBlock n5;
   FactoryBlockCyclic n6;
   FactoryEmptyRegion n7;
   CurrentTime n8;

   
}
{
   (
      LOOKAHEAD(PostIncrementExpression())
      n1=PostIncrementExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(PostDecrementExpression())
      n2=PostDecrementExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=PrimaryExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Place()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=FactoryBlock()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=FactoryBlockCyclic()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=FactoryEmptyRegion()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=CurrentTime()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new PostfixExpression(n0); }
}

PostIncrementExpression PostIncrementExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=PrimaryExpression()
   n2="++" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new PostIncrementExpression(n0,n1); }
}

PostDecrementExpression PostDecrementExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=PrimaryExpression()
   n2="--" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new PostDecrementExpression(n0,n1); }
}

PrimaryExpression PrimaryExpression() :
{
   PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimarySuffix n2;

   
}
{
   n0=PrimaryPrefix()
   (
      LOOKAHEAD(2)
      n2=PrimarySuffix()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new PrimaryExpression(n0,n1); }
}

PrimaryPrefix PrimaryPrefix() :
{
   NodeChoice n0;
   Literal n1;
   MathExpression n2;
   This n3;
   ExpressionInParentheses n4;
   AllocationExpression n5;
   MethodCall n6;
   Identifier n7;

   
}
{
   (
      n1=Literal()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=MathExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=This()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(ExpressionInParentheses())
      n4=ExpressionInParentheses()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=AllocationExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(MethodCall())
      n6=MethodCall()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=Identifier()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new PrimaryPrefix(n0); }
}

This This() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="this" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new This(n0); }
}

ExpressionInParentheses ExpressionInParentheses() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ExpressionInParentheses(n0,n2,n3); }
}

Place Place() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="place.places" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Place(n0,n2,n4,n5); }
}

FactoryBlock FactoryBlock() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="dist.factory.block" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new FactoryBlock(n0,n2,n4,n5); }
}

FactoryBlockCyclic FactoryBlockCyclic() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1="dist.factory.blockCyclic" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new FactoryBlockCyclic(n0,n2,n4,n5,n7,n8); }
}

FactoryEmptyRegion FactoryEmptyRegion() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   IntegerLiteral n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="region.factory.emptyRegion" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=IntegerLiteral()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new FactoryEmptyRegion(n0,n2,n4,n5); }
}

CurrentTime CurrentTime() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="System.currentTimeMillis" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new CurrentTime(n0,n2,n4); }
}

PrimarySuffix PrimarySuffix() :
{
   NodeChoice n0;
   ArrayAccess n1;
   DotDistribution n2;
   DotRegion n3;
   DotId n4;
   DotGet n5;
   DotContainsPoint n6;
   DotContains n7;
   DotEquals n8;
   DotHigh n9;
   DotLow n10;
   DotRank n11;
   DotNext n12;
   DotPrev n13;
   DotIsFirst n14;
   DotIsLast n15;
   DotCoord n16;
   DotOrdinalPoint n17;
   DotOrdinal n18;
   DotMax n19;
   DotSum n20;
   DotSize n21;
   DotMethodCall n22;
   DotIdentifier n23;

   
}
{
   (
      n1=ArrayAccess()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=DotDistribution()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=DotRegion()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(2)
      n4=DotId()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(3)
      n5=DotGet()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(4)
      n6=DotContainsPoint()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(3)
      n7=DotContains()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(3)
      n8=DotEquals()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(3)
      n9=DotHigh()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(3)
      n10=DotLow()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(3)
      n11=DotRank()
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(2)
      n12=DotNext()
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(2)
      n13=DotPrev()
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(2)
      n14=DotIsFirst()
      { n0 = new NodeChoice(n14, 13); }
   |
      LOOKAHEAD(2)
      n15=DotIsLast()
      { n0 = new NodeChoice(n15, 14); }
   |
      LOOKAHEAD(2)
      n16=DotCoord()
      { n0 = new NodeChoice(n16, 15); }
   |
      LOOKAHEAD(4)
      n17=DotOrdinalPoint()
      { n0 = new NodeChoice(n17, 16); }
   |
      LOOKAHEAD(4)
      n18=DotOrdinal()
      { n0 = new NodeChoice(n18, 17); }
   |
      LOOKAHEAD(2)
      n19=DotMax()
      { n0 = new NodeChoice(n19, 18); }
   |
      LOOKAHEAD(2)
      n20=DotSum()
      { n0 = new NodeChoice(n20, 19); }
   |
      LOOKAHEAD(2)
      n21=DotSize()
      { n0 = new NodeChoice(n21, 20); }
   |
      LOOKAHEAD("." Identifier() "(" [ ExpressionList() ] ")")
      n22=DotMethodCall()
      { n0 = new NodeChoice(n22, 21); }
   |
      LOOKAHEAD(2)
      n23=DotIdentifier()
      { n0 = new NodeChoice(n23, 22); }
   )
   
   { return new PrimarySuffix(n0); }
}

ArrayAccess ArrayAccess() :
{
   NodeToken n0;
   Token n1;
   ExpressionList n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ExpressionList()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ArrayAccess(n0,n2,n3); }
}

DotMethodCall DotMethodCall() :
{
   NodeToken n0;
   Token n1;
   MethodCall n2;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MethodCall()
   
   { return new DotMethodCall(n0,n2); }
}

MethodCall MethodCall() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   ExpressionList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=Identifier()
   n2="(" { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=ExpressionList()
      { n3.addNode(n4); }
   )?
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new MethodCall(n0,n1,n3,n5); }
}

DotDistribution DotDistribution() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="distribution" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new DotDistribution(n0,n2); }
}

DotRegion DotRegion() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="region" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new DotRegion(n0,n2); }
}

DotId DotId() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="id" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new DotId(n0,n2); }
}

DotGet DotGet() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   ExpressionList n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="get" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=ExpressionList()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotGet(n0,n2,n4,n6,n7); }
}

DotContainsPoint DotContainsPoint() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ExpressionList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="contains" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="[" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=ExpressionList()
   n10="]" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new DotContainsPoint(n0,n2,n4,n6,n8,n9,n11); }
}

DotContains DotContains() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="contains" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotContains(n0,n2,n4,n6,n7); }
}

DotEquals DotEquals() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="equals" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotEquals(n0,n2,n4,n6,n7); }
}

DotHigh DotHigh() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="high" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotHigh(n0,n2,n4,n6); }
}

DotLow DotLow() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="low" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotLow(n0,n2,n4,n6); }
}

DotRank DotRank() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="rank" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotRank(n0,n2,n4,n6,n7); }
}

DotNext DotNext() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="next" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotNext(n0,n2,n4,n6); }
}

DotPrev DotPrev() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="prev" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotPrev(n0,n2,n4,n6); }
}

DotIsFirst DotIsFirst() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="isFirst" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotIsFirst(n0,n2,n4,n6); }
}

DotIsLast DotIsLast() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="isLast" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotIsLast(n0,n2,n4,n6); }
}

DotCoord DotCoord() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   IntegerLiteral n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="coord" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="[" { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=IntegerLiteral()
   n13="]" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new DotCoord(n0,n2,n4,n6,n7,n9,n11,n12); }
}

DotOrdinalPoint DotOrdinalPoint() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ExpressionList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="ordinal" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="[" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=ExpressionList()
   n10="]" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new DotOrdinalPoint(n0,n2,n4,n6,n8,n9,n11); }
}

DotOrdinal DotOrdinal() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="ordinal" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotOrdinal(n0,n2,n4,n6,n7); }
}

DotMax DotMax() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="max" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotMax(n0,n2,n4,n6); }
}

DotSum DotSum() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="sum" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotSum(n0,n2,n4,n6); }
}

DotSize DotSize() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="size" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DotSize(n0,n2,n4,n6); }
}

DotIdentifier DotIdentifier() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new DotIdentifier(n0,n2); }
}

AllocationExpression AllocationExpression() :
{
   NodeChoice n0;
   NewObject n1;
   NewValueArray n2;
   NewUpdatableArray n3;

   
}
{
   (
      LOOKAHEAD(3)
      n1=NewObject()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD("new" NonArrayType() "value")
      n2=NewValueArray()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD("new" NonArrayType() "[")
      n3=NewUpdatableArray()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new AllocationExpression(n0); }
}

NewObject NewObject() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   ExpressionList n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=ExpressionList()
      { n5.addNode(n6); }
   )?
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new NewObject(n0,n2,n3,n5,n7); }
}

NewValueArray NewValueArray() :
{
   NodeToken n0;
   Token n1;
   NonArrayType n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   ArrayInitializer n10;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=NonArrayType()
   n4="value" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="[" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier()
   n9="]" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=ArrayInitializer()
   
   { return new NewValueArray(n0,n2,n3,n5,n7,n8,n10); }
}

NewUpdatableArray NewUpdatableArray() :
{
   NodeToken n0;
   Token n1;
   NonArrayType n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   ArrayInitializer n9;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=NonArrayType()
   n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Identifier()
   n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      LOOKAHEAD(ArrayInitializer())
      n9=ArrayInitializer()
      { n8.addNode(n9); }
   )?
   
   { return new NewUpdatableArray(n0,n2,n3,n5,n6,n8); }
}

Literal Literal() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   LongLiteral n2;
   HexLiteral n3;
   FloatingPointLiteral n4;
   StringLiteral n5;
   True n6;
   False n7;
   HereLiteral n8;
   PlaceFirstPlace n9;
   PlaceMaxPlaces n10;
   DistUnique n11;
   JavaIntegerSize n12;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=LongLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=HexLiteral()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=FloatingPointLiteral()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=StringLiteral()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=True()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=False()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=HereLiteral()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=PlaceFirstPlace()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=PlaceMaxPlaces()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=DistUnique()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=JavaIntegerSize()
      { n0 = new NodeChoice(n12, 11); }
   )
   
   { return new Literal(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

LongLiteral LongLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<LONG_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new LongLiteral(n0); }
}

HexLiteral HexLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<HEX_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new HexLiteral(n0); }
}

FloatingPointLiteral FloatingPointLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<FLOATING_POINT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FloatingPointLiteral(n0); }
}

StringLiteral StringLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new StringLiteral(n0); }
}

True True() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="true" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new True(n0); }
}

False False() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="false" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new False(n0); }
}

HereLiteral HereLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="here" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new HereLiteral(n0); }
}

PlaceFirstPlace PlaceFirstPlace() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="place.FIRST_PLACE" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlaceFirstPlace(n0); }
}

PlaceMaxPlaces PlaceMaxPlaces() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="place.MAX_PLACES" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlaceMaxPlaces(n0); }
}

DistUnique DistUnique() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="dist.UNIQUE" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DistUnique(n0); }
}

JavaIntegerSize JavaIntegerSize() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="java.lang.Integer.SIZE" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new JavaIntegerSize(n0); }
}

ExpressionList ExpressionList() :
{
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   ArgumentRest n2;

   
}
{
   n0=Expression()
   (
      n2=ArgumentRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpressionList(n0,n1); }
}

ArgumentRest ArgumentRest() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new ArgumentRest(n0,n2); }
}

ArrayInitializer ArrayInitializer() :
{
   NodeToken n0;
   Token n1;
   PointType n2;
   ExplodedSpecification n3;
   NodeToken n4;
   Token n5;
   Block n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PointType()
   n3=ExplodedSpecification()
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Block()
   
   { return new ArrayInitializer(n0,n2,n3,n4,n6); }
}
