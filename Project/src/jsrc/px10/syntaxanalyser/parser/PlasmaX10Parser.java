/* Generated By:JavaCC: Do not edit this line. PlasmaX10Parser.java */
package jsrc.px10.syntaxanalyser.parser;

import jsrc.px10.syntaxanalyser.syntaxtree.*;
import java.util.Vector;


public class PlasmaX10Parser implements PlasmaX10ParserConstants {

  static final public File File() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   TopLevelDeclaration n1;
   NodeToken n2;
   Token n3;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case VALUE:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = TopLevelDeclaration();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new File(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public TopLevelDeclaration TopLevelDeclaration() throws ParseException {
   NodeChoice n0;
   MainClass n1;
   ClassDeclaration n2;
   ValueDeclaration n3;
    if (jj_2_1(12)) {
      n1 = MainClass();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_2(2)) {
      n2 = ClassDeclaration();
        n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUE:
      case PUBLIC:
        n3 = ValueDeclaration();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new TopLevelDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   Identifier n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(CLASS);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(LBRACE);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(PUBLIC);
                 n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(STATIC);
                  n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(VOID);
                n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(MAIN);
                n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(LPAREN);
             n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(STRING);
                  n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(LSQPAREN);
             n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(RSQPAREN);
             n21 = JTBToolkit.makeNodeToken(n22);
    n23 = Identifier();
    n25 = jj_consume_token(RPAREN);
             n24 = JTBToolkit.makeNodeToken(n25);
    n27 = jj_consume_token(LBRACE);
             n26 = JTBToolkit.makeNodeToken(n27);
    n28 = Statement();
    n30 = jj_consume_token(RBRACE);
             n29 = JTBToolkit.makeNodeToken(n30);
    n32 = jj_consume_token(RBRACE);
             n31 = JTBToolkit.makeNodeToken(n32);
     {if (true) return new MainClass(n0,n2,n4,n5,n7,n9,n11,n13,n15,n17,n19,n21,n23,n24,n26,n28,n29,n31);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclaration ClassDeclaration() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Public n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   ClassMember n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      n1 = Public();
        n0.addNode(n1);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    n3 = jj_consume_token(CLASS);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(LBRACE);
            n5 = JTBToolkit.makeNodeToken(n6);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      n8 = ClassMember();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    n10 = jj_consume_token(RBRACE);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ClassDeclaration(n0,n2,n4,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public ValueDeclaration ValueDeclaration() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Public n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   ValueMember n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      n1 = Public();
        n0.addNode(n1);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    n3 = jj_consume_token(VALUE);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(LBRACE);
            n5 = JTBToolkit.makeNodeToken(n6);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      n8 = ValueMember();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    n10 = jj_consume_token(RBRACE);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ValueDeclaration(n0,n2,n4,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassMember ClassMember() throws ParseException {
   NodeChoice n0;
   ConstructorDeclaration n1;
   MethodDeclaration n2;
   ConstantDeclaration n3;
   InitializableConstantDeclaration n4;
   UpdatableFieldDeclaration n5;
    if (jj_2_3(2147483647)) {
      n1 = ConstructorDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_4(2147483647)) {
      n2 = MethodDeclaration();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_5(2)) {
      n3 = ConstantDeclaration();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_6(2)) {
      n4 = InitializableConstantDeclaration();
        n0 = new NodeChoice(n4, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
        n5 = UpdatableFieldDeclaration();
        n0 = new NodeChoice(n5, 4);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ClassMember(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ValueMember ValueMember() throws ParseException {
   NodeChoice n0;
   ConstructorDeclaration n1;
   MethodDeclaration n2;
   ConstantDeclaration n3;
   InitializableConstantDeclaration n4;
    if (jj_2_7(2147483647)) {
      n1 = ConstructorDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_8(2147483647)) {
      n2 = MethodDeclaration();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_9(2)) {
      n3 = ConstantDeclaration();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_10(2)) {
      n4 = InitializableConstantDeclaration();
        n0 = new NodeChoice(n4, 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ValueMember(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstructorDeclaration ConstructorDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   FormalParameterList n6;
   NodeToken n7;
   Token n8;
   Block n9;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case BOOLEAN:
    case INTEGER:
    case STRING:
    case DOUBLE:
    case LONG:
    case SHORT:
    case BYTE:
    case REGION:
    case DIST:
    case PLACE:
    case POINT:
    case IDENTIFIER:
      n6 = FormalParameterList();
        n5.addNode(n6);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Block();
     {if (true) return new ConstructorDeclaration(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public Visibility Visibility() throws ParseException {
   NodeChoice n0;
   Public n1;
   Private n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      n1 = Public();
        n0 = new NodeChoice(n1, 0);
      break;
    case PRIVATE:
      n2 = Private();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Visibility(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantDeclaration ConstantDeclaration() throws ParseException {
   Visibility n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   Type n5;
   Identifier n6;
   NodeToken n7;
   Token n8;
   Expression n9;
   NodeToken n10;
   Token n11;
    n0 = Visibility();
    n2 = jj_consume_token(STATIC);
                 n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(FINAL);
                n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Type();
    n6 = Identifier();
    n8 = jj_consume_token(ASSIGN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Expression();
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new ConstantDeclaration(n0,n1,n3,n5,n6,n7,n9,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public InitializableConstantDeclaration InitializableConstantDeclaration() throws ParseException {
   Visibility n0;
   NodeToken n1;
   Token n2;
   Type n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
    n0 = Visibility();
    n2 = jj_consume_token(FINAL);
                n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Type();
    n4 = Identifier();
    n6 = jj_consume_token(SEMICOLON);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new InitializableConstantDeclaration(n0,n1,n3,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableFieldDeclaration UpdatableFieldDeclaration() throws ParseException {
   Visibility n0;
   Type n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
    n0 = Visibility();
    n1 = Type();
    n2 = Identifier();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new UpdatableFieldDeclaration(n0,n1,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public PublicStatic PublicStatic() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STATIC);
                 n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new PublicStatic(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Public Public() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Public(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Private Private() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(PRIVATE);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Private(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclaration MethodDeclaration() throws ParseException {
   MethodModifier n0;
   ReturnType n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   FormalParameterList n6;
   NodeToken n7;
   Token n8;
   Block n9;
    n0 = MethodModifier();
    n1 = ReturnType();
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case BOOLEAN:
    case INTEGER:
    case STRING:
    case DOUBLE:
    case LONG:
    case SHORT:
    case BYTE:
    case REGION:
    case DIST:
    case PLACE:
    case POINT:
    case IDENTIFIER:
      n6 = FormalParameterList();
        n5.addNode(n6);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Block();
     {if (true) return new MethodDeclaration(n0,n1,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodModifier MethodModifier() throws ParseException {
   NodeChoice n0;
   PublicStatic n1;
   Public n2;
   Private n3;
    if (jj_2_11(2147483647)) {
      n1 = PublicStatic();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        n2 = Public();
        n0 = new NodeChoice(n2, 1);
        break;
      case PRIVATE:
        n3 = Private();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new MethodModifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterList FormalParameterList() throws ParseException {
   FormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalParameterRest n2;
    n0 = FormalParameter();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 123:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      n2 = FormalParameterRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new FormalParameterList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameter FormalParameter() throws ParseException {
   FinalFormalParameter n0;
    n0 = FinalFormalParameter();
     {if (true) return new FormalParameter(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FinalFormalParameter FinalFormalParameter() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   Type n3;
   Identifier n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n2 = jj_consume_token(FINAL);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    n3 = Type();
    n4 = Identifier();
     {if (true) return new FinalFormalParameter(n0,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterRest FormalParameterRest() throws ParseException {
   NodeToken n0;
   Token n1;
   FormalParameter n2;
    n1 = jj_consume_token(123);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FormalParameter();
     {if (true) return new FormalParameterRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnType ReturnType() throws ParseException {
   NodeChoice n0;
   VoidType n1;
   Type n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      n1 = VoidType();
        n0 = new NodeChoice(n1, 0);
      break;
    case BOOLEAN:
    case INTEGER:
    case STRING:
    case DOUBLE:
    case LONG:
    case SHORT:
    case BYTE:
    case REGION:
    case DIST:
    case PLACE:
    case POINT:
    case IDENTIFIER:
      n2 = Type();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ReturnType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public VoidType VoidType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(VOID);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new VoidType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
   NodeChoice n0;
   UpdatableArrayType n1;
   ValueArrayType n2;
   NonArrayType n3;
    if (jj_2_12(2147483647)) {
      n1 = UpdatableArrayType();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_13(2147483647)) {
      n2 = ValueArrayType();
        n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case STRING:
      case DOUBLE:
      case LONG:
      case SHORT:
      case BYTE:
      case REGION:
      case DIST:
      case PLACE:
      case POINT:
      case IDENTIFIER:
        n3 = NonArrayType();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableArrayType UpdatableArrayType() throws ParseException {
   NonArrayType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   RankEquation n5;
   NodeOptional n6 = new NodeOptional();
   DistributionEquation n7;
   NodeToken n8;
   Token n9;
    n0 = NonArrayType();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(124);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = RankEquation();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      n7 = DistributionEquation();
        n6.addNode(n7);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RSQPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new UpdatableArrayType(n0,n1,n3,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public ValueArrayType ValueArrayType() throws ParseException {
   NonArrayType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   RankEquation n7;
   NodeToken n8;
   Token n9;
    n0 = NonArrayType();
    n2 = jj_consume_token(VALUE);
                n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(LSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(124);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = RankEquation();
    n9 = jj_consume_token(RSQPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new ValueArrayType(n0,n1,n3,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public RankEquation RankEquation() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   IntegerLiteral n4;
    n1 = jj_consume_token(RANK);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(125);
             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = IntegerLiteral();
     {if (true) return new RankEquation(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public DistributionEquation DistributionEquation() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
    n1 = jj_consume_token(AND);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DISTRIBUTION);
                       n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(125);
             n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
     {if (true) return new DistributionEquation(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public NonArrayType NonArrayType() throws ParseException {
   NodeChoice n0;
   BooleanType n1;
   ByteType n2;
   ShortType n3;
   IntegerType n4;
   LongType n5;
   DoubleType n6;
   StringType n7;
   PlaceType n8;
   DistType n9;
   RegionType n10;
   PointType n11;
   ClassNameType n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      n1 = BooleanType();
        n0 = new NodeChoice(n1, 0);
      break;
    case BYTE:
      n2 = ByteType();
        n0 = new NodeChoice(n2, 1);
      break;
    case SHORT:
      n3 = ShortType();
        n0 = new NodeChoice(n3, 2);
      break;
    case INTEGER:
      n4 = IntegerType();
        n0 = new NodeChoice(n4, 3);
      break;
    case LONG:
      n5 = LongType();
        n0 = new NodeChoice(n5, 4);
      break;
    case DOUBLE:
      n6 = DoubleType();
        n0 = new NodeChoice(n6, 5);
      break;
    case STRING:
      n7 = StringType();
        n0 = new NodeChoice(n7, 6);
      break;
    case PLACE:
      n8 = PlaceType();
        n0 = new NodeChoice(n8, 7);
      break;
    case DIST:
      n9 = DistType();
        n0 = new NodeChoice(n9, 8);
      break;
    case REGION:
      n10 = RegionType();
        n0 = new NodeChoice(n10, 9);
      break;
    case POINT:
      n11 = PointType();
        n0 = new NodeChoice(n11, 10);
      break;
    case IDENTIFIER:
      n12 = ClassNameType();
        n0 = new NodeChoice(n12, 11);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NonArrayType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanType BooleanType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(BOOLEAN);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ByteType ByteType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(BYTE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ByteType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ShortType ShortType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(SHORT);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShortType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerType IntegerType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LongType LongType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(LONG);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new LongType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DoubleType DoubleType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(DOUBLE);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DoubleType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringType StringType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlaceType PlaceType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(PLACE);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PlaceType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DistType DistType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(DIST);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(124);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = RankEquation();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DistType(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public RegionType RegionType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(REGION);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(124);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = RankEquation();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new RegionType(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public PointType PointType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(POINT);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(124);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = RankEquation();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PointType(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassNameType ClassNameType() throws ParseException {
   Identifier n0;
    n0 = Identifier();
     {if (true) return new ClassNameType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   Assignment n1;
   AsyncStatement n2;
   Block n3;
   BreakStatement n4;
   ContinueStatement n5;
   DoStatement n6;
   FinishStatement n7;
   IfStatement n8;
   LoopStatement n9;
   PostfixStatement n10;
   PrintlnStatement n11;
   PrintStatement n12;
   PrintErrorStatement n13;
   ReturnStatement n14;
   SwitchStatement n15;
   ThrowStatement n16;
   WhileStatement n17;
    if (jj_2_14(2147483647)) {
      n1 = Assignment();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASYNC:
        n2 = AsyncStatement();
        n0 = new NodeChoice(n2, 1);
        break;
      case LBRACE:
        n3 = Block();
        n0 = new NodeChoice(n3, 2);
        break;
      case BREAK:
        n4 = BreakStatement();
        n0 = new NodeChoice(n4, 3);
        break;
      case CONTINUE:
        n5 = ContinueStatement();
        n0 = new NodeChoice(n5, 4);
        break;
      case DO:
        n6 = DoStatement();
        n0 = new NodeChoice(n6, 5);
        break;
      case FINISH:
        n7 = FinishStatement();
        n0 = new NodeChoice(n7, 6);
        break;
      case IF:
        n8 = IfStatement();
        n0 = new NodeChoice(n8, 7);
        break;
      case ATEACH:
      case FOREACH:
      case FOR:
        n9 = LoopStatement();
        n0 = new NodeChoice(n9, 8);
        break;
      case LPAREN:
      case FALSE:
      case TRUE:
      case NEW:
      case THIS:
      case CURRENTTIME:
      case FACTORYBlock:
      case FACTORYEMPTYREGION:
      case PLACES:
      case MATH:
      case HERE:
      case DISTUNIQUE:
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 141:
      case 142:
      case 143:
      case 144:
        n10 = PostfixStatement();
        n0 = new NodeChoice(n10, 9);
        break;
      case PRINTLN:
        n11 = PrintlnStatement();
        n0 = new NodeChoice(n11, 10);
        break;
      case PRINT:
        n12 = PrintStatement();
        n0 = new NodeChoice(n12, 11);
        break;
      case PRINTERROR:
        n13 = PrintErrorStatement();
        n0 = new NodeChoice(n13, 12);
        break;
      case RETURN:
        n14 = ReturnStatement();
        n0 = new NodeChoice(n14, 13);
        break;
      case SWITCH:
        n15 = SwitchStatement();
        n0 = new NodeChoice(n15, 14);
        break;
      case THROW:
        n16 = ThrowStatement();
        n0 = new NodeChoice(n16, 15);
        break;
      case WHILE:
        n17 = WhileStatement();
        n0 = new NodeChoice(n17, 16);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Assignment Assignment() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Assignment(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public AsyncStatement AsyncStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Block n7;
    n1 = jj_consume_token(ASYNC);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Block();
     {if (true) return new AsyncStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   BlockStatement n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case FINAL:
      case IF:
      case FALSE:
      case TRUE:
      case WHILE:
      case BOOLEAN:
      case INTEGER:
      case NEW:
      case RETURN:
      case STRING:
      case THIS:
      case PRINTLN:
      case PRINT:
      case PRINTERROR:
      case CURRENTTIME:
      case FACTORYBlock:
      case FACTORYEMPTYREGION:
      case BREAK:
      case THROW:
      case DOUBLE:
      case LONG:
      case SHORT:
      case BYTE:
      case REGION:
      case PLACES:
      case DIST:
      case SWITCH:
      case ATEACH:
      case FINISH:
      case MATH:
      case PLACE:
      case FOREACH:
      case POINT:
      case CONTINUE:
      case DO:
      case FOR:
      case HERE:
      case DISTUNIQUE:
      case ASYNC:
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 141:
      case 142:
      case 143:
      case 144:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      n3 = BlockStatement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Block(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStatement BlockStatement() throws ParseException {
   NodeChoice n0;
   FinalVariableDeclaration n1;
   UpdatableVariableDeclaration n2;
   Statement n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n1 = FinalVariableDeclaration();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[19] = jj_gen;
      if (jj_2_15(2147483647)) {
        n2 = UpdatableVariableDeclaration();
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case IF:
        case FALSE:
        case TRUE:
        case WHILE:
        case NEW:
        case RETURN:
        case THIS:
        case PRINTLN:
        case PRINT:
        case PRINTERROR:
        case CURRENTTIME:
        case FACTORYBlock:
        case FACTORYEMPTYREGION:
        case BREAK:
        case THROW:
        case PLACES:
        case SWITCH:
        case ATEACH:
        case FINISH:
        case MATH:
        case FOREACH:
        case CONTINUE:
        case DO:
        case FOR:
        case HERE:
        case DISTUNIQUE:
        case ASYNC:
        case INTEGER_LITERAL:
        case HEX_LITERAL:
        case LONG_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 141:
        case 142:
        case 143:
        case 144:
          n3 = Statement();
        n0 = new NodeChoice(n3, 2);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new BlockStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FinalVariableDeclaration FinalVariableDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(FINAL);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(ASSIGN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new FinalVariableDeclaration(n0,n2,n3,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableVariableDeclaration UpdatableVariableDeclaration() throws ParseException {
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
    n0 = Type();
    n1 = Identifier();
    n3 = jj_consume_token(ASSIGN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(SEMICOLON);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new UpdatableVariableDeclaration(n0,n1,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public BreakStatement BreakStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(BREAK);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new BreakStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ContinueStatement ContinueStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(CONTINUE);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ContinueStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DoStatement DoStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(DO);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
    n4 = jj_consume_token(WHILE);
                n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new DoStatement(n0,n2,n3,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public FinishStatement FinishStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
    n1 = jj_consume_token(FINISH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
     {if (true) return new FinishStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   ElseClause n9;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      n9 = ElseClause();
        n8.addNode(n9);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
     {if (true) return new IfStatement(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public ElseClause ElseClause() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
    n1 = jj_consume_token(ELSE);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
     {if (true) return new ElseClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public LoopStatement LoopStatement() throws ParseException {
   LoopQualifier n0;
   NodeToken n1;
   Token n2;
   PointType n3;
   ExplodedSpecification n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   Statement n10;
    n0 = LoopQualifier();
    n2 = jj_consume_token(LPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PointType();
    n4 = ExplodedSpecification();
    n6 = jj_consume_token(124);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Statement();
     {if (true) return new LoopStatement(n0,n1,n3,n4,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public LoopQualifier LoopQualifier() throws ParseException {
   NodeChoice n0;
   Ateach n1;
   For n2;
   Foreach n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATEACH:
      n1 = Ateach();
        n0 = new NodeChoice(n1, 0);
      break;
    case FOR:
      n2 = For();
        n0 = new NodeChoice(n2, 1);
      break;
    case FOREACH:
      n3 = Foreach();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LoopQualifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Ateach Ateach() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(ATEACH);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Ateach(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public For For() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new For(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Foreach Foreach() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FOREACH);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Foreach(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExplodedSpecification ExplodedSpecification() throws ParseException {
   NodeChoice n0;
   PointNameCoordinates n1;
   PointName n2;
   Coordinates n3;
    if (jj_2_16(2147483647)) {
      n1 = PointNameCoordinates();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n2 = PointName();
        n0 = new NodeChoice(n2, 1);
        break;
      case LSQPAREN:
        n3 = Coordinates();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ExplodedSpecification(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PointNameCoordinates PointNameCoordinates() throws ParseException {
   PointName n0;
   Coordinates n1;
    n0 = PointName();
    n1 = Coordinates();
     {if (true) return new PointNameCoordinates(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PointName PointName() throws ParseException {
   Identifier n0;
    n0 = Identifier();
     {if (true) return new PointName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Coordinates Coordinates() throws ParseException {
   NodeToken n0;
   Token n1;
   IdentifierList n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LSQPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = IdentifierList();
    n4 = jj_consume_token(RSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Coordinates(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierList IdentifierList() throws ParseException {
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   IdentifierRest n2;
    n0 = Identifier();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 123:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_6;
      }
      n2 = IdentifierRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new IdentifierList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierRest IdentifierRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(123);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new IdentifierRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixStatement PostfixStatement() throws ParseException {
   PostfixExpression n0;
   NodeToken n1;
   Token n2;
    n0 = PostfixExpression();
    n2 = jj_consume_token(SEMICOLON);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new PostfixStatement(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintlnStatement PrintlnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(PRINTLN);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PrintlnStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintStatement PrintStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(PRINT);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PrintStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintErrorStatement PrintErrorStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(PRINTERROR);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PrintErrorStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStatement ReturnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LSQPAREN:
    case PLUS:
    case MINUS:
    case NOT:
    case FALSE:
    case TRUE:
    case NEW:
    case THIS:
    case CURRENTTIME:
    case FACTORYBlock:
    case FACTORYEMPTYREGION:
    case PLACES:
    case MATH:
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case HEX_LITERAL:
    case LONG_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
      n3 = Expression();
        n2.addNode(n3);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ReturnStatement(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchStatement SwitchStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   SwitchEntry n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(SWITCH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LBRACE);
            n7 = JTBToolkit.makeNodeToken(n8);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULT_TOKEN:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      n10 = SwitchEntry();
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    n12 = jj_consume_token(RBRACE);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new SwitchStatement(n0,n2,n4,n5,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchEntry SwitchEntry() throws ParseException {
   SwitchLabel n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   BlockStatement n4;
    n0 = SwitchLabel();
    n2 = jj_consume_token(124);
            n1 = JTBToolkit.makeNodeToken(n2);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case FINAL:
      case IF:
      case FALSE:
      case TRUE:
      case WHILE:
      case BOOLEAN:
      case INTEGER:
      case NEW:
      case RETURN:
      case STRING:
      case THIS:
      case PRINTLN:
      case PRINT:
      case PRINTERROR:
      case CURRENTTIME:
      case FACTORYBlock:
      case FACTORYEMPTYREGION:
      case BREAK:
      case THROW:
      case DOUBLE:
      case LONG:
      case SHORT:
      case BYTE:
      case REGION:
      case PLACES:
      case DIST:
      case SWITCH:
      case ATEACH:
      case FINISH:
      case MATH:
      case PLACE:
      case FOREACH:
      case POINT:
      case CONTINUE:
      case DO:
      case FOR:
      case HERE:
      case DISTUNIQUE:
      case ASYNC:
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 141:
      case 142:
      case 143:
      case 144:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      n4 = BlockStatement();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new SwitchEntry(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchLabel SwitchLabel() throws ParseException {
   NodeChoice n0;
   Case n1;
   Default n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      n1 = Case();
        n0 = new NodeChoice(n1, 0);
      break;
    case DEFAULT_TOKEN:
      n2 = Default();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SwitchLabel(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Case Case() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
    n1 = jj_consume_token(CASE);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
     {if (true) return new Case(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Default Default() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(DEFAULT_TOKEN);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Default(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ThrowStatement ThrowStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(THROW);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(NEW);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RUNTIMEEXCEPTION);
                           n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(SEMICOLON);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new ThrowStatement(n0,n2,n4,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new WhileStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   ConditionalExpression n0;
    n0 = ConditionalExpression();
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalExpression ConditionalExpression() throws ParseException {
   ConditionalOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   ConditionalExpressionRest n2;
    n0 = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
      n2 = ConditionalExpressionRest();
        n1.addNode(n2);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
     {if (true) return new ConditionalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalExpressionRest ConditionalExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   Expression n5;
    n1 = jj_consume_token(QUESTION);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(124);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Expression();
     {if (true) return new ConditionalExpressionRest(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalOrExpression ConditionalOrExpression() throws ParseException {
   ConditionalAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ConditionalOrExpressionRest n2;
    n0 = ConditionalAndExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_9;
      }
      n2 = ConditionalOrExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ConditionalOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalOrExpressionRest ConditionalOrExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   ConditionalAndExpression n2;
    n1 = jj_consume_token(126);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ConditionalAndExpression();
     {if (true) return new ConditionalOrExpressionRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalAndExpression ConditionalAndExpression() throws ParseException {
   InclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ConditionalAndExpressionRest n2;
    n0 = InclusiveOrExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      n2 = ConditionalAndExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ConditionalAndExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalAndExpressionRest ConditionalAndExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   InclusiveOrExpression n2;
    n1 = jj_consume_token(AND);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = InclusiveOrExpression();
     {if (true) return new ConditionalAndExpressionRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public InclusiveOrExpression InclusiveOrExpression() throws ParseException {
   ExclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   InclusiveOrExpressionRest n2;
    n0 = ExclusiveOrExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 127:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      n2 = InclusiveOrExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new InclusiveOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public InclusiveOrExpressionRest InclusiveOrExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   ExclusiveOrExpression n2;
    n1 = jj_consume_token(127);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ExclusiveOrExpression();
     {if (true) return new InclusiveOrExpressionRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ExclusiveOrExpression ExclusiveOrExpression() throws ParseException {
   AndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ExclusiveOrExpressionRest n2;
    n0 = AndExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 128:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
      n2 = ExclusiveOrExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExclusiveOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExclusiveOrExpressionRest ExclusiveOrExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   AndExpression n2;
    n1 = jj_consume_token(128);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AndExpression();
     {if (true) return new ExclusiveOrExpressionRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public AndExpression AndExpression() throws ParseException {
   EqualityExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   AndExpressionRest n2;
    n0 = EqualityExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 129:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_13;
      }
      n2 = AndExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new AndExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AndExpressionRest AndExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   EqualityExpression n2;
    n1 = jj_consume_token(129);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EqualityExpression();
     {if (true) return new AndExpressionRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualityExpression EqualityExpression() throws ParseException {
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   EqualityExpressionRest n2;
    n0 = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 125:
    case 130:
      n2 = EqualityExpressionRest();
        n1.addNode(n2);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
     {if (true) return new EqualityExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualityExpressionRest EqualityExpressionRest() throws ParseException {
   NodeChoice n0;
   EqualsExpression n1;
   NonEqualsExpression n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 125:
      n1 = EqualsExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    case 130:
      n2 = NonEqualsExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new EqualityExpressionRest(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualsExpression EqualsExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   RelationalExpression n2;
    n1 = jj_consume_token(125);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RelationalExpression();
     {if (true) return new EqualsExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public NonEqualsExpression NonEqualsExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   RelationalExpression n2;
    n1 = jj_consume_token(130);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RelationalExpression();
     {if (true) return new NonEqualsExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression RelationalExpression() throws ParseException {
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   RelationalExpressionRest n2;
    n0 = ShiftExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case GT:
    case 131:
    case 132:
      n2 = RelationalExpressionRest();
        n1.addNode(n2);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
     {if (true) return new RelationalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpressionRest RelationalExpressionRest() throws ParseException {
   NodeChoice n0;
   LessThanExpression n1;
   GreaterThanExpression n2;
   LessThanEqualExpression n3;
   GreaterThanEqualExpression n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n1 = LessThanExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    case GT:
      n2 = GreaterThanExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    case 131:
      n3 = LessThanEqualExpression();
        n0 = new NodeChoice(n3, 2);
      break;
    case 132:
      n4 = GreaterThanEqualExpression();
        n0 = new NodeChoice(n4, 3);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RelationalExpressionRest(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LessThanExpression LessThanExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   ShiftExpression n2;
    n1 = jj_consume_token(LT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ShiftExpression();
     {if (true) return new LessThanExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public GreaterThanExpression GreaterThanExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   ShiftExpression n2;
    n1 = jj_consume_token(GT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ShiftExpression();
     {if (true) return new GreaterThanExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public LessThanEqualExpression LessThanEqualExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   ShiftExpression n2;
    n1 = jj_consume_token(131);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ShiftExpression();
     {if (true) return new LessThanEqualExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public GreaterThanEqualExpression GreaterThanEqualExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   ShiftExpression n2;
    n1 = jj_consume_token(132);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ShiftExpression();
     {if (true) return new GreaterThanEqualExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftExpression ShiftExpression() throws ParseException {
   AdditiveExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ShiftExpressionRest n2;
    n0 = AdditiveExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RUNSIGNEDSHIFT:
      case RSIGNEDSHIFT:
      case 133:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_14;
      }
      n2 = ShiftExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ShiftExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftExpressionRest ShiftExpressionRest() throws ParseException {
   NodeChoice n0;
   ShiftLeftExpression n1;
   ShiftRightExpression n2;
   ShiftRightUnsignedExpression n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 133:
      n1 = ShiftLeftExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    case RSIGNEDSHIFT:
      n2 = ShiftRightExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    case RUNSIGNEDSHIFT:
      n3 = ShiftRightUnsignedExpression();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ShiftExpressionRest(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftLeftExpression ShiftLeftExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;
    n1 = jj_consume_token(133);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AdditiveExpression();
     {if (true) return new ShiftLeftExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftRightExpression ShiftRightExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;
    n1 = jj_consume_token(RSIGNEDSHIFT);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AdditiveExpression();
     {if (true) return new ShiftRightExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftRightUnsignedExpression ShiftRightUnsignedExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;
    n1 = jj_consume_token(RUNSIGNEDSHIFT);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AdditiveExpression();
     {if (true) return new ShiftRightUnsignedExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public AdditiveExpression AdditiveExpression() throws ParseException {
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   AdditiveExpressionRest n2;
    n0 = MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_15;
      }
      n2 = AdditiveExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new AdditiveExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AdditiveExpressionRest AdditiveExpressionRest() throws ParseException {
   NodeChoice n0;
   PlusOffset n1;
   PlusExpression n2;
   MinusExpression n3;
    if (jj_2_17(2147483647)) {
      n1 = PlusOffset();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n2 = PlusExpression();
        n0 = new NodeChoice(n2, 1);
        break;
      case MINUS:
        n3 = MinusExpression();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new AdditiveExpressionRest(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlusOffset PlusOffset() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpressionList n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(PLUS);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ExpressionList();
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new PlusOffset(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public PlusExpression PlusExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;
    n1 = jj_consume_token(PLUS);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MultiplicativeExpression();
     {if (true) return new PlusExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MinusExpression MinusExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;
    n1 = jj_consume_token(MINUS);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MultiplicativeExpression();
     {if (true) return new MinusExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
   MapExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   MultiplicativeExpressionRest n2;
    n0 = MapExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_16;
      }
      n2 = MultiplicativeExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new MultiplicativeExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpressionRest MultiplicativeExpressionRest() throws ParseException {
   NodeChoice n0;
   TimesOffset n1;
   TimesExpression n2;
   DivideOffset n3;
   DivideExpression n4;
   ModulusExpression n5;
    if (jj_2_18(2147483647)) {
      n1 = TimesOffset();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 134:
        n2 = TimesExpression();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[44] = jj_gen;
        if (jj_2_19(2147483647)) {
          n3 = DivideOffset();
        n0 = new NodeChoice(n3, 2);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 135:
            n4 = DivideExpression();
        n0 = new NodeChoice(n4, 3);
            break;
          case 136:
            n5 = ModulusExpression();
        n0 = new NodeChoice(n5, 4);
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
     {if (true) return new MultiplicativeExpressionRest(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TimesOffset TimesOffset() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpressionList n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(134);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ExpressionList();
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new TimesOffset(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public TimesExpression TimesExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   MapExpression n2;
    n1 = jj_consume_token(134);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MapExpression();
     {if (true) return new TimesExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DivideOffset DivideOffset() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpressionList n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(135);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ExpressionList();
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new DivideOffset(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public DivideExpression DivideExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   MapExpression n2;
    n1 = jj_consume_token(135);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MapExpression();
     {if (true) return new DivideExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ModulusExpression ModulusExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   MapExpression n2;
    n1 = jj_consume_token(136);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MapExpression();
     {if (true) return new ModulusExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MapExpression MapExpression() throws ParseException {
   RegionExpression n0;
   NodeOptional n1 = new NodeOptional();
   MapExpressionRest n2;
    n0 = RegionExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 137:
      n2 = MapExpressionRest();
        n1.addNode(n2);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
     {if (true) return new MapExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public MapExpressionRest MapExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   UnaryExpression n2;
    n1 = jj_consume_token(137);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = UnaryExpression();
     {if (true) return new MapExpressionRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RegionExpression RegionExpression() throws ParseException {
   NodeChoice n0;
   RegionConstant n1;
   UnaryExpression n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQPAREN:
      n1 = RegionConstant();
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
    case PLUS:
    case MINUS:
    case NOT:
    case FALSE:
    case TRUE:
    case NEW:
    case THIS:
    case CURRENTTIME:
    case FACTORYBlock:
    case FACTORYEMPTYREGION:
    case PLACES:
    case MATH:
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case HEX_LITERAL:
    case LONG_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
      n2 = UnaryExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RegionExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RegionConstant RegionConstant() throws ParseException {
   NodeToken n0;
   Token n1;
   ColonExpression n2;
   NodeListOptional n3 = new NodeListOptional();
   ColonRest n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(LSQPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ColonExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 123:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_17;
      }
      n4 = ColonRest();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new RegionConstant(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ColonRest ColonRest() throws ParseException {
   NodeToken n0;
   Token n1;
   ColonExpression n2;
    n1 = jj_consume_token(123);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ColonExpression();
     {if (true) return new ColonRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ColonExpression ColonExpression() throws ParseException {
   NodeChoice n0;
   ColonPair n1;
   Expression n2;
    if (jj_2_20(2147483647)) {
      n1 = ColonPair();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LSQPAREN:
      case PLUS:
      case MINUS:
      case NOT:
      case FALSE:
      case TRUE:
      case NEW:
      case THIS:
      case CURRENTTIME:
      case FACTORYBlock:
      case FACTORYEMPTYREGION:
      case PLACES:
      case MATH:
      case HERE:
      case DISTUNIQUE:
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
        n2 = Expression();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ColonExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ColonPair ColonPair() throws ParseException {
   Expression n0;
   NodeToken n1;
   Token n2;
   Expression n3;
    n0 = Expression();
    n2 = jj_consume_token(124);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new ColonPair(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public MathExpression MathExpression() throws ParseException {
   NodeChoice n0;
   SinExpression n1;
   CosExpression n2;
   PowExpression n3;
   ExpExpression n4;
   SqrtExpression n5;
   AbsExpression n6;
   MinExpression n7;
   MaxExpression n8;
   LogExpression n9;
    if (jj_2_21(3)) {
      n1 = SinExpression();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_22(3)) {
      n2 = CosExpression();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_23(3)) {
      n3 = PowExpression();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_24(3)) {
      n4 = ExpExpression();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_25(3)) {
      n5 = SqrtExpression();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_26(3)) {
      n6 = AbsExpression();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_27(3)) {
      n7 = MinExpression();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_28(3)) {
      n8 = MaxExpression();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_29(3)) {
      n9 = LogExpression();
        n0 = new NodeChoice(n9, 8);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MathExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SinExpression SinExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(SIN);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new SinExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public CosExpression CosExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(COS);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new CosExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public PowExpression PowExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(POW);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(123);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Expression();
    n13 = jj_consume_token(RPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new PowExpression(n0,n2,n4,n6,n8,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpExpression ExpExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(EXP);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ExpExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public SqrtExpression SqrtExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(SQRT);
               n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new SqrtExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public AbsExpression AbsExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(ABS);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new AbsExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public MinExpression MinExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(MIN);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(123);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Expression();
    n13 = jj_consume_token(RPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new MinExpression(n0,n2,n4,n6,n8,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public MaxExpression MaxExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(MAX);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(123);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Expression();
    n13 = jj_consume_token(RPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new MaxExpression(n0,n2,n4,n6,n8,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public LogExpression LogExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LOG);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new LogExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression UnaryExpression() throws ParseException {
   NodeChoice n0;
   UnaryPlusExpression n1;
   UnaryMinusExpression n2;
   PreIncrementExpression n3;
   PreDecrementExpression n4;
   ComplimentExpression n5;
   NotExpression n6;
   CoercionToIntExpression n7;
   CoercionToDoubleExpression n8;
   CoercionToLongExpression n9;
   CoercionToShortExpression n10;
   CoercionToByteExpression n11;
   TypeAnnotatedExpression n12;
   PostfixExpression n13;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n1 = UnaryPlusExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    case MINUS:
      n2 = UnaryMinusExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    case 138:
      n3 = PreIncrementExpression();
        n0 = new NodeChoice(n3, 2);
      break;
    case 139:
      n4 = PreDecrementExpression();
        n0 = new NodeChoice(n4, 3);
      break;
    case 140:
      n5 = ComplimentExpression();
        n0 = new NodeChoice(n5, 4);
      break;
    case NOT:
      n6 = NotExpression();
        n0 = new NodeChoice(n6, 5);
      break;
    default:
      jj_la1[50] = jj_gen;
      if (jj_2_30(2147483647)) {
        n7 = CoercionToIntExpression();
        n0 = new NodeChoice(n7, 6);
      } else if (jj_2_31(2147483647)) {
        n8 = CoercionToDoubleExpression();
        n0 = new NodeChoice(n8, 7);
      } else if (jj_2_32(2147483647)) {
        n9 = CoercionToLongExpression();
        n0 = new NodeChoice(n9, 8);
      } else if (jj_2_33(2147483647)) {
        n10 = CoercionToShortExpression();
        n0 = new NodeChoice(n10, 9);
      } else if (jj_2_34(2147483647)) {
        n11 = CoercionToByteExpression();
        n0 = new NodeChoice(n11, 10);
      } else if (jj_2_35(2147483647)) {
        n12 = TypeAnnotatedExpression();
        n0 = new NodeChoice(n12, 11);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case FALSE:
        case TRUE:
        case NEW:
        case THIS:
        case CURRENTTIME:
        case FACTORYBlock:
        case FACTORYEMPTYREGION:
        case PLACES:
        case MATH:
        case HERE:
        case DISTUNIQUE:
        case INTEGER_LITERAL:
        case HEX_LITERAL:
        case LONG_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 141:
        case 142:
        case 143:
        case 144:
          n13 = PostfixExpression();
        n0 = new NodeChoice(n13, 12);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryPlusExpression UnaryPlusExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;
    n1 = jj_consume_token(PLUS);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new UnaryPlusExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryMinusExpression UnaryMinusExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;
    n1 = jj_consume_token(MINUS);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new UnaryMinusExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PreIncrementExpression PreIncrementExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;
    n1 = jj_consume_token(138);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new PreIncrementExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PreDecrementExpression PreDecrementExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;
    n1 = jj_consume_token(139);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new PreDecrementExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ComplimentExpression ComplimentExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   UnaryExpression n2;
    n1 = jj_consume_token(140);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = UnaryExpression();
     {if (true) return new ComplimentExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public NotExpression NotExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   UnaryExpression n2;
    n1 = jj_consume_token(NOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = UnaryExpression();
     {if (true) return new NotExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToIntExpression CoercionToIntExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INTEGER);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = UnaryExpression();
     {if (true) return new CoercionToIntExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToDoubleExpression CoercionToDoubleExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOUBLE);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = UnaryExpression();
     {if (true) return new CoercionToDoubleExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToLongExpression CoercionToLongExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LONG);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = UnaryExpression();
     {if (true) return new CoercionToLongExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToShortExpression CoercionToShortExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SHORT);
                n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = UnaryExpression();
     {if (true) return new CoercionToShortExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToByteExpression CoercionToByteExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(BYTE);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = UnaryExpression();
     {if (true) return new CoercionToByteExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeAnnotatedExpression TypeAnnotatedExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeAnnotation n2;
   NodeToken n3;
   Token n4;
   UnaryExpression n5;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeAnnotation();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = UnaryExpression();
     {if (true) return new TypeAnnotatedExpression(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeAnnotation TypeAnnotation() throws ParseException {
   NodeChoice n0;
   UpdatableArrayType n1;
   ValueArrayType n2;
   DistType n3;
   RegionType n4;
   PointType n5;
    if (jj_2_36(2147483647)) {
      n1 = UpdatableArrayType();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_37(2147483647)) {
      n2 = ValueArrayType();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_38(2147483647)) {
      n3 = DistType();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_39(2147483647)) {
      n4 = RegionType();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_40(2147483647)) {
      n5 = PointType();
        n0 = new NodeChoice(n5, 4);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeAnnotation(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression PostfixExpression() throws ParseException {
   NodeChoice n0;
   PostIncrementExpression n1;
   PostDecrementExpression n2;
   PrimaryExpression n3;
   Place n4;
   FactoryBlock n5;
   FactoryBlockCyclic n6;
   FactoryEmptyRegion n7;
   CurrentTime n8;
    if (jj_2_41(2147483647)) {
      n1 = PostIncrementExpression();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_42(2147483647)) {
      n2 = PostDecrementExpression();
        n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case FALSE:
      case TRUE:
      case NEW:
      case THIS:
      case MATH:
      case HERE:
      case DISTUNIQUE:
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 142:
      case 143:
      case 144:
        n3 = PrimaryExpression();
        n0 = new NodeChoice(n3, 2);
        break;
      case PLACES:
        n4 = Place();
        n0 = new NodeChoice(n4, 3);
        break;
      case FACTORYBlock:
        n5 = FactoryBlock();
        n0 = new NodeChoice(n5, 4);
        break;
      case 141:
        n6 = FactoryBlockCyclic();
        n0 = new NodeChoice(n6, 5);
        break;
      case FACTORYEMPTYREGION:
        n7 = FactoryEmptyRegion();
        n0 = new NodeChoice(n7, 6);
        break;
      case CURRENTTIME:
        n8 = CurrentTime();
        n0 = new NodeChoice(n8, 7);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new PostfixExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PostIncrementExpression PostIncrementExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(138);
             n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new PostIncrementExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PostDecrementExpression PostDecrementExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(139);
             n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new PostDecrementExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
   PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimarySuffix n2;
    n0 = PrimaryPrefix();
    label_18:
    while (true) {
      if (jj_2_43(2)) {
        ;
      } else {
        break label_18;
      }
      n2 = PrimarySuffix();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new PrimaryExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryPrefix PrimaryPrefix() throws ParseException {
   NodeChoice n0;
   Literal n1;
   MathExpression n2;
   This n3;
   ExpressionInParentheses n4;
   AllocationExpression n5;
   MethodCall n6;
   Identifier n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case HEX_LITERAL:
    case LONG_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case 142:
    case 143:
    case 144:
      n1 = Literal();
        n0 = new NodeChoice(n1, 0);
      break;
    case MATH:
      n2 = MathExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    case THIS:
      n3 = This();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[53] = jj_gen;
      if (jj_2_44(2147483647)) {
        n4 = ExpressionInParentheses();
        n0 = new NodeChoice(n4, 3);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          n5 = AllocationExpression();
        n0 = new NodeChoice(n5, 4);
          break;
        default:
          jj_la1[54] = jj_gen;
          if (jj_2_45(2147483647)) {
            n6 = MethodCall();
        n0 = new NodeChoice(n6, 5);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              n7 = Identifier();
        n0 = new NodeChoice(n7, 6);
              break;
            default:
              jj_la1[55] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
     {if (true) return new PrimaryPrefix(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public This This() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(THIS);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new This(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionInParentheses ExpressionInParentheses() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ExpressionInParentheses(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Place Place() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(PLACES);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Place(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public FactoryBlock FactoryBlock() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(FACTORYBlock);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new FactoryBlock(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public FactoryBlockCyclic FactoryBlockCyclic() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(141);
                                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(123);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new FactoryBlockCyclic(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public FactoryEmptyRegion FactoryEmptyRegion() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   IntegerLiteral n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(FACTORYEMPTYREGION);
                                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = IntegerLiteral();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new FactoryEmptyRegion(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public CurrentTime CurrentTime() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(CURRENTTIME);
                                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new CurrentTime(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimarySuffix PrimarySuffix() throws ParseException {
   NodeChoice n0;
   ArrayAccess n1;
   DotDistribution n2;
   DotRegion n3;
   DotId n4;
   DotGet n5;
   DotContainsPoint n6;
   DotContains n7;
   DotEquals n8;
   DotHigh n9;
   DotLow n10;
   DotRank n11;
   DotNext n12;
   DotPrev n13;
   DotIsFirst n14;
   DotIsLast n15;
   DotCoord n16;
   DotOrdinalPoint n17;
   DotOrdinal n18;
   DotMax n19;
   DotSum n20;
   DotSize n21;
   DotMethodCall n22;
   DotIdentifier n23;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQPAREN:
      n1 = ArrayAccess();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[56] = jj_gen;
      if (jj_2_46(2)) {
        n2 = DotDistribution();
        n0 = new NodeChoice(n2, 1);
      } else if (jj_2_47(2)) {
        n3 = DotRegion();
        n0 = new NodeChoice(n3, 2);
      } else if (jj_2_48(2)) {
        n4 = DotId();
        n0 = new NodeChoice(n4, 3);
      } else if (jj_2_49(3)) {
        n5 = DotGet();
        n0 = new NodeChoice(n5, 4);
      } else if (jj_2_50(4)) {
        n6 = DotContainsPoint();
        n0 = new NodeChoice(n6, 5);
      } else if (jj_2_51(3)) {
        n7 = DotContains();
        n0 = new NodeChoice(n7, 6);
      } else if (jj_2_52(3)) {
        n8 = DotEquals();
        n0 = new NodeChoice(n8, 7);
      } else if (jj_2_53(3)) {
        n9 = DotHigh();
        n0 = new NodeChoice(n9, 8);
      } else if (jj_2_54(3)) {
        n10 = DotLow();
        n0 = new NodeChoice(n10, 9);
      } else if (jj_2_55(3)) {
        n11 = DotRank();
        n0 = new NodeChoice(n11, 10);
      } else if (jj_2_56(2)) {
        n12 = DotNext();
        n0 = new NodeChoice(n12, 11);
      } else if (jj_2_57(2)) {
        n13 = DotPrev();
        n0 = new NodeChoice(n13, 12);
      } else if (jj_2_58(2)) {
        n14 = DotIsFirst();
        n0 = new NodeChoice(n14, 13);
      } else if (jj_2_59(2)) {
        n15 = DotIsLast();
        n0 = new NodeChoice(n15, 14);
      } else if (jj_2_60(2)) {
        n16 = DotCoord();
        n0 = new NodeChoice(n16, 15);
      } else if (jj_2_61(4)) {
        n17 = DotOrdinalPoint();
        n0 = new NodeChoice(n17, 16);
      } else if (jj_2_62(4)) {
        n18 = DotOrdinal();
        n0 = new NodeChoice(n18, 17);
      } else if (jj_2_63(2)) {
        n19 = DotMax();
        n0 = new NodeChoice(n19, 18);
      } else if (jj_2_64(2)) {
        n20 = DotSum();
        n0 = new NodeChoice(n20, 19);
      } else if (jj_2_65(2)) {
        n21 = DotSize();
        n0 = new NodeChoice(n21, 20);
      } else if (jj_2_66(2147483647)) {
        n22 = DotMethodCall();
        n0 = new NodeChoice(n22, 21);
      } else if (jj_2_67(2)) {
        n23 = DotIdentifier();
        n0 = new NodeChoice(n23, 22);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new PrimarySuffix(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAccess ArrayAccess() throws ParseException {
   NodeToken n0;
   Token n1;
   ExpressionList n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LSQPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ExpressionList();
    n4 = jj_consume_token(RSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ArrayAccess(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DotMethodCall DotMethodCall() throws ParseException {
   NodeToken n0;
   Token n1;
   MethodCall n2;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MethodCall();
     {if (true) return new DotMethodCall(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodCall MethodCall() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   ExpressionList n4;
   NodeToken n5;
   Token n6;
    n0 = Identifier();
    n2 = jj_consume_token(LPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LSQPAREN:
    case PLUS:
    case MINUS:
    case NOT:
    case FALSE:
    case TRUE:
    case NEW:
    case THIS:
    case CURRENTTIME:
    case FACTORYBlock:
    case FACTORYEMPTYREGION:
    case PLACES:
    case MATH:
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case HEX_LITERAL:
    case LONG_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
      n4 = ExpressionList();
        n3.addNode(n4);
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new MethodCall(n0,n1,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public DotDistribution DotDistribution() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DISTRIBUTION);
                       n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new DotDistribution(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DotRegion DotRegion() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(REGION);
                 n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new DotRegion(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DotId DotId() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ID);
             n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new DotId(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DotGet DotGet() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   ExpressionList n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(GET);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = ExpressionList();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotGet(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotContainsPoint DotContainsPoint() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ExpressionList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(CONTAINS);
                   n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LSQPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = ExpressionList();
    n10 = jj_consume_token(RSQPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(RPAREN);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new DotContainsPoint(n0,n2,n4,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public DotContains DotContains() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(CONTAINS);
                   n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotContains(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotEquals DotEquals() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(EQUALS);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotEquals(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotHigh DotHigh() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(HIGH);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotHigh(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotLow DotLow() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LOW);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotLow(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotRank DotRank() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(RANK);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotRank(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotNext DotNext() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(NEXT);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotNext(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotPrev DotPrev() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PREV);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotPrev(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIsFirst DotIsFirst() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ISFIRST);
                  n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotIsFirst(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIsLast DotIsLast() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ISLAST);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotIsLast(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotCoord DotCoord() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   IntegerLiteral n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COORD);
                n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(LSQPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = IntegerLiteral();
    n13 = jj_consume_token(RSQPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new DotCoord(n0,n2,n4,n6,n7,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public DotOrdinalPoint DotOrdinalPoint() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ExpressionList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ORDINAL);
                  n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LSQPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = ExpressionList();
    n10 = jj_consume_token(RSQPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(RPAREN);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new DotOrdinalPoint(n0,n2,n4,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public DotOrdinal DotOrdinal() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ORDINAL);
                  n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotOrdinal(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotMax DotMax() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(MAX);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotMax(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotSum DotSum() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SUM);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotSum(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotSize DotSize() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SIZE);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new DotSize(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIdentifier DotIdentifier() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new DotIdentifier(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public AllocationExpression AllocationExpression() throws ParseException {
   NodeChoice n0;
   NewObject n1;
   NewValueArray n2;
   NewUpdatableArray n3;
    if (jj_2_68(3)) {
      n1 = NewObject();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_69(2147483647)) {
      n2 = NewValueArray();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_70(2147483647)) {
      n3 = NewUpdatableArray();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AllocationExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public NewObject NewObject() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   ExpressionList n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LSQPAREN:
    case PLUS:
    case MINUS:
    case NOT:
    case FALSE:
    case TRUE:
    case NEW:
    case THIS:
    case CURRENTTIME:
    case FACTORYBlock:
    case FACTORYEMPTYREGION:
    case PLACES:
    case MATH:
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case HEX_LITERAL:
    case LONG_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
      n6 = ExpressionList();
        n5.addNode(n6);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new NewObject(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public NewValueArray NewValueArray() throws ParseException {
   NodeToken n0;
   Token n1;
   NonArrayType n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   ArrayInitializer n10;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = NonArrayType();
    n4 = jj_consume_token(VALUE);
                n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Identifier();
    n9 = jj_consume_token(RSQPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = ArrayInitializer();
     {if (true) return new NewValueArray(n0,n2,n3,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public NewUpdatableArray NewUpdatableArray() throws ParseException {
   NodeToken n0;
   Token n1;
   NonArrayType n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   ArrayInitializer n9;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = NonArrayType();
    n4 = jj_consume_token(LSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    n7 = jj_consume_token(RSQPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    if (jj_2_71(2147483647)) {
      n9 = ArrayInitializer();
        n8.addNode(n9);
    } else {
      ;
    }
     {if (true) return new NewUpdatableArray(n0,n2,n3,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Literal Literal() throws ParseException {
   NodeChoice n0;
   IntegerLiteral n1;
   LongLiteral n2;
   HexLiteral n3;
   FloatingPointLiteral n4;
   StringLiteral n5;
   True n6;
   False n7;
   HereLiteral n8;
   PlaceFirstPlace n9;
   PlaceMaxPlaces n10;
   DistUnique n11;
   JavaIntegerSize n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n1 = IntegerLiteral();
        n0 = new NodeChoice(n1, 0);
      break;
    case LONG_LITERAL:
      n2 = LongLiteral();
        n0 = new NodeChoice(n2, 1);
      break;
    case HEX_LITERAL:
      n3 = HexLiteral();
        n0 = new NodeChoice(n3, 2);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = FloatingPointLiteral();
        n0 = new NodeChoice(n4, 3);
      break;
    case STRING_LITERAL:
      n5 = StringLiteral();
        n0 = new NodeChoice(n5, 4);
      break;
    case TRUE:
      n6 = True();
        n0 = new NodeChoice(n6, 5);
      break;
    case FALSE:
      n7 = False();
        n0 = new NodeChoice(n7, 6);
      break;
    case HERE:
      n8 = HereLiteral();
        n0 = new NodeChoice(n8, 7);
      break;
    case 142:
      n9 = PlaceFirstPlace();
        n0 = new NodeChoice(n9, 8);
      break;
    case 143:
      n10 = PlaceMaxPlaces();
        n0 = new NodeChoice(n10, 9);
      break;
    case DISTUNIQUE:
      n11 = DistUnique();
        n0 = new NodeChoice(n11, 10);
      break;
    case 144:
      n12 = JavaIntegerSize();
        n0 = new NodeChoice(n12, 11);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Literal(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LongLiteral LongLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(LONG_LITERAL);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new LongLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public HexLiteral HexLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(HEX_LITERAL);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new HexLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatingPointLiteral FloatingPointLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FLOATING_POINT_LITERAL);
                                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatingPointLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringLiteral StringLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public True True() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(TRUE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new True(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public False False() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FALSE);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new False(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public HereLiteral HereLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(HERE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new HereLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlaceFirstPlace PlaceFirstPlace() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(142);
                            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PlaceFirstPlace(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlaceMaxPlaces PlaceMaxPlaces() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(143);
                           n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PlaceMaxPlaces(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DistUnique DistUnique() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(DISTUNIQUE);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DistUnique(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public JavaIntegerSize JavaIntegerSize() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(144);
                                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new JavaIntegerSize(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionList ExpressionList() throws ParseException {
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   ArgumentRest n2;
    n0 = Expression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 123:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_19;
      }
      n2 = ArgumentRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgumentRest ArgumentRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
    n1 = jj_consume_token(123);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
     {if (true) return new ArgumentRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayInitializer ArrayInitializer() throws ParseException {
   NodeToken n0;
   Token n1;
   PointType n2;
   ExplodedSpecification n3;
   NodeToken n4;
   Token n5;
   Block n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PointType();
    n3 = ExplodedSpecification();
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Block();
     {if (true) return new ArrayInitializer(n0,n2,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_3_12() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_234() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_327() {
    if (jj_scan_token(131)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_303() {
    if (jj_scan_token(ATEACH)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_233() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_326() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(123)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_296() {
    if (jj_3R_305()) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_295() {
    if (jj_3R_304()) return true;
    return false;
  }

  static private boolean jj_3R_294() {
    if (jj_3R_303()) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_232() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_148()) return true;
    return false;
  }

  static private boolean jj_3R_325() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_231() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_120()) return true;
    return false;
  }

  static private boolean jj_3R_314() {
    if (jj_3R_328()) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  static private boolean jj_3R_313() {
    if (jj_3R_327()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(123)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_312() {
    if (jj_3R_326()) return true;
    return false;
  }

  static private boolean jj_3R_274() {
    if (jj_3R_287()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  static private boolean jj_3R_230() {
    if (jj_scan_token(HEX_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_311() {
    if (jj_3R_325()) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_300() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) {
    jj_scanpos = xsp;
    if (jj_3R_314()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_229() {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_291() {
    if (jj_3R_300()) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_293() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  static private boolean jj_3R_283() {
    if (jj_3R_290()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_291()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_286() {
    if (jj_3R_293()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_214() {
    if (jj_3R_239()) return true;
    return false;
  }

  static private boolean jj_3R_316() {
    if (jj_scan_token(130)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  static private boolean jj_3R_213() {
    if (jj_3R_238()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_212() {
    if (jj_3R_237()) return true;
    return false;
  }

  static private boolean jj_3R_273() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_228()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_211() {
    if (jj_3R_236()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_210() {
    if (jj_3R_235()) return true;
    return false;
  }

  static private boolean jj_3R_209() {
    if (jj_3R_234()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_315() {
    if (jj_scan_token(125)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  static private boolean jj_3R_208() {
    if (jj_3R_233()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_207() {
    if (jj_3R_232()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_147()) return true;
    return false;
  }

  static private boolean jj_3R_206() {
    if (jj_3R_231()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_205() {
    if (jj_3R_230()) return true;
    return false;
  }

  static private boolean jj_3R_272() {
    if (jj_scan_token(FINISH)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  static private boolean jj_3R_204() {
    if (jj_3R_229()) return true;
    return false;
  }

  static private boolean jj_3R_302() {
    if (jj_3R_316()) return true;
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_3R_123()) return true;
    return false;
  }

  static private boolean jj_3R_301() {
    if (jj_3R_315()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_292() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(EXP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_271() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_228()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_284() {
    if (jj_3R_292()) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_265() {
    if (jj_3R_283()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_264() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_224() {
    if (jj_scan_token(CURRENTTIME)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_241() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_285() {
    if (jj_scan_token(129)) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(POW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(123)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_270() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_223() {
    if (jj_scan_token(FACTORYEMPTYREGION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_123()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_266() {
    if (jj_3R_285()) return true;
    return false;
  }

  static private boolean jj_3R_269() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_242() {
    if (jj_3R_265()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  static private boolean jj_3R_240() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(VALUE)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_267() {
    if (jj_scan_token(128)) return true;
    if (jj_3R_242()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  static private boolean jj_3R_222() {
    if (jj_scan_token(141)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(123)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_227() {
    if (jj_3R_30()) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_263() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_243() {
    if (jj_3R_267()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_217() {
    if (jj_3R_242()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_263()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_221() {
    if (jj_scan_token(FACTORYBlock)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_226() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_3R_30()) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_244() {
    if (jj_scan_token(127)) return true;
    if (jj_3R_217()) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(VALUE)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_30()) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_216() {
    if (jj_3R_241()) return true;
    return false;
  }

  static private boolean jj_3R_215() {
    if (jj_3R_240()) return true;
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_3R_228()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_220() {
    if (jj_scan_token(PLACES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_218() {
    if (jj_3R_244()) return true;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_3R_227()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    if (jj_3R_226()) return true;
    return false;
  }

  static private boolean jj_3R_188() {
    if (jj_3R_217()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_219() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_188()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_3R_183()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_189() {
    if (jj_3R_219()) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SIZE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_3R_188()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_268() {
    if (jj_scan_token(ASYNC)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_3R_187()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_359() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_3R_186()) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_3R_185()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_3R_184()) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_3R_190()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_357() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_170()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_356() {
    if (jj_3R_359()) return true;
    return false;
  }

  static private boolean jj_3R_354() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) return true;
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_262() {
    if (jj_3R_282()) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_261() {
    if (jj_3R_281()) return true;
    return false;
  }

  static private boolean jj_3R_358() {
    if (jj_scan_token(123)) return true;
    if (jj_3R_354()) return true;
    return false;
  }

  static private boolean jj_3R_260() {
    if (jj_3R_280()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_259() {
    if (jj_3R_279()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_258() {
    if (jj_3R_278()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_257() {
    if (jj_3R_277()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ORDINAL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_172()) return true;
    return false;
  }

  static private boolean jj_3R_256() {
    if (jj_3R_276()) return true;
    return false;
  }

  static private boolean jj_3R_355() {
    if (jj_3R_358()) return true;
    return false;
  }

  static private boolean jj_3R_255() {
    if (jj_3R_275()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_127()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(139)) return true;
    return false;
  }

  static private boolean jj_3R_254() {
    if (jj_3R_274()) return true;
    return false;
  }

  static private boolean jj_3R_350() {
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_354()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_355()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_253() {
    if (jj_3R_273()) return true;
    return false;
  }

  static private boolean jj_3R_252() {
    if (jj_3R_272()) return true;
    return false;
  }

  static private boolean jj_3R_251() {
    if (jj_3R_271()) return true;
    return false;
  }

  static private boolean jj_3R_250() {
    if (jj_3R_270()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(138)) return true;
    return false;
  }

  static private boolean jj_3R_249() {
    if (jj_3R_269()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_248() {
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ORDINAL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_341() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_247() {
    if (jj_3R_268()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_340() {
    if (jj_3R_350()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_246() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_198() {
    if (jj_3R_224()) return true;
    return false;
  }

  static private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) return true;
    }
    return false;
  }

  static private boolean jj_3R_282() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_197() {
    if (jj_3R_223()) return true;
    return false;
  }

  static private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_3R_222()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_3R_221()) return true;
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_3R_220()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_342() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_192() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_191() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(COORD)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_123()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_281() {
    if (jj_scan_token(THROW)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(RUNTIMEEXCEPTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_332() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_319() {
    if (jj_3R_331()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_353() {
    if (jj_scan_token(136)) return true;
    if (jj_3R_319()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_330() {
    if (jj_scan_token(DEFAULT_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ISLAST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_352() {
    if (jj_scan_token(135)) return true;
    if (jj_3R_319()) return true;
    return false;
  }

  static private boolean jj_3R_329() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ISFIRST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_318() {
    if (jj_3R_330()) return true;
    return false;
  }

  static private boolean jj_3R_317() {
    if (jj_3R_329()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(135)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_306() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) return true;
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(REGION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(PREV)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_307() {
    if (jj_3R_183()) return true;
    return false;
  }

  static private boolean jj_3R_351() {
    if (jj_scan_token(134)) return true;
    if (jj_3R_319()) return true;
    return false;
  }

  static private boolean jj_3R_297() {
    if (jj_3R_306()) return true;
    if (jj_scan_token(124)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_307()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(BYTE)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(DIST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(MAIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(134)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEXT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_289() {
    if (jj_3R_297()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SHORT)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(PLACE)) return true;
    return false;
  }

  static private boolean jj_3R_280() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_289()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_347() {
    if (jj_3R_353()) return true;
    return false;
  }

  static private boolean jj_3R_346() {
    if (jj_3R_352()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(RANK)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_345() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_344() {
    if (jj_3R_351()) return true;
    return false;
  }

  static private boolean jj_3R_343() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LONG)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_333() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_288() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_279() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LOW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static private boolean jj_3R_320() {
    if (jj_3R_333()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_308() {
    if (jj_3R_319()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_320()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_278() {
    if (jj_scan_token(PRINTERROR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(HIGH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_349() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_308()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static private boolean jj_3R_348() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_308()) return true;
    return false;
  }

  static private boolean jj_3R_277() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(140)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_276() {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_157()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CONTAINS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_336() {
    if (jj_3R_349()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_scan_token(139)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_335() {
    if (jj_3R_348()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_156()) return true;
    return false;
  }

  static private boolean jj_3R_334() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_155()) return true;
    return false;
  }

  static private boolean jj_3R_321() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_275() {
    if (jj_3R_179()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_scan_token(138)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CONTAINS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3R_309() {
    if (jj_3R_321()) return true;
    return false;
  }

  static private boolean jj_3R_245() {
    if (jj_scan_token(123)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_149()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_298() {
    if (jj_3R_308()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_309()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_225() {
    if (jj_3R_245()) return true;
    return false;
  }

  static private boolean jj_3R_339() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    if (jj_3R_298()) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_225()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(GET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(123)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(AND)) return true;
    if (jj_scan_token(DISTRIBUTION)) return true;
    if (jj_scan_token(125)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_3R_179()) return true;
    return false;
  }

  static private boolean jj_3R_338() {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    if (jj_3R_298()) return true;
    return false;
  }

  static private boolean jj_3R_182() {
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_199()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_3R_169()) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_337() {
    if (jj_scan_token(133)) return true;
    if (jj_3R_298()) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(RANK)) return true;
    if (jj_scan_token(125)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_239() {
    if (jj_scan_token(144)) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(REGION)) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_324() {
    if (jj_3R_339()) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_177()) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_3R_181()) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_323() {
    if (jj_3R_338()) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_3R_176()) return true;
    return false;
  }

  static private boolean jj_3R_322() {
    if (jj_3R_337()) return true;
    return false;
  }

  static private boolean jj_3R_238() {
    if (jj_scan_token(DISTUNIQUE)) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_175()) return true;
    return false;
  }

  static private boolean jj_3R_310() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(VALUE)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_3R_174()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DISTRIBUTION)) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_3R_173()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_3R_181()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_237() {
    if (jj_scan_token(143)) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_3R_180()) return true;
    return false;
  }

  static private boolean jj_3R_299() {
    if (jj_3R_310()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_290() {
    if (jj_3R_298()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_236() {
    if (jj_scan_token(142)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_81()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_305() {
    if (jj_scan_token(FOREACH)) return true;
    return false;
  }

  static private boolean jj_3R_328() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  static private boolean jj_3R_235() {
    if (jj_scan_token(HERE)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_304() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PlasmaX10ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[61];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x200000,0x0,0xe8002200,0xec002200,0x4000000,0xe8002200,0x10000000,0x0,0x800,0x0,0x60580a00,0x0,0xec002200,0x0,0x800000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x40000,0x40000,0x0,0x0,0x180000,0x180000,0x0,0x0,0x0,0x0,0x60580a00,0x0,0x60580a00,0x580000,0x60000200,0x60000200,0x60000000,0x0,0x0,0x800,0x60580a00,0x60580a00,0x60000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x20006,0x4000,0x20006,0x4000,0x0,0x0,0x20007,0x20006,0x0,0x20006,0xa67c8008,0xa67e800e,0x0,0xa67c8008,0x0,0x0,0x0,0x0,0x6440008,0x0,0xa67e800e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6440008,0x0,0x6440008,0x0,0x6440008,0x6440008,0x40000,0x8,0x0,0x0,0x6440008,0x6440008,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x20000000,0x0,0x20000000,0x20000000,0x40043e,0x20000000,0x40043e,0x20000000,0x0,0x0,0x40043e,0x40043e,0x0,0x40043e,0x4000b880,0x4040bcbe,0x0,0x4000b880,0x0,0x40001000,0x0,0x0,0x8080,0x0,0x4040bcbe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8080,0x0,0x8080,0x0,0x8080,0x8080,0x8000,0x0,0x0,0x0,0x8080,0x8080,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200001,0x0,0x200001,0x0,0x8000000,0x0,0x200001,0x200001,0x0,0x200001,0x32c97a,0x32c97b,0x0,0x32c97a,0x0,0x10,0x200000,0x8000000,0x32c860,0x480,0x32c97b,0x480,0x0,0x40000000,0x0,0x80000000,0x0,0x0,0x20000000,0x20000000,0x4000000,0x4000000,0x3000000,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x32c860,0x8000000,0x32c860,0x0,0x32c860,0x32c860,0x12c860,0x0,0x200000,0x0,0x32c860,0x32c860,0x12c860,0x8000000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e000,0x1e000,0x0,0x1e000,0x0,0x0,0x0,0x0,0x1fc00,0x0,0x1e000,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x4,0x4,0x18,0x18,0x20,0x20,0x0,0x0,0x1c0,0x40,0x180,0x200,0x1fc00,0x0,0x1fc00,0x1c00,0x1e000,0x1e000,0x1c000,0x0,0x0,0x0,0x1fc00,0x1fc00,0x1c000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[71];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PlasmaX10Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PlasmaX10Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlasmaX10ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PlasmaX10Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PlasmaX10ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PlasmaX10Parser(PlasmaX10ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PlasmaX10ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[145];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 61; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 145; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 71; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
