options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MatlabParser)
  package jsrc.matlab.syntaxanalysis.parser;
  public class MatlabParser {}
PARSER_END(MatlabParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <CONTINUATION: "...">
| <SINGLE_LINE_COMMENT: "%" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "%{" (~["%"])* "%" ("%" | (~["%","}"] (~["%"])* "%"))* "}">
}

TOKEN :
{
< BREAK: "break" >
| < CASE: "case" >
| < ELSE: "else" >
| < ELSEIF: "elseif" >
| < END: "end" >
| < FOR: "for" >
| < FUNCTION: "function" >
| < IF: "if" >
| < OTHERWISE: "otherwise" >
| < RETURN: "return" >
| < SWITCH: "switch" >
| < WHILE: "while" >
| < TIC: "tic" >
| < TOC: "toc" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
|
  < POINT_LITERAL:
        <DECIMAL_LITERAL> (["p","P"])
      | <HEX_LITERAL> (["p","P"])
      | <OCTAL_LITERAL> (["p","P"])
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < LONG_LITERAL:
        <INTEGER_LITERAL> "L"
      | <HEX_LITERAL> "L"
  >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "'"
      (   (~["\"","'","\\","\n","\r"])
        | ( "\\infty" )
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


void File() :
{}
{
  ( LOOKAHEAD( FunctionHeader() ) FunctionHeader() )?
  ( LOOKAHEAD( Statement() ) Statement() )*
  <EOF>
}

void FunctionHeader() :
{}
{
  "function" [LOOKAHEAD(OutputClause()) OutputClause()]
  Identifier() "(" ( IdentifierList() )? ")" ( ";" )?
}

void OutputClause() :
{}
{
  Output() "="
}

void Output() :
{}
{
  Identifier()
| 
  MultiOutput()        
}

void MultiOutput() :
{}
{
  "[" IdentifierList() "]"
}

void Statement() : {
//System.out.println("Statement");
} {
  LOOKAHEAD( CommandList() )
  CommandList()
|
  LOOKAHEAD( ArrayUpdate() )
  ArrayUpdate()
|
  LOOKAHEAD ( CallSt() )
  CallSt()
|
  LOOKAHEAD( AssignmentSt() )
  AssignmentSt()
|
  LOOKAHEAD( CallAndMultipleAssignmentSt() )
  CallAndMultipleAssignmentSt()
|
  LOOKAHEAD( IfSt() )
  IfSt()
|
  LOOKAHEAD( ForSt() )
  ForSt()
|
  LOOKAHEAD( WhileSt() )
  WhileSt()
|
  LOOKAHEAD( SwitchSt() )
  SwitchSt()
|
  LOOKAHEAD( BreakSt() )
  BreakSt()
|
  LOOKAHEAD( ReturnSt() )
  ReturnSt()
|
  Tic()
|
  LOOKAHEAD( PrintSt() )
  PrintSt()
|
  LOOKAHEAD( PrintlnSt() )
  PrintlnSt()
}

void Tic() :
{}
{
  "tic" [ ";" ]
}

void Command() :
{}
{
  LOOKAHEAD({!getToken(2).toString().equals("=") && !getToken(2).toString().equals("(")})
  Identifier() [ LOOKAHEAD(Identifier(), {!getToken(2).toString().equals("=") && !getToken(2).toString().equals("(")}) Identifier() ]
}

void CallSt() :
{
//System.out.println("CallSt");
}
{
  Call() [ ";" ]
}

void AssignmentSt() :
{
//System.out.println("AssignmentSt");
}
{
  Identifier() "=" Expression() [ ";" ]
}

void CallAndMultipleAssignmentSt() :
{}
{
  "[" IdentifierList() "]" "=" Call() [ ";" ]
}

void ArrayUpdate() :
{
//System.out.println("ArrayUpdate");
}
{
  IndexedArray() "=" Expression() [ ";" ]
}

void IfSt() :
{}
{
  "if" Expression() ( LOOKAHEAD( Statement() ) Statement() )* ( ElseIf() )* ( ElseClause() )? "end"
}

void ElseIf() :
{}
{
  "elseif" Expression() ( LOOKAHEAD( Statement() ) Statement() )*
}

void ElseClause() :
{}
{
  "else" ( LOOKAHEAD( Statement() ) Statement() )*
}


void ForSt() :
{}
{
  "for" Identifier() "=" Expression() ( LOOKAHEAD( Statement() ) Statement() )* "end"
}


void WhileSt() :
{}
{
  "while" Expression() ( LOOKAHEAD( Statement() ) Statement() )* "end"
}

void SwitchSt() :
{}
{
  "switch" Expression() ( Case() )*
  "otherwise" ( LOOKAHEAD( Statement() ) Statement() )* "end"
}

void Case() :
{}
{
  "case" (StringLiteral() | IntegerLiteral()) ( LOOKAHEAD( Statement() ) Statement() )*
}

void BreakSt() :
{}
{
  "break" ";"
}

void ReturnSt() :
{}
{
  "return" ";"
}

void PrintSt() :
{}
{
  "print(" Expression() ")" (";")?
}

void PrintlnSt() :
{}
{
  "println(" Expression() ")" (";")?
}


void Expression() :
{
//System.out.println("Expression");
}
{
  ShortCircuitOrExp()
}

void ShortCircuitOrExp() :
{}
{
  ShortCircuitAndExp() ( LOOKAHEAD( ShortCircuitOrExpRest() ) ShortCircuitOrExpRest() )*
}

void ShortCircuitOrExpRest() :
{}
{
  "||" ShortCircuitAndExp()
}

void ShortCircuitAndExp() :
{}
{
  ElementWiseOrExp() ( LOOKAHEAD( ShortCircuitAndExpRest() ) ShortCircuitAndExpRest() )*
}

void ShortCircuitAndExpRest() :
{}
{
  "&&" ElementWiseOrExp()
}

void ElementWiseOrExp() :
{}
{
  ElementWiseAndExp() ( LOOKAHEAD( ElementWiseOrExpRest() ) ElementWiseOrExpRest() )*
}

void ElementWiseOrExpRest() :
{}
{
  "|" ElementWiseAndExp()
}

void ElementWiseAndExp() :
{}
{
  RelationalExp() ( LOOKAHEAD( ElementWiseAndExpRest() ) ElementWiseAndExpRest() )*
}

void ElementWiseAndExpRest() :
{}
{
  "&" RelationalExp()
}

void RelationalExp() :
{}
{
  ColonVectorExp() ( LOOKAHEAD( RelationalExpRest() ) RelationalExpRest() )?
}

void RelationalExpRest() :
{}
{
  ("<" | ">" | "<=" | ">=" | "==" | "~=") ColonVectorExp()
}

void ColonVectorExp() :
{}
{
  Term() [":" Term() [ ":" Term() ]]
}

void Term() :
{
//System.out.println("Term");
}
{
  Factor() ( LOOKAHEAD( TermRest() ) TermRest() )*
}

void TermRest() :
{}
{
  ("+" | "-") Factor()
}

void Factor() :
{
//System.out.println("Factor");
}
{
  UnaryExp() ( LOOKAHEAD( FactorRest() ) FactorRest() )*
}

void FactorRest() :
{}
{
  ("*" | ".*" | "/" | "./") UnaryExp()
}

void UnaryExp() :
{
//System.out.println("UnaryExp");
}
{
  ["-" | "~"] SuperScriptExp()
}

void SuperScriptExp() :
{
//System.out.println("SuperScriptExp");
}
{
  LOOKAHEAD(AtomExp() "'")
  TransposeExp()
|
  PowerExp()
}

void TransposeExp() :
{
//System.out.println("TransposeExp");
}
{
  AtomExp() "'"
}

void PowerExp() :
{
//System.out.println("PowerExp");
}
{
  AtomExp() ( LOOKAHEAD( PowerExpRest() ) PowerExpRest() )*
}

void PowerExpRest() :
{}
{
  (".^" | "^") AtomExp()
}

void AtomExp() :
{
//System.out.println("AtomExp");
}
{
  LOOKAHEAD( CallOrIndexedArray() )
  CallOrIndexedArray()
|
  ParExp()
|
  MatrixConstructor()
|
  IntegerLiteral()
|
  FloatingPointLiteral() 
|
  StringLiteral() 
|
  Identifier()
|
  "toc"
|
  ":"
|
  "end"
  // ":" and "end" are not an Expressions. Can be part of the expression in array indices! 
}

void ParExp() :
{}
{
  "(" Expression() ")"
}

void Call() :
{}
{
  CallOrIndexedArray()
}

void IndexedArray() :
{}
{
  CallOrIndexedArray()
}

void CallOrIndexedArray() :
{
//System.out.println("CallOrIndexedArray");
}
{
  Identifier() "(" ( ExpressionList() )? ")"
}

//void VectorConstructor() :
//{}
//{
//  "[" (
//        ExpressionSeq() "]"
//        |
//        "]"
//  )
//}

void MatrixConstructor() :
{}
{
    "[" (
        ExpressionSeqs() "]"
        |
        "]"
    )
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void FloatingPointLiteral() :
{}
{
  <FLOATING_POINT_LITERAL>
}

void StringLiteral() :
{}
{
  <STRING_LITERAL>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}



void IdentifierList() :
{}
{
  Identifier() ( IdentifierRest() )*
}

void IdentifierRest() :

{}
{
  "," Identifier()
}

void CommandList() :
{
//System.out.println("CommandList");
}
{
  Command() ( CommandsRest() )* [ ";" ]
}

void CommandsRest() :
{}
{
  "," Command()
}

void ExpressionList() :
{}
{
  Expression() ( LOOKAHEAD( ExpressionRest() ) ExpressionRest() )*
}

void ExpressionRest() :
{}
{
  "," Expression()
}


void ExpressionSeq() :
{}
{
  Expression() ( (",")? Expression() )*
}

void ExpressionSeqs() :
{}
{
  ExpressionSeq() (ExpressionSeqsRest())*
}

void ExpressionSeqsRest() :
{}
{
  ";" ExpressionSeq()
}
