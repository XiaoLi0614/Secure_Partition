//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MatlabParser)
package jsrc.matlab.syntaxanalysis.parser;

import jsrc.matlab.syntaxanalysis.syntaxtree.*;
import java.util.Vector;


public class MatlabParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MatlabParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <CONTINUATION: "...">
   | <SINGLE_LINE_COMMENT: "%" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "%{" (~["%"])* "%" ("%" | (~["%", "}"] (~["%"])* "%"))* "}">
}

TOKEN :
{
   <BREAK: "break">
   | <CASE: "case">
   | <ELSE: "else">
   | <ELSEIF: "elseif">
   | <END: "end">
   | <FOR: "for">
   | <FUNCTION: "function">
   | <IF: "if">
   | <OTHERWISE: "otherwise">
   | <RETURN: "return">
   | <SWITCH: "switch">
   | <WHILE: "while">
   | <TIC: "tic">
   | <TOC: "toc">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
   | <POINT_LITERAL: <DECIMAL_LITERAL> (["p", "P"]) | <HEX_LITERAL> (["p", "P"]) | <OCTAL_LITERAL> (["p", "P"])>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <LONG_LITERAL: <INTEGER_LITERAL> "L" | <HEX_LITERAL> "L">
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <STRING_LITERAL: "'" ((~["\"", "'", "\\", "\n", "\r"]) | ("\\infty") | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "'">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

File File() :
{
   NodeOptional n0 = new NodeOptional();
   FunctionHeader n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      LOOKAHEAD(FunctionHeader())
      n1=FunctionHeader()
      { n0.addNode(n1); }
   )?
   (
      LOOKAHEAD(Statement())
      n3=Statement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5=<EOF> { 
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
   }
   
   { return new File(n0,n2,n4); }
}

FunctionHeader FunctionHeader() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   OutputClause n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   IdentifierList n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;

   
}
{
   n1="function" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(OutputClause())
      n3=OutputClause()
      { n2.addNode(n3); }
   )?
   n4=Identifier()
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=IdentifierList()
      { n7.addNode(n8); }
   )?
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n13=";" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
   )?
   
   { return new FunctionHeader(n0,n2,n4,n5,n7,n9,n11); }
}

OutputClause OutputClause() :
{
   Output n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=Output()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new OutputClause(n0,n1); }
}

Output Output() :
{
   NodeChoice n0;
   Identifier n1;
   MultiOutput n2;

   
}
{
   (
      n1=Identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=MultiOutput()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Output(n0); }
}

MultiOutput MultiOutput() :
{
   NodeToken n0;
   Token n1;
   IdentifierList n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IdentifierList()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new MultiOutput(n0,n2,n3); }
}

Statement Statement() :
{
   NodeChoice n0;
   CommandList n1;
   ArrayUpdate n2;
   CallSt n3;
   AssignmentSt n4;
   CallAndMultipleAssignmentSt n5;
   IfSt n6;
   ForSt n7;
   WhileSt n8;
   SwitchSt n9;
   BreakSt n10;
   ReturnSt n11;
   Tic n12;
   PrintSt n13;
   PrintlnSt n14;

   
}
{
   (
      LOOKAHEAD(CommandList())
      n1=CommandList()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(ArrayUpdate())
      n2=ArrayUpdate()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(CallSt())
      n3=CallSt()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(AssignmentSt())
      n4=AssignmentSt()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(CallAndMultipleAssignmentSt())
      n5=CallAndMultipleAssignmentSt()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(IfSt())
      n6=IfSt()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(ForSt())
      n7=ForSt()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(WhileSt())
      n8=WhileSt()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(SwitchSt())
      n9=SwitchSt()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(BreakSt())
      n10=BreakSt()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(ReturnSt())
      n11=ReturnSt()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=Tic()
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(PrintSt())
      n13=PrintSt()
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(PrintlnSt())
      n14=PrintlnSt()
      { n0 = new NodeChoice(n14, 13); }
   )
   
   { return new Statement(n0); }
}

Tic Tic() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;

   
}
{
   n1="tic" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   
   { return new Tic(n0,n2); }
}

Command Command() :
{
   Identifier n0;
   NodeOptional n1 = new NodeOptional();
   Identifier n2;

   
}
{
   LOOKAHEAD({ !getToken(2).toString().equals("=") && !getToken(2).toString().equals("(") })
   n0=Identifier()
   (
      LOOKAHEAD(Identifier(), { !getToken(2).toString().equals("=") && !getToken(2).toString().equals("(") })
      n2=Identifier()
      { n1.addNode(n2); }
   )?
   
   { return new Command(n0,n1); }
}

CallSt CallSt() :
{
   Call n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;

   
}
{
   n0=Call()
   (
      n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   
   { return new CallSt(n0,n1); }
}

AssignmentSt AssignmentSt() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   (
      n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   
   { return new AssignmentSt(n0,n1,n3,n4); }
}

CallAndMultipleAssignmentSt CallAndMultipleAssignmentSt() :
{
   NodeToken n0;
   Token n1;
   IdentifierList n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Call n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IdentifierList()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="=" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Call()
   (
      n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   
   { return new CallAndMultipleAssignmentSt(n0,n2,n3,n5,n7,n8); }
}

ArrayUpdate ArrayUpdate() :
{
   IndexedArray n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;

   
}
{
   n0=IndexedArray()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   (
      n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   
   { return new ArrayUpdate(n0,n1,n3,n4); }
}

IfSt IfSt() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Statement n4;
   NodeListOptional n5 = new NodeListOptional();
   ElseIf n6;
   NodeOptional n7 = new NodeOptional();
   ElseClause n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   (
      LOOKAHEAD(Statement())
      n4=Statement()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      n6=ElseIf()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   (
      n8=ElseClause()
      { n7.addNode(n8); }
   )?
   n10="end" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new IfSt(n0,n2,n3,n5,n7,n9); }
}

ElseIf ElseIf() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Statement n4;

   
}
{
   n1="elseif" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   (
      LOOKAHEAD(Statement())
      n4=Statement()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new ElseIf(n0,n2,n3); }
}

ElseClause ElseClause() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;

   
}
{
   n1="else" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(Statement())
      n3=Statement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new ElseClause(n0,n2); }
}

ForSt ForSt() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeListOptional n6 = new NodeListOptional();
   Statement n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1="for" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Expression()
   (
      LOOKAHEAD(Statement())
      n7=Statement()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n9="end" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new ForSt(n0,n2,n3,n5,n6,n8); }
}

WhileSt WhileSt() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Statement n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   (
      LOOKAHEAD(Statement())
      n4=Statement()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n6="end" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new WhileSt(n0,n2,n3,n5); }
}

SwitchSt SwitchSt() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Case n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   Statement n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="switch" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   (
      n4=Case()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n6="otherwise" { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      LOOKAHEAD(Statement())
      n8=Statement()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n10="end" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new SwitchSt(n0,n2,n3,n5,n7,n9); }
}

Case Case() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   StringLiteral n3;
   IntegerLiteral n4;
   NodeListOptional n5 = new NodeListOptional();
   Statement n6;

   
}
{
   n1="case" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=StringLiteral()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=IntegerLiteral()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   (
      LOOKAHEAD(Statement())
      n6=Statement()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   
   { return new Case(n0,n2,n5); }
}

BreakSt BreakSt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="break" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new BreakSt(n0,n2); }
}

ReturnSt ReturnSt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="return" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ReturnSt(n0,n2); }
}

PrintSt PrintSt() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;

   
}
{
   n1="print(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   
   { return new PrintSt(n0,n2,n3,n5); }
}

PrintlnSt PrintlnSt() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;

   
}
{
   n1="println(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   
   { return new PrintlnSt(n0,n2,n3,n5); }
}

Expression Expression() :
{
   ShortCircuitOrExp n0;

   
}
{
   n0=ShortCircuitOrExp()
   
   { return new Expression(n0); }
}

ShortCircuitOrExp ShortCircuitOrExp() :
{
   ShortCircuitAndExp n0;
   NodeListOptional n1 = new NodeListOptional();
   ShortCircuitOrExpRest n2;

   
}
{
   n0=ShortCircuitAndExp()
   (
      LOOKAHEAD(ShortCircuitOrExpRest())
      n2=ShortCircuitOrExpRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ShortCircuitOrExp(n0,n1); }
}

ShortCircuitOrExpRest ShortCircuitOrExpRest() :
{
   NodeToken n0;
   Token n1;
   ShortCircuitAndExp n2;

   
}
{
   n1="||" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShortCircuitAndExp()
   
   { return new ShortCircuitOrExpRest(n0,n2); }
}

ShortCircuitAndExp ShortCircuitAndExp() :
{
   ElementWiseOrExp n0;
   NodeListOptional n1 = new NodeListOptional();
   ShortCircuitAndExpRest n2;

   
}
{
   n0=ElementWiseOrExp()
   (
      LOOKAHEAD(ShortCircuitAndExpRest())
      n2=ShortCircuitAndExpRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ShortCircuitAndExp(n0,n1); }
}

ShortCircuitAndExpRest ShortCircuitAndExpRest() :
{
   NodeToken n0;
   Token n1;
   ElementWiseOrExp n2;

   
}
{
   n1="&&" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ElementWiseOrExp()
   
   { return new ShortCircuitAndExpRest(n0,n2); }
}

ElementWiseOrExp ElementWiseOrExp() :
{
   ElementWiseAndExp n0;
   NodeListOptional n1 = new NodeListOptional();
   ElementWiseOrExpRest n2;

   
}
{
   n0=ElementWiseAndExp()
   (
      LOOKAHEAD(ElementWiseOrExpRest())
      n2=ElementWiseOrExpRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ElementWiseOrExp(n0,n1); }
}

ElementWiseOrExpRest ElementWiseOrExpRest() :
{
   NodeToken n0;
   Token n1;
   ElementWiseAndExp n2;

   
}
{
   n1="|" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ElementWiseAndExp()
   
   { return new ElementWiseOrExpRest(n0,n2); }
}

ElementWiseAndExp ElementWiseAndExp() :
{
   RelationalExp n0;
   NodeListOptional n1 = new NodeListOptional();
   ElementWiseAndExpRest n2;

   
}
{
   n0=RelationalExp()
   (
      LOOKAHEAD(ElementWiseAndExpRest())
      n2=ElementWiseAndExpRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ElementWiseAndExp(n0,n1); }
}

ElementWiseAndExpRest ElementWiseAndExpRest() :
{
   NodeToken n0;
   Token n1;
   RelationalExp n2;

   
}
{
   n1="&" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExp()
   
   { return new ElementWiseAndExpRest(n0,n2); }
}

RelationalExp RelationalExp() :
{
   ColonVectorExp n0;
   NodeOptional n1 = new NodeOptional();
   RelationalExpRest n2;

   
}
{
   n0=ColonVectorExp()
   (
      LOOKAHEAD(RelationalExpRest())
      n2=RelationalExpRest()
      { n1.addNode(n2); }
   )?
   
   { return new RelationalExp(n0,n1); }
}

RelationalExpRest RelationalExpRest() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ColonVectorExp n13;

   
}
{
   (
      (
         n2="<" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=">" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6="<=" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=">=" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10="==" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12="~=" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      )
      
   )
   n13=ColonVectorExp()
   
   { return new RelationalExpRest(n0,n13); }
}

ColonVectorExp ColonVectorExp() :
{
   Term n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Term n5;
   NodeOptional n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Term n10;

   
}
{
   n0=Term()
   (
      { n6 = new NodeOptional(); }
      { n2 = new NodeSequence(3); }
      n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Term()
      { n2.addNode(n5); }
      (
         { n7 = new NodeSequence(2); }
         n9=":" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=Term()
         { n7.addNode(n10); }
         { n6.addNode(n7); }
      )?
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   
   { return new ColonVectorExp(n0,n1); }
}

Term Term() :
{
   Factor n0;
   NodeListOptional n1 = new NodeListOptional();
   TermRest n2;

   
}
{
   n0=Factor()
   (
      LOOKAHEAD(TermRest())
      n2=TermRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Term(n0,n1); }
}

TermRest TermRest() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   Factor n5;

   
}
{
   (
      (
         n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="-" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=Factor()
   
   { return new TermRest(n0,n5); }
}

Factor Factor() :
{
   UnaryExp n0;
   NodeListOptional n1 = new NodeListOptional();
   FactorRest n2;

   
}
{
   n0=UnaryExp()
   (
      LOOKAHEAD(FactorRest())
      n2=FactorRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Factor(n0,n1); }
}

FactorRest FactorRest() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   UnaryExp n9;

   
}
{
   (
      (
         n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=".*" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6="/" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8="./" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      )
      
   )
   n9=UnaryExp()
   
   { return new FactorRest(n0,n9); }
}

UnaryExp UnaryExp() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   SuperScriptExp n6;

   
}
{
   (
      (
         n3="-" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5="~" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      )
      { n0.addNode(n1); }
   )?
   n6=SuperScriptExp()
   
   { return new UnaryExp(n0,n6); }
}

SuperScriptExp SuperScriptExp() :
{
   NodeChoice n0;
   TransposeExp n1;
   PowerExp n2;

   
}
{
   (
      LOOKAHEAD(AtomExp() "'")
      n1=TransposeExp()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PowerExp()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new SuperScriptExp(n0); }
}

TransposeExp TransposeExp() :
{
   AtomExp n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=AtomExp()
   n2="'" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new TransposeExp(n0,n1); }
}

PowerExp PowerExp() :
{
   AtomExp n0;
   NodeListOptional n1 = new NodeListOptional();
   PowerExpRest n2;

   
}
{
   n0=AtomExp()
   (
      LOOKAHEAD(PowerExpRest())
      n2=PowerExpRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new PowerExp(n0,n1); }
}

PowerExpRest PowerExpRest() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   AtomExp n5;

   
}
{
   (
      (
         n2=".^" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="^" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=AtomExp()
   
   { return new PowerExpRest(n0,n5); }
}

AtomExp AtomExp() :
{
   NodeChoice n0;
   CallOrIndexedArray n1;
   ParExp n2;
   MatrixConstructor n3;
   IntegerLiteral n4;
   FloatingPointLiteral n5;
   StringLiteral n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   (
      LOOKAHEAD(CallOrIndexedArray())
      n1=CallOrIndexedArray()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ParExp()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=MatrixConstructor()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IntegerLiteral()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=FloatingPointLiteral()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=StringLiteral()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=Identifier()
      { n0 = new NodeChoice(n7, 6); }
   |
      n9="toc" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n0 = new NodeChoice(n8, 7); }
   |
      n11=":" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 8); }
   |
      n13="end" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 9); }
   )
   
   { return new AtomExp(n0); }
}

ParExp ParExp() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ParExp(n0,n2,n3); }
}

Call Call() :
{
   CallOrIndexedArray n0;

   
}
{
   n0=CallOrIndexedArray()
   
   { return new Call(n0); }
}

IndexedArray IndexedArray() :
{
   CallOrIndexedArray n0;

   
}
{
   n0=CallOrIndexedArray()
   
   { return new IndexedArray(n0); }
}

CallOrIndexedArray CallOrIndexedArray() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   ExpressionList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=Identifier()
   n2="(" { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=ExpressionList()
      { n3.addNode(n4); }
   )?
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new CallOrIndexedArray(n0,n1,n3,n5); }
}

MatrixConstructor MatrixConstructor() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   ExpressionSeqs n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n4=ExpressionSeqs()
         { n3.addNode(n4); }
         n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n3.addNode(n5); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2 = new NodeChoice(n7, 1); }
      )
      
   )
   
   { return new MatrixConstructor(n0,n2); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

FloatingPointLiteral FloatingPointLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<FLOATING_POINT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FloatingPointLiteral(n0); }
}

StringLiteral StringLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new StringLiteral(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

IdentifierList IdentifierList() :
{
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   IdentifierRest n2;

   
}
{
   n0=Identifier()
   (
      n2=IdentifierRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new IdentifierList(n0,n1); }
}

IdentifierRest IdentifierRest() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new IdentifierRest(n0,n2); }
}

CommandList CommandList() :
{
   Command n0;
   NodeListOptional n1 = new NodeListOptional();
   CommandsRest n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   
}
{
   n0=Command()
   (
      n2=CommandsRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   
   { return new CommandList(n0,n1,n3); }
}

CommandsRest CommandsRest() :
{
   NodeToken n0;
   Token n1;
   Command n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Command()
   
   { return new CommandsRest(n0,n2); }
}

ExpressionList ExpressionList() :
{
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpressionRest n2;

   
}
{
   n0=Expression()
   (
      LOOKAHEAD(ExpressionRest())
      n2=ExpressionRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpressionList(n0,n1); }
}

ExpressionRest ExpressionRest() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new ExpressionRest(n0,n2); }
}

ExpressionSeq ExpressionSeq() :
{
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   Expression n6;

   
}
{
   n0=Expression()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=Expression()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpressionSeq(n0,n1); }
}

ExpressionSeqs ExpressionSeqs() :
{
   ExpressionSeq n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpressionSeqsRest n2;

   
}
{
   n0=ExpressionSeq()
   (
      n2=ExpressionSeqsRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpressionSeqs(n0,n1); }
}

ExpressionSeqsRest ExpressionSeqsRest() :
{
   NodeToken n0;
   Token n1;
   ExpressionSeq n2;

   
}
{
   n1=";" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ExpressionSeq()
   
   { return new ExpressionSeqsRest(n0,n2); }
}
