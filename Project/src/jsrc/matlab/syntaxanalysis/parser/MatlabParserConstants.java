/* Generated By:JavaCC: Do not edit this line. MatlabParserConstants.java */
package jsrc.matlab.syntaxanalysis.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MatlabParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CONTINUATION = 6;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 8;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int BREAK = 10;
  /** RegularExpression Id. */
  int CASE = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int ELSEIF = 13;
  /** RegularExpression Id. */
  int END = 14;
  /** RegularExpression Id. */
  int FOR = 15;
  /** RegularExpression Id. */
  int FUNCTION = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int OTHERWISE = 18;
  /** RegularExpression Id. */
  int RETURN = 19;
  /** RegularExpression Id. */
  int SWITCH = 20;
  /** RegularExpression Id. */
  int WHILE = 21;
  /** RegularExpression Id. */
  int TIC = 22;
  /** RegularExpression Id. */
  int TOC = 23;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 24;
  /** RegularExpression Id. */
  int POINT_LITERAL = 25;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 26;
  /** RegularExpression Id. */
  int HEX_LITERAL = 27;
  /** RegularExpression Id. */
  int LONG_LITERAL = 28;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 29;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 30;
  /** RegularExpression Id. */
  int EXPONENT = 31;
  /** RegularExpression Id. */
  int STRING_LITERAL = 32;
  /** RegularExpression Id. */
  int IDENTIFIER = 33;
  /** RegularExpression Id. */
  int LETTER = 34;
  /** RegularExpression Id. */
  int DIGIT = 35;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"...\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"break\"",
    "\"case\"",
    "\"else\"",
    "\"elseif\"",
    "\"end\"",
    "\"for\"",
    "\"function\"",
    "\"if\"",
    "\"otherwise\"",
    "\"return\"",
    "\"switch\"",
    "\"while\"",
    "\"tic\"",
    "\"toc\"",
    "<INTEGER_LITERAL>",
    "<POINT_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<LONG_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "\"print(\"",
    "\"println(\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"&\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"~=\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\".*\"",
    "\"/\"",
    "\"./\"",
    "\"~\"",
    "\"\\\'\"",
    "\".^\"",
    "\"^\"",
    "\",\"",
  };

}
