//
// Generated by JTB 1.3.2
//

package jsrc.matlab.syntaxanalysis.visitor;
import jsrc.matlab.syntaxanalysis.syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n);
   public R visit(NodeListOptional n);
   public R visit(NodeOptional n);
   public R visit(NodeSequence n);
   public R visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( FunctionHeader() )?
    * f1 -> ( Statement() )*
    * f2 -> <EOF>
    */
   public R visit(File n);

   /**
    * f0 -> "function"
    * f1 -> [ OutputClause() ]
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( IdentifierList() )?
    * f5 -> ")"
    * f6 -> ( ";" )?
    */
   public R visit(FunctionHeader n);

   /**
    * f0 -> Output()
    * f1 -> "="
    */
   public R visit(OutputClause n);

   /**
    * f0 -> Identifier()
    *       | MultiOutput()
    */
   public R visit(Output n);

   /**
    * f0 -> "["
    * f1 -> IdentifierList()
    * f2 -> "]"
    */
   public R visit(MultiOutput n);

   /**
    * f0 -> CommandList()
    *       | ArrayUpdate()
    *       | CallSt()
    *       | AssignmentSt()
    *       | CallAndMultipleAssignmentSt()
    *       | IfSt()
    *       | ForSt()
    *       | WhileSt()
    *       | SwitchSt()
    *       | BreakSt()
    *       | ReturnSt()
    *       | Tic()
    *       | PrintSt()
    *       | PrintlnSt()
    */
   public R visit(Statement n);

   /**
    * f0 -> "tic"
    * f1 -> [ ";" ]
    */
   public R visit(Tic n);

   /**
Identifier()
    * f0 -> [ Identifier() ]
    */
   public R visit(Command n);

   /**
    * f0 -> Call()
    * f1 -> [ ";" ]
    */
   public R visit(CallSt n);

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> [ ";" ]
    */
   public R visit(AssignmentSt n);

   /**
    * f0 -> "["
    * f1 -> IdentifierList()
    * f2 -> "]"
    * f3 -> "="
    * f4 -> Call()
    * f5 -> [ ";" ]
    */
   public R visit(CallAndMultipleAssignmentSt n);

   /**
    * f0 -> IndexedArray()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> [ ";" ]
    */
   public R visit(ArrayUpdate n);

   /**
    * f0 -> "if"
    * f1 -> Expression()
    * f2 -> ( Statement() )*
    * f3 -> ( ElseIf() )*
    * f4 -> ( ElseClause() )?
    * f5 -> "end"
    */
   public R visit(IfSt n);

   /**
    * f0 -> "elseif"
    * f1 -> Expression()
    * f2 -> ( Statement() )*
    */
   public R visit(ElseIf n);

   /**
    * f0 -> "else"
    * f1 -> ( Statement() )*
    */
   public R visit(ElseClause n);

   /**
    * f0 -> "for"
    * f1 -> Identifier()
    * f2 -> "="
    * f3 -> Expression()
    * f4 -> ( Statement() )*
    * f5 -> "end"
    */
   public R visit(ForSt n);

   /**
    * f0 -> "while"
    * f1 -> Expression()
    * f2 -> ( Statement() )*
    * f3 -> "end"
    */
   public R visit(WhileSt n);

   /**
    * f0 -> "switch"
    * f1 -> Expression()
    * f2 -> ( Case() )*
    * f3 -> "otherwise"
    * f4 -> ( Statement() )*
    * f5 -> "end"
    */
   public R visit(SwitchSt n);

   /**
    * f0 -> "case"
    * f1 -> ( StringLiteral() | IntegerLiteral() )
    * f2 -> ( Statement() )*
    */
   public R visit(Case n);

   /**
    * f0 -> "break"
    * f1 -> ";"
    */
   public R visit(BreakSt n);

   /**
    * f0 -> "return"
    * f1 -> ";"
    */
   public R visit(ReturnSt n);

   /**
    * f0 -> "print("
    * f1 -> Expression()
    * f2 -> ")"
    * f3 -> ( ";" )?
    */
   public R visit(PrintSt n);

   /**
    * f0 -> "println("
    * f1 -> Expression()
    * f2 -> ")"
    * f3 -> ( ";" )?
    */
   public R visit(PrintlnSt n);

   /**
    * f0 -> ShortCircuitOrExp()
    */
   public R visit(Expression n);

   /**
    * f0 -> ShortCircuitAndExp()
    * f1 -> ( ShortCircuitOrExpRest() )*
    */
   public R visit(ShortCircuitOrExp n);

   /**
    * f0 -> "||"
    * f1 -> ShortCircuitAndExp()
    */
   public R visit(ShortCircuitOrExpRest n);

   /**
    * f0 -> ElementWiseOrExp()
    * f1 -> ( ShortCircuitAndExpRest() )*
    */
   public R visit(ShortCircuitAndExp n);

   /**
    * f0 -> "&&"
    * f1 -> ElementWiseOrExp()
    */
   public R visit(ShortCircuitAndExpRest n);

   /**
    * f0 -> ElementWiseAndExp()
    * f1 -> ( ElementWiseOrExpRest() )*
    */
   public R visit(ElementWiseOrExp n);

   /**
    * f0 -> "|"
    * f1 -> ElementWiseAndExp()
    */
   public R visit(ElementWiseOrExpRest n);

   /**
    * f0 -> RelationalExp()
    * f1 -> ( ElementWiseAndExpRest() )*
    */
   public R visit(ElementWiseAndExp n);

   /**
    * f0 -> "&"
    * f1 -> RelationalExp()
    */
   public R visit(ElementWiseAndExpRest n);

   /**
    * f0 -> ColonVectorExp()
    * f1 -> ( RelationalExpRest() )?
    */
   public R visit(RelationalExp n);

   /**
    * f0 -> ( "<" | ">" | "<=" | ">=" | "==" | "~=" )
    * f1 -> ColonVectorExp()
    */
   public R visit(RelationalExpRest n);

   /**
    * f0 -> Term()
    * f1 -> [ ":" Term() [ ":" Term() ] ]
    */
   public R visit(ColonVectorExp n);

   /**
    * f0 -> Factor()
    * f1 -> ( TermRest() )*
    */
   public R visit(Term n);

   /**
    * f0 -> ( "+" | "-" )
    * f1 -> Factor()
    */
   public R visit(TermRest n);

   /**
    * f0 -> UnaryExp()
    * f1 -> ( FactorRest() )*
    */
   public R visit(Factor n);

   /**
    * f0 -> ( "*" | ".*" | "/" | "./" )
    * f1 -> UnaryExp()
    */
   public R visit(FactorRest n);

   /**
    * f0 -> [ "-" | "~" ]
    * f1 -> SuperScriptExp()
    */
   public R visit(UnaryExp n);

   /**
    * f0 -> TransposeExp()
    *       | PowerExp()
    */
   public R visit(SuperScriptExp n);

   /**
    * f0 -> AtomExp()
    * f1 -> "'"
    */
   public R visit(TransposeExp n);

   /**
    * f0 -> AtomExp()
    * f1 -> ( PowerExpRest() )*
    */
   public R visit(PowerExp n);

   /**
    * f0 -> ( ".^" | "^" )
    * f1 -> AtomExp()
    */
   public R visit(PowerExpRest n);

   /**
    * f0 -> CallOrIndexedArray()
    *       | ParExp()
    *       | MatrixConstructor()
    *       | IntegerLiteral()
    *       | FloatingPointLiteral()
    *       | StringLiteral()
    *       | Identifier()
    *       | "toc"
    *       | ":"
    *       | "end"
    */
   public R visit(AtomExp n);

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(ParExp n);

   /**
    * f0 -> CallOrIndexedArray()
    */
   public R visit(Call n);

   /**
    * f0 -> CallOrIndexedArray()
    */
   public R visit(IndexedArray n);

   /**
    * f0 -> Identifier()
    * f1 -> "("
    * f2 -> ( ExpressionList() )?
    * f3 -> ")"
    */
   public R visit(CallOrIndexedArray n);

   /**
    * f0 -> "["
    * f1 -> ( ExpressionSeqs() "]" | "]" )
    */
   public R visit(MatrixConstructor n);

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n);

   /**
    * f0 -> <FLOATING_POINT_LITERAL>
    */
   public R visit(FloatingPointLiteral n);

   /**
    * f0 -> <STRING_LITERAL>
    */
   public R visit(StringLiteral n);

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n);

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n);

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n);

   /**
    * f0 -> Command()
    * f1 -> ( CommandsRest() )*
    * f2 -> [ ";" ]
    */
   public R visit(CommandList n);

   /**
    * f0 -> ","
    * f1 -> Command()
    */
   public R visit(CommandsRest n);

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n);

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n);

   /**
    * f0 -> Expression()
    * f1 -> ( ( "," )? Expression() )*
    */
   public R visit(ExpressionSeq n);

   /**
    * f0 -> ExpressionSeq()
    * f1 -> ( ExpressionSeqsRest() )*
    */
   public R visit(ExpressionSeqs n);

   /**
    * f0 -> ";"
    * f1 -> ExpressionSeq()
    */
   public R visit(ExpressionSeqsRest n);

}

