-----------------------------------------------------
load
    http://www.mathworks.com/help/techdoc/ref/load.html
    We need to use JMatIO.

clc
    http://www.mathworks.com/help/techdoc/ref/clc.html
    Clear Command Window

figure
    http://www.mathworks.com/help/techdoc/ref/figure.html
    figure creates figure graphics objects. Figure objects are the individual windows on the screen in which the MATLAB software displays graphical output.
    figure(h) does one of two things, depending on whether or not a figure with handle h exists. If h is the handle to an existing figure, figure(h) makes the figure identified by h the current figure, makes it visible, and raises it above all other figures on the screen. The current figure is the target for graphics output. If h is not the handle to an existing figure, but is an integer, figure(h) creates a figure and assigns it the handle h.

shg
    shg makes the current figure visible and raises it above all other figures on the screen. This is identical to using the command figure(gcf).

axis
    http://www.mathworks.com/help/techdoc/ref/axis.html
    axis manipulates commonly used axes properties.
    axis([xmin xmax ymin ymax]) sets the limits for the x- and y-axis of the current axes.
    axis equal sets the aspect ratio so that the data units are the same in every direction. The aspect ratio of the x-, y-, and z-axis is adjusted automatically according to the range of data units in the x, y, and z directions.
    axis image is the same as axis equal except that the plot box fits tightly around the data.
    axis off turns off all axis lines, tick marks, and labels.

xlabel
ylabel
zlabel
    http://www.mathworks.com/help/techdoc/ref/xlabel.html
    Each axes graphics object can have one label for the x-, y-, and z-axis. The label appears beneath its respective axis in a two-dimensional plot and to the side or beneath the axis in a three-dimensional plot

title
    http://www.mathworks.com/help/techdoc/ref/title.html
    Add title to current axes

drawnow
    http://www.mathworks.com/help/techdoc/ref/drawnow.html
    drawnow causes figure windows and their children to update, and flushes the system event queue. Any callbacks generated by incoming events (e.g., mouse or key events) are dispatched before drawnow returns.

subplot
    http://www.mathworks.com/help/techdoc/creating_plots/brb46dv-1.html
    The subplot command enables you to display multiple plots in the same window or print them on the same piece of paper. Typing
    subplot(m,n,p) partitions the figure window into an m-by-n matrix of small subplots and selects the pth subplot for the current plot.

close
    http://www.mathworks.com/help/techdoc/ref/close.html
    close deletes the current figure or the specified figure(s). It optionally returns the status of the close operation.
    close all deletes all figures whose handles are not hidden.

imagesc
    http://www.mathworks.com/help/techdoc/ref/imagesc.html
    Scale data and display image object
    The imagesc specification scales image data to the full range of the current colormap and displays the image.
    imagesc(C) displays C as an image. Each element of C corresponds to a rectangular area in the image. The values of the elements of C are indices into the current colormap that determine the color of each patch.

slice
    http://www.mathworks.com/help/techdoc/ref/slice.html

&, |, and ~
    The logical array operators AND, OR, and NOT

&& ||
    http://www.mathworks.com/help/techdoc/ref/logicaloperatorsshortcircuit.html
    Logical operations, with short-circuiting capability

.* ./
    http://www.mathworks.com/help/techdoc/ref/arithmeticoperators.html
    two different types of arithmetic operations. Matrix arithmetic operations are defined by the rules of linear algebra. Array arithmetic operations are carried out element by element, and can be used with multidimensional arrays. The period character (.) distinguishes the array operations from the matrix operations. However, since the matrix and array operations are the same for addition and subtraction, the character pairs .+ and .- are not used.
.^
    Array power. A.^B is the matrix with elements A(i,j) to the B(i,j) power. A and B must have the same size, unless one of them is a scalar.    
'
    Matrix transpose. A' is the linear algebraic transpose of A. For complex matrices, this is the complex conjugate transpose.

:
    http://www.mathworks.com/help/techdoc/learn_matlab/f2-12841.html#f2-428
    The colon by itself refers to all the elements in a row or column of a matrix.
end
    http://www.mathworks.com/help/techdoc/math/f1-85462.html#f1-85564
	The keyword end refers to the last row or column.
    sum(A(:,end))

error
    http://www.mathworks.com/help/techdoc/ref/error.html
    error('msgString')
    Display message and abort specification.
    Depending on how the program has been designed to respond to the error, MATLAB either enters a catch block to handle the error condition, or exits the program.
any
    http://www.mathworks.com/help/techdoc/ref/any.html
    B = any(A) tests whether any of the elements along various dimensions of
    an array is a nonzero number or is logical 1 (true)

isfinite
    http://www.mathworks.com/help/techdoc/ref/isfinite.html
    TF = isfinite(A) returns an array the same size as A containing logical 1 (true) where the elements of the array A are finite and logical 0 (false) where they are infinite or NaN.
isreal
	http://www.mathworks.com/help/techdoc/ref/isreal.html
ndims
    http://www.mathworks.com/help/techdoc/ref/ndims.html
    Number of array dimensions
    ndims(x) is length(size(x)).

sqrt
    http://www.mathworks.com/help/techdoc/ref/sqrt.html
    Square root

mfilename
    http://www.mathworks.com/help/techdoc/ref/mfilename.html
    File name of currently running specification

permute
    http://www.mathworks.com/help/techdoc/ref/permute.html
    B  = permute(A,order) rearranges the dimensions of A so that they are in the order specified by the vector order. All the elements of order must be unique.

max
    http://www.mathworks.com/help/techdoc/ref/max.html
    If A is a vector, max(A) returns the largest element in A.
    If A is a matrix, max(A) treats the columns of A as vectors, returning a row vector containing the maximum element from each column.
    C = max(A,B) returns an array the same size as A and B with the largest elements taken from A or B. The dimensions of A and B must match, or they may be scalar.

min
    http://www.mathworks.com/help/techdoc/ref/min.html
    C = min(A) returns the smallest elements along different dimensions of an array.
    C = min(A,B) returns an array the same size as A and B with the smallest elements taken from A or B. The dimensions of A and B must match, or they may be scalar

abs
    http://www.mathworks.com/help/techdoc/ref/abs.html
    abs(X) returns an array Y such that each element of Y is the absolute
    value of the corresponding element of X

reshape
    http://www.mathworks.com/help/techdoc/ref/reshape.html
    B = reshape(A,m,n) returns the m-by-n matrix B whose elements are taken
    column-wise from A.

sum
    http://www.mathworks.com/help/techdoc/ref/sum.html
    If A is a matrix, sum(A) treats the columns of A as vectors, returning a row vector of the sums of each column.

ones
    http://www.mathworks.com/help/techdoc/ref/ones.html
    Y = ones(m,n) or Y = ones([m n]) returns an m-by-n matrix of ones.
zeros
    The same as ones.

mat2str
    http://www.mathworks.com/help/techdoc/ref/mat2str.html
    str = mat2str(A) converts matrix A into a string

colormap
    http://www.mathworks.com/help/techdoc/ref/colormap.html
    A colormap is an m-by-3 matrix of real numbers between 0.0 and 1.0. Each row is an RGB vector that defines one color.
    colormap(map) sets the colormap to the matrix map.
    hot(256), gray(256) are built-in MATLAB colormaps.

mean
    http://www.mathworks.com/help/techdoc/ref/mean.html
    M = mean(A) returns the mean values of the elements along different dimensions of an array.

etime
    http://www.mathworks.com/help/techdoc/ref/etime.html
    Time elapsed between date vectors

imread
    http://www.mathworks.com/help/techdoc/ref/imread.html
    Read image from graphics file.
    imread(filename) attempts to infer the format of the file from its content.

randn
     http://www.mathworks.com/help/techdoc/ref/randn.html
     randn(m,n) or randn([m,n]) returns an m-by-n matrix.

length
    http://www.mathworks.com/help/techdoc/ref/length.html
    Length of vector or largest array dimension

round
    http://www.mathworks.com/help/techdoc/ref/round.html
    Y = round(X) rounds the elements of X to the nearest integers

lower
    http://www.mathworks.com/help/techdoc/ref/lower.html
    Convert string to lowercase

image
    http://www.mathworks.com/help/techdoc/ref/image.html
    image creates an image graphics object by interpreting each element in a matrix as an index into the figure's colormap or directly as RGB values, depending on the data specified.

find
    http://www.mathworks.com/help/techdoc/ref/find.html
    ind = find(X) locates all nonzero elements of array X, and returns the linear indices of those elements in vector ind.

full
    http://www.mathworks.com/help/techdoc/ref/full.html
    Convert sparse matrix to full matrix

mod
    http://www.mathworks.com/help/techdoc/ref/mod.html
    M = mod(X,Y) Modulus after division

imshow
    http://www.mathworks.com/help/toolbox/images/ref/imshow.html
    imshow(I) displays the grayscale image I.
    imshow(I,[low high]) displays the grayscale image I, specifying the display range for I in [low high]. The value low (and any value less than low) displays as black; the value high (and any value greater than high) displays as white. Values in between are displayed as intermediate shades of gray, using the default number of gray levels. If you use an empty matrix ([]) for [low high], imshow uses [min(I(:)) max(I(:))]; that is, the minimum value in I is displayed as black, and the maximum value is displayed as white

phantom
    http://www.mathworks.com/help/toolbox/images/ref/phantom.html
    Create head phantom image
    

tic, toc
    http://www.mathworks.com/help/techdoc/ref/tic.html
    tic; any_statements; toc; measures the time it takes the MATLAB software to execute the one or more lines of MATLAB code shown here as any_statements. The tic command starts a stopwatch timer, MATLAB executes the block of statements, and toc stops the timer, displaying the time elapsed in seconds.
    tic; any_statements; tElapsed=toc; makes the same time measurement, but assigns the elapsed time output to a variable, tElapsed. MATLAB does not display the elapsed time unless you omit the terminating semicolon. The value returned by toc is a scalar double that represents the elapsed time in seconds.

IdStatement
    Used to print the value of the variable.

help
    http://www.mathworks.com/help/techdoc/ref/help.html
    t = help('topic') returns the help text for topic as a string, with each line separated by /n, where topic is any allowable argument for help.

clear
    http://www.mathworks.com/help/techdoc/matlab_prog/brh72ex-22.html
    clear removes variables from memory. One way to increase the amount of available memory is to periodically clear variables from memory that you no longer need.

besseli
    http://www.mathworks.com/help/techdoc/ref/besseli.html
    http://math.nist.gov/javanumerics/

norm
    http://www.mathworks.com/help/techdoc/ref/norm.html
    n = norm(A) returns the largest singular value of A.
    n = norm(A,p) returns a different kind of norm, depending on the value of p. inf:
        For matrix A, the infinity norm, or largest row sum of A. max(sum(abs(A'))).
        For vector A, max(abs(A)).
    

fopen
    http://www.mathworks.com/help/techdoc/ref/fopen.html					
fclose
    http://www.mathworks.com/help/techdoc/ref/fclose.html
fread
    http://www.mathworks.com/help/techdoc/ref/fread.html
fprintf
    http://www.mathworks.com/help/techdoc/ref/fprintf.html        
sprintf
    http://www.mathworks.com/help/techdoc/ref/sprintf.html

specification
    http://www.mathworks.com/help/techdoc/ref/specification.html
    http://www.mathworks.com/help/techdoc/ref/syntax.html
    http://www.mathworks.com/help/techdoc/learn_matlab/f4-2525.html
    http://www.mathworks.com/help/techdoc/matlab_prog/f7-58170.html

nargin and nargout
    http://www.mathworks.com/help/techdoc/ref/nargout.html

double
    Convert to double precision
    http://www.mathworks.com/help/techdoc/ref/double.html

switch
    can switch on string also.

Matrix Indexing
    http://www.mathworks.com/help/techdoc/math/f1-85462.html

matrix
    Linear indexing
        http://www.mathworks.com/help/techdoc/math/f1-85462.html
        You can refer to the elements of a MATLAB matrix with a single subscript, A(k). MATLAB stores matrices and arrays not in the shape that they appear when displayed in the MATLAB Command Window, but as a single column of elements. This single column is composed of all of the columns from the matrix, each appended to the last.

    (1:m, n)
        refers to the elements in rows 1 through m of column n of matrix A.

    Nonconsecutive Elements
        To refer to nonconsecutive elements in a matrix, use the colon operator with a step value. The m:3:n in this expression means to make the assignment to every third element in the matrix. Note that this example uses linear indexing
        Here is an example of value-based indexing where array B indexes into elements 1, 3, 6, 7, and 10 of array A. In this case, the numeric values of array B designate the intended elements of A:
        A = 5:5:50
        A =
             5    10    15    20    25    30    35    40    45    50
        B = [1 3 6 7 10];

        A(B)
        ans =
             5    15    30    35    50
        If you index into a vector with another vector, the orientation of the indexed vector is honored for the output:

        A(B')
        ans =

             5    15    30    35    50
        A1 = A'; A1(B)
        ans =

             5
            15
            30
            35
            50
        If you index into a vector with a nonvector, the shape of the indices is honored.:

        C = [1 3 6; 7 9 10];
        A(C)
        ans =

             5    15    30
            35    45    50

    Logical array index
        By using the colon with linear indexing, you can refer to all elements in the entire matrix. This example displays all the elements of matrix A, returning them in a column-wise order:
        A(:)
        ans =
            16
             5
             9
             4
             .
             .
             1
        In this masking type of operation, every true element in the indexing array is treated as a positional index into the array being accessed.

        In the following example, B is a matrix of logical ones and zeros. The position of these elements in B determines which elements of A are designated by the expression A(B):

        A = [1 2 3; 4 5 6; 7 8 9]
        A =
             1     2     3
             4     5     6
             7     8     9

        B = logical([0 1 0; 1 0 1; 0 0 1]);
        B =
             0     1     0
             1     0     1
             0     0     1

        A(B)
        ans =
             4
             2
             6
             9
        The find specification can be useful with logical arrays as it returns the linear indices of nonzero elements in B, and thus helps to interpret A(B):

        find(B)
        ans =
             2
             4
             8
             9

    Indexing on Assignment

        When assigning values from one matrix to another matrix, you can use any of the styles of indexing covered in this section. Matrix assignment statements also have the following requirement.

        In the assignment A(J,K,...) = B(M,N,...), subscripts J, K, M, N, etc. may be scalar, vector, or array, provided that all of the following are true:

        The number of subscripts specified for B, not including trailing subscripts equal to 1, does not exceed ndims(B).

        The number of nonscalar subscripts specified for A equals the number of nonscalar subscripts specified for B. For example, A(5, 1:4, 1, 2) = B(5:8) is valid because both sides of the equation use one nonscalar subscript.

        The order and length of all nonscalar subscripts specified for A matches the order and length of nonscalar subscripts specified for B. For example, A(1:4, 3, 3:9) = B(5:8, 1:7) is valid because both sides of the equation (ignoring the one scalar subscript 3) use a 4-element subscript followed by a 7-element subscript.

Matlab operators
    http://www.mathworks.com/help/techdoc/matlab_prog/f0-40063.html
    
Indexing on Assignment
	http://www.mathworks.com/help/techdoc/math/f1-85462.html#f1-85564
	
=====================================================
-----------------------------------------------------

We need to know these algorithms

We need to have a language to specify the algorithms (We can start with
matlab language and then move to our own). If the grammar is not ideal,
no worries. Just pass the parsing phase.
We can later have our own syntax and compile between the two.
Two points in the domain specific language
    Matrix support and functions
        Direct language support for matrices
        We need to have these functions in our language anyways. (We can start
        with the names that matlab uses).
    Untyped
        The domain experts like untype programming. We infer the types for efficiency.
        We can analyse the ast and compile to a scheduled program.

-----------------------------------------------------
On compilation
    * on matrix
        MatType: has a times method
            NumericType interface
                Matrix<T extends NumericType>
                Double
                Integer
            String
                throws an exception on times method
                We can have an abstract MatType class that has a default implementation for each method.

        This essentially means that we also do the typing at runtime.

        Can we compile to static types?
            We need to infer types. May be possible for local vars.
            But what about specification parameters?
            We need to infer the type according to the operations that they are applied to.

        Can we do this by overloading?
            We need the static type for overloading. No dispatch is done.

    MatrixAssignment
        We compile it to an assignment to a matrix var, then write separate assignments for each element.
        How do we recognize matrix indexing from specification call? If we can recognize that, then we can treat : appropriately.
        In one path, we can find the functions that are defined in the program.
        We can make a list of functions that we recognize and then if the id  is not one of them, we generate a matrix access code.

        Reference can not be a Call. It can be an array indexing.
        We can check if it is an array indexing and generate a write call on it.

-----------------------------------------------------
Grammar
    Some of the commands are written as statements.
    figure(h) defined as a statement but figure is defined as a command.

    size and sort are also method calls that return matrices as the return value.

    transpose of sum does not need to be treated as a whole.
    transpose of call does not need to be treated as a whole.
        If we separate them, we need another level for precedence of transpose. 

    end is an argument not an expression
-----------------------------------------------------
Xtras
    Change the left of MatrixAssignment to Id or Call. No, That's OK.
-----------------------------------------------------




