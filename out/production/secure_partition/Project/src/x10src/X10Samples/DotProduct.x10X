

def dotProduct(a: Array[T](D), b: Array[T](D)): Array[Double](D) = 
	(
		new Array[T]
		(
			[1:D.places], // for each place of D
			(Point) => 
			(
				new Array[T] (
					D | here, // For the subregion of D that is in here 
					          // (that is in this place)  
					(i): Point => a(i)*b(i)
				).sum()
			)
		)
	).sum();

/*
Assume that the input arrays are defined on the region R with distribution D and 
that D distributes R to places P. For each place in P (that contains a part of the
arrays), a sum is computed as follows. In each place, a local array is created
over the subregion of R that D maps to that place. Corresponding elements
of the two input arrays are multiplied locally and put to the local array. A sum is
computed on the resulting local array in each place. An array of size |P| is
created in the calling place to accomodate the sum values resulted from the places.
Finally a sum over this array yields the dot product.
*/
