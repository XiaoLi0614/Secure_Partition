//
// Generated by JTB 1.3.2
//

package jsrc.matlab.syntaxanalysis.visitor;
import jsrc.matlab.syntaxanalysis.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( FunctionHeader() )?
    * f1 -> ( Statement() )*
    * f2 -> <EOF>
    */
   public void visit(File n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> "function"
    * f1 -> [ OutputClause() ]
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( IdentifierList() )?
    * f5 -> ")"
    * f6 -> ( ";" )?
    */
   public void visit(FunctionHeader n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * f0 -> Output()
    * f1 -> "="
    */
   public void visit(OutputClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Identifier()
    *       | MultiOutput()
    */
   public void visit(Output n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "["
    * f1 -> IdentifierList()
    * f2 -> "]"
    */
   public void visit(MultiOutput n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> CommandList()
    *       | ArrayUpdate()
    *       | CallSt()
    *       | AssignmentSt()
    *       | CallAndMultipleAssignmentSt()
    *       | IfSt()
    *       | ForSt()
    *       | WhileSt()
    *       | SwitchSt()
    *       | BreakSt()
    *       | ReturnSt()
    *       | Tic()
    *       | PrintSt()
    *       | PrintlnSt()
    */
   public void visit(Statement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "tic"
    * f1 -> [ ";" ]
    */
   public void visit(Tic n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
Identifier()
    * f0 -> [ Identifier() ]
    */
   public void visit(Command n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Call()
    * f1 -> [ ";" ]
    */
   public void visit(CallSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> [ ";" ]
    */
   public void visit(AssignmentSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> "["
    * f1 -> IdentifierList()
    * f2 -> "]"
    * f3 -> "="
    * f4 -> Call()
    * f5 -> [ ";" ]
    */
   public void visit(CallAndMultipleAssignmentSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> IndexedArray()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> [ ";" ]
    */
   public void visit(ArrayUpdate n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> "if"
    * f1 -> Expression()
    * f2 -> ( Statement() )*
    * f3 -> ( ElseIf() )*
    * f4 -> ( ElseClause() )?
    * f5 -> "end"
    */
   public void visit(IfSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> "elseif"
    * f1 -> Expression()
    * f2 -> ( Statement() )*
    */
   public void visit(ElseIf n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> "else"
    * f1 -> ( Statement() )*
    */
   public void visit(ElseClause n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> "for"
    * f1 -> Identifier()
    * f2 -> "="
    * f3 -> Expression()
    * f4 -> ( Statement() )*
    * f5 -> "end"
    */
   public void visit(ForSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> "while"
    * f1 -> Expression()
    * f2 -> ( Statement() )*
    * f3 -> "end"
    */
   public void visit(WhileSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> "switch"
    * f1 -> Expression()
    * f2 -> ( Case() )*
    * f3 -> "otherwise"
    * f4 -> ( Statement() )*
    * f5 -> "end"
    */
   public void visit(SwitchSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> "case"
    * f1 -> ( StringLiteral() | IntegerLiteral() )
    * f2 -> ( Statement() )*
    */
   public void visit(Case n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> "break"
    * f1 -> ";"
    */
   public void visit(BreakSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> "return"
    * f1 -> ";"
    */
   public void visit(ReturnSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> "print("
    * f1 -> Expression()
    * f2 -> ")"
    * f3 -> ( ";" )?
    */
   public void visit(PrintSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> "println("
    * f1 -> Expression()
    * f2 -> ")"
    * f3 -> ( ";" )?
    */
   public void visit(PrintlnSt n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> ShortCircuitOrExp()
    */
   public void visit(Expression n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ShortCircuitAndExp()
    * f1 -> ( ShortCircuitOrExpRest() )*
    */
   public void visit(ShortCircuitOrExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> "||"
    * f1 -> ShortCircuitAndExp()
    */
   public void visit(ShortCircuitOrExpRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ElementWiseOrExp()
    * f1 -> ( ShortCircuitAndExpRest() )*
    */
   public void visit(ShortCircuitAndExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> "&&"
    * f1 -> ElementWiseOrExp()
    */
   public void visit(ShortCircuitAndExpRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ElementWiseAndExp()
    * f1 -> ( ElementWiseOrExpRest() )*
    */
   public void visit(ElementWiseOrExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> "|"
    * f1 -> ElementWiseAndExp()
    */
   public void visit(ElementWiseOrExpRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> RelationalExp()
    * f1 -> ( ElementWiseAndExpRest() )*
    */
   public void visit(ElementWiseAndExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> "&"
    * f1 -> RelationalExp()
    */
   public void visit(ElementWiseAndExpRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ColonVectorExp()
    * f1 -> ( RelationalExpRest() )?
    */
   public void visit(RelationalExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ( "<" | ">" | "<=" | ">=" | "==" | "~=" )
    * f1 -> ColonVectorExp()
    */
   public void visit(RelationalExpRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Term()
    * f1 -> [ ":" Term() [ ":" Term() ] ]
    */
   public void visit(ColonVectorExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Factor()
    * f1 -> ( TermRest() )*
    */
   public void visit(Term n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ( "+" | "-" )
    * f1 -> Factor()
    */
   public void visit(TermRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> UnaryExp()
    * f1 -> ( FactorRest() )*
    */
   public void visit(Factor n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ( "*" | ".*" | "/" | "./" )
    * f1 -> UnaryExp()
    */
   public void visit(FactorRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> [ "-" | "~" ]
    * f1 -> SuperScriptExp()
    */
   public void visit(UnaryExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> TransposeExp()
    *       | PowerExp()
    */
   public void visit(SuperScriptExp n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> AtomExp()
    * f1 -> "'"
    */
   public void visit(TransposeExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> AtomExp()
    * f1 -> ( PowerExpRest() )*
    */
   public void visit(PowerExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ( ".^" | "^" )
    * f1 -> AtomExp()
    */
   public void visit(PowerExpRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> CallOrIndexedArray()
    *       | ParExp()
    *       | MatrixConstructor()
    *       | IntegerLiteral()
    *       | FloatingPointLiteral()
    *       | StringLiteral()
    *       | Identifier()
    *       | "toc"
    *       | ":"
    *       | "end"
    */
   public void visit(AtomExp n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public void visit(ParExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> CallOrIndexedArray()
    */
   public void visit(Call n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> CallOrIndexedArray()
    */
   public void visit(IndexedArray n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "("
    * f2 -> ( ExpressionList() )?
    * f3 -> ")"
    */
   public void visit(CallOrIndexedArray n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> "["
    * f1 -> ( ExpressionSeqs() "]" | "]" )
    */
   public void visit(MatrixConstructor n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <FLOATING_POINT_LITERAL>
    */
   public void visit(FloatingPointLiteral n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <STRING_LITERAL>
    */
   public void visit(StringLiteral n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public void visit(IdentifierList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public void visit(IdentifierRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Command()
    * f1 -> ( CommandsRest() )*
    * f2 -> [ ";" ]
    */
   public void visit(CommandList n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> ","
    * f1 -> Command()
    */
   public void visit(CommandsRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public void visit(ExpressionList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public void visit(ExpressionRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ( "," )? Expression() )*
    */
   public void visit(ExpressionSeq n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ExpressionSeq()
    * f1 -> ( ExpressionSeqsRest() )*
    */
   public void visit(ExpressionSeqs n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ";"
    * f1 -> ExpressionSeq()
    */
   public void visit(ExpressionSeqsRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

}
