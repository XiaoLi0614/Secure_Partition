/* Generated By:JavaCC: Do not edit this line. MatlabParser.java */
package jsrc.matlab.syntaxanalysis.parser;

import jsrc.matlab.syntaxanalysis.syntaxtree.*;
import java.util.Vector;


public class MatlabParser implements MatlabParserConstants {

  static final public File File() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   FunctionHeader n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;
    if (jj_2_1(2147483647)) {
      n1 = FunctionHeader();
        n0.addNode(n1);
    } else {
      ;
    }
    label_1:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_1;
      }
      n3 = Statement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(0);
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new File(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionHeader FunctionHeader() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   OutputClause n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   IdentifierList n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(FUNCTION);
                   n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_3(2147483647)) {
      n3 = OutputClause();
        n2.addNode(n3);
    } else {
      ;
    }
    n4 = Identifier();
    n6 = jj_consume_token(36);
            n5 = JTBToolkit.makeNodeToken(n6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n8 = IdentifierList();
        n7.addNode(n8);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n10 = jj_consume_token(37);
             n9 = JTBToolkit.makeNodeToken(n10);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n13 = jj_consume_token(38);
                n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
     {if (true) return new FunctionHeader(n0,n2,n4,n5,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public OutputClause OutputClause() throws ParseException {
   Output n0;
   NodeToken n1;
   Token n2;
    n0 = Output();
    n2 = jj_consume_token(39);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new OutputClause(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Output Output() throws ParseException {
   NodeChoice n0;
   Identifier n1;
   MultiOutput n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = Identifier();
        n0 = new NodeChoice(n1, 0);
      break;
    case 40:
      n2 = MultiOutput();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Output(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public MultiOutput MultiOutput() throws ParseException {
   NodeToken n0;
   Token n1;
   IdentifierList n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(40);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = IdentifierList();
    n4 = jj_consume_token(41);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new MultiOutput(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   CommandList n1;
   ArrayUpdate n2;
   CallSt n3;
   AssignmentSt n4;
   CallAndMultipleAssignmentSt n5;
   IfSt n6;
   ForSt n7;
   WhileSt n8;
   SwitchSt n9;
   BreakSt n10;
   ReturnSt n11;
   Tic n12;
   PrintSt n13;
   PrintlnSt n14;
    if (jj_2_4(2147483647)) {
      n1 = CommandList();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_5(2147483647)) {
      n2 = ArrayUpdate();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_6(2147483647)) {
      n3 = CallSt();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_7(2147483647)) {
      n4 = AssignmentSt();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_8(2147483647)) {
      n5 = CallAndMultipleAssignmentSt();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_9(2147483647)) {
      n6 = IfSt();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_10(2147483647)) {
      n7 = ForSt();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_11(2147483647)) {
      n8 = WhileSt();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_12(2147483647)) {
      n9 = SwitchSt();
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_13(2147483647)) {
      n10 = BreakSt();
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_14(2147483647)) {
      n11 = ReturnSt();
        n0 = new NodeChoice(n11, 10);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIC:
        n12 = Tic();
        n0 = new NodeChoice(n12, 11);
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_15(2147483647)) {
          n13 = PrintSt();
        n0 = new NodeChoice(n13, 12);
        } else if (jj_2_16(2147483647)) {
          n14 = PrintlnSt();
        n0 = new NodeChoice(n14, 13);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Tic Tic() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(TIC);
              n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n4 = jj_consume_token(38);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
     {if (true) return new Tic(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Command Command() throws ParseException {
   Identifier n0;
   NodeOptional n1 = new NodeOptional();
   Identifier n2;
    if (!getToken(2).toString().equals("=") && !getToken(2).toString().equals("(")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n0 = Identifier();
    if (jj_2_17(2147483647) && (!getToken(2).toString().equals("=") && !getToken(2).toString().equals("("))) {
      n2 = Identifier();
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new Command(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public CallSt CallSt() throws ParseException {
   Call n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
    n0 = Call();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n3 = jj_consume_token(38);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
     {if (true) return new CallSt(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentSt AssignmentSt() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
    n0 = Identifier();
    n2 = jj_consume_token(39);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n6 = jj_consume_token(38);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
     {if (true) return new AssignmentSt(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public CallAndMultipleAssignmentSt CallAndMultipleAssignmentSt() throws ParseException {
   NodeToken n0;
   Token n1;
   IdentifierList n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Call n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(40);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = IdentifierList();
    n4 = jj_consume_token(41);
            n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(39);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Call();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n10 = jj_consume_token(38);
                n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
     {if (true) return new CallAndMultipleAssignmentSt(n0,n2,n3,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayUpdate ArrayUpdate() throws ParseException {
   IndexedArray n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
    n0 = IndexedArray();
    n2 = jj_consume_token(39);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n6 = jj_consume_token(38);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
     {if (true) return new ArrayUpdate(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public IfSt IfSt() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Statement n4;
   NodeListOptional n5 = new NodeListOptional();
   ElseIf n6;
   NodeOptional n7 = new NodeOptional();
   ElseClause n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    label_2:
    while (true) {
      if (jj_2_18(2147483647)) {
        ;
      } else {
        break label_2;
      }
      n4 = Statement();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      n6 = ElseIf();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      n8 = ElseClause();
        n7.addNode(n8);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    n10 = jj_consume_token(END);
               n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new IfSt(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public ElseIf ElseIf() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Statement n4;
    n1 = jj_consume_token(ELSEIF);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    label_4:
    while (true) {
      if (jj_2_19(2147483647)) {
        ;
      } else {
        break label_4;
      }
      n4 = Statement();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new ElseIf(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ElseClause ElseClause() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
    n1 = jj_consume_token(ELSE);
               n0 = JTBToolkit.makeNodeToken(n1);
    label_5:
    while (true) {
      if (jj_2_20(2147483647)) {
        ;
      } else {
        break label_5;
      }
      n3 = Statement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new ElseClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ForSt ForSt() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeListOptional n6 = new NodeListOptional();
   Statement n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(39);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Expression();
    label_6:
    while (true) {
      if (jj_2_21(2147483647)) {
        ;
      } else {
        break label_6;
      }
      n7 = Statement();
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    n9 = jj_consume_token(END);
              n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new ForSt(n0,n2,n3,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileSt WhileSt() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Statement n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    label_7:
    while (true) {
      if (jj_2_22(2147483647)) {
        ;
      } else {
        break label_7;
      }
      n4 = Statement();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n6 = jj_consume_token(END);
              n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new WhileSt(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchSt SwitchSt() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Case n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   Statement n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(SWITCH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      n4 = Case();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n6 = jj_consume_token(OTHERWISE);
                    n5 = JTBToolkit.makeNodeToken(n6);
    label_9:
    while (true) {
      if (jj_2_23(2147483647)) {
        ;
      } else {
        break label_9;
      }
      n8 = Statement();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    n10 = jj_consume_token(END);
               n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new SwitchSt(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public Case Case() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   StringLiteral n3;
   IntegerLiteral n4;
   NodeListOptional n5 = new NodeListOptional();
   Statement n6;
    n1 = jj_consume_token(CASE);
               n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      n3 = StringLiteral();
           n2 = new NodeChoice(n3, 0);
      break;
    case INTEGER_LITERAL:
      n4 = IntegerLiteral();
           n2 = new NodeChoice(n4, 1);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_10:
    while (true) {
      if (jj_2_24(2147483647)) {
        ;
      } else {
        break label_10;
      }
      n6 = Statement();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
     {if (true) return new Case(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public BreakSt BreakSt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(BREAK);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(38);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new BreakSt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnSt ReturnSt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(38);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ReturnSt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintSt PrintSt() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(42);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(37);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n7 = jj_consume_token(38);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
     {if (true) return new PrintSt(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintlnSt PrintlnSt() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(43);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(37);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n7 = jj_consume_token(38);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
     {if (true) return new PrintlnSt(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   ShortCircuitOrExp n0;
    n0 = ShortCircuitOrExp();
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ShortCircuitOrExp ShortCircuitOrExp() throws ParseException {
   ShortCircuitAndExp n0;
   NodeListOptional n1 = new NodeListOptional();
   ShortCircuitOrExpRest n2;
    n0 = ShortCircuitAndExp();
    label_11:
    while (true) {
      if (jj_2_25(2147483647)) {
        ;
      } else {
        break label_11;
      }
      n2 = ShortCircuitOrExpRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ShortCircuitOrExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ShortCircuitOrExpRest ShortCircuitOrExpRest() throws ParseException {
   NodeToken n0;
   Token n1;
   ShortCircuitAndExp n2;
    n1 = jj_consume_token(44);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ShortCircuitAndExp();
     {if (true) return new ShortCircuitOrExpRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ShortCircuitAndExp ShortCircuitAndExp() throws ParseException {
   ElementWiseOrExp n0;
   NodeListOptional n1 = new NodeListOptional();
   ShortCircuitAndExpRest n2;
    n0 = ElementWiseOrExp();
    label_12:
    while (true) {
      if (jj_2_26(2147483647)) {
        ;
      } else {
        break label_12;
      }
      n2 = ShortCircuitAndExpRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ShortCircuitAndExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ShortCircuitAndExpRest ShortCircuitAndExpRest() throws ParseException {
   NodeToken n0;
   Token n1;
   ElementWiseOrExp n2;
    n1 = jj_consume_token(45);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ElementWiseOrExp();
     {if (true) return new ShortCircuitAndExpRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ElementWiseOrExp ElementWiseOrExp() throws ParseException {
   ElementWiseAndExp n0;
   NodeListOptional n1 = new NodeListOptional();
   ElementWiseOrExpRest n2;
    n0 = ElementWiseAndExp();
    label_13:
    while (true) {
      if (jj_2_27(2147483647)) {
        ;
      } else {
        break label_13;
      }
      n2 = ElementWiseOrExpRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ElementWiseOrExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ElementWiseOrExpRest ElementWiseOrExpRest() throws ParseException {
   NodeToken n0;
   Token n1;
   ElementWiseAndExp n2;
    n1 = jj_consume_token(46);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ElementWiseAndExp();
     {if (true) return new ElementWiseOrExpRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ElementWiseAndExp ElementWiseAndExp() throws ParseException {
   RelationalExp n0;
   NodeListOptional n1 = new NodeListOptional();
   ElementWiseAndExpRest n2;
    n0 = RelationalExp();
    label_14:
    while (true) {
      if (jj_2_28(2147483647)) {
        ;
      } else {
        break label_14;
      }
      n2 = ElementWiseAndExpRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ElementWiseAndExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ElementWiseAndExpRest ElementWiseAndExpRest() throws ParseException {
   NodeToken n0;
   Token n1;
   RelationalExp n2;
    n1 = jj_consume_token(47);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RelationalExp();
     {if (true) return new ElementWiseAndExpRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExp RelationalExp() throws ParseException {
   ColonVectorExp n0;
   NodeOptional n1 = new NodeOptional();
   RelationalExpRest n2;
    n0 = ColonVectorExp();
    if (jj_2_29(2147483647)) {
      n2 = RelationalExpRest();
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new RelationalExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpRest RelationalExpRest() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ColonVectorExp n13;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      n2 = jj_consume_token(48);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case 49:
      n4 = jj_consume_token(49);
                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case 50:
      n6 = jj_consume_token(50);
                   n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case 51:
      n8 = jj_consume_token(51);
                   n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case 52:
      n10 = jj_consume_token(52);
                    n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case 53:
      n12 = jj_consume_token(53);
                    n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n13 = ColonVectorExp();
     {if (true) return new RelationalExpRest(n0,n13);}
    throw new Error("Missing return statement in function");
  }

  static final public ColonVectorExp ColonVectorExp() throws ParseException {
   Term n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Term n5;
   NodeOptional n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Term n10;
    n0 = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
        n6 = new NodeOptional();
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(54);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Term();
        n2.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
           n7 = new NodeSequence(2);
        n9 = jj_consume_token(54);
                  n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        n10 = Term();
           n7.addNode(n10);
           n6.addNode(n7);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
        n2.addNode(n6);
        n1.addNode(n2);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
     {if (true) return new ColonVectorExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Term Term() throws ParseException {
   Factor n0;
   NodeListOptional n1 = new NodeListOptional();
   TermRest n2;
    n0 = Factor();
    label_15:
    while (true) {
      if (jj_2_30(2147483647)) {
        ;
      } else {
        break label_15;
      }
      n2 = TermRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Term(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public TermRest TermRest() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   Factor n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      n2 = jj_consume_token(55);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case 56:
      n4 = jj_consume_token(56);
                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n5 = Factor();
     {if (true) return new TermRest(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Factor Factor() throws ParseException {
   UnaryExp n0;
   NodeListOptional n1 = new NodeListOptional();
   FactorRest n2;
    n0 = UnaryExp();
    label_16:
    while (true) {
      if (jj_2_31(2147483647)) {
        ;
      } else {
        break label_16;
      }
      n2 = FactorRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Factor(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public FactorRest FactorRest() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   UnaryExp n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      n2 = jj_consume_token(57);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case 58:
      n4 = jj_consume_token(58);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case 59:
      n6 = jj_consume_token(59);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case 60:
      n8 = jj_consume_token(60);
                   n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = UnaryExp();
     {if (true) return new FactorRest(n0,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExp UnaryExp() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   SuperScriptExp n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
    case 61:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        n3 = jj_consume_token(56);
                  n2 = JTBToolkit.makeNodeToken(n3);
           n1 = new NodeChoice(n2, 0);
        break;
      case 61:
        n5 = jj_consume_token(61);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n1 = new NodeChoice(n4, 1);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    n6 = SuperScriptExp();
     {if (true) return new UnaryExp(n0,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public SuperScriptExp SuperScriptExp() throws ParseException {
   NodeChoice n0;
   TransposeExp n1;
   PowerExp n2;
    if (jj_2_32(2147483647)) {
      n1 = TransposeExp();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END:
      case TOC:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 36:
      case 40:
      case 54:
        n2 = PowerExp();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new SuperScriptExp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TransposeExp TransposeExp() throws ParseException {
   AtomExp n0;
   NodeToken n1;
   Token n2;
    n0 = AtomExp();
    n2 = jj_consume_token(62);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new TransposeExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PowerExp PowerExp() throws ParseException {
   AtomExp n0;
   NodeListOptional n1 = new NodeListOptional();
   PowerExpRest n2;
    n0 = AtomExp();
    label_17:
    while (true) {
      if (jj_2_33(2147483647)) {
        ;
      } else {
        break label_17;
      }
      n2 = PowerExpRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new PowerExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PowerExpRest PowerExpRest() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   AtomExp n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      n2 = jj_consume_token(63);
                   n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case 64:
      n4 = jj_consume_token(64);
                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n5 = AtomExp();
     {if (true) return new PowerExpRest(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public AtomExp AtomExp() throws ParseException {
   NodeChoice n0;
   CallOrIndexedArray n1;
   ParExp n2;
   MatrixConstructor n3;
   IntegerLiteral n4;
   FloatingPointLiteral n5;
   StringLiteral n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    if (jj_2_34(2147483647)) {
      n1 = CallOrIndexedArray();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        n2 = ParExp();
        n0 = new NodeChoice(n2, 1);
        break;
      case 40:
        n3 = MatrixConstructor();
        n0 = new NodeChoice(n3, 2);
        break;
      case INTEGER_LITERAL:
        n4 = IntegerLiteral();
        n0 = new NodeChoice(n4, 3);
        break;
      case FLOATING_POINT_LITERAL:
        n5 = FloatingPointLiteral();
        n0 = new NodeChoice(n5, 4);
        break;
      case STRING_LITERAL:
        n6 = StringLiteral();
        n0 = new NodeChoice(n6, 5);
        break;
      case IDENTIFIER:
        n7 = Identifier();
        n0 = new NodeChoice(n7, 6);
        break;
      case TOC:
        n9 = jj_consume_token(TOC);
                 n8 = JTBToolkit.makeNodeToken(n9);
        n0 = new NodeChoice(n8, 7);
        break;
      case 54:
        n11 = jj_consume_token(54);
                n10 = JTBToolkit.makeNodeToken(n11);
        n0 = new NodeChoice(n10, 8);
        break;
      case END:
        n13 = jj_consume_token(END);
                  n12 = JTBToolkit.makeNodeToken(n13);
        n0 = new NodeChoice(n12, 9);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new AtomExp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ParExp ParExp() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(36);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(37);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ParExp(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Call Call() throws ParseException {
   CallOrIndexedArray n0;
    n0 = CallOrIndexedArray();
     {if (true) return new Call(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IndexedArray IndexedArray() throws ParseException {
   CallOrIndexedArray n0;
    n0 = CallOrIndexedArray();
     {if (true) return new IndexedArray(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public CallOrIndexedArray CallOrIndexedArray() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   ExpressionList n4;
   NodeToken n5;
   Token n6;
    n0 = Identifier();
    n2 = jj_consume_token(36);
            n1 = JTBToolkit.makeNodeToken(n2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
    case TOC:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 36:
    case 40:
    case 54:
    case 56:
    case 61:
      n4 = ExpressionList();
        n3.addNode(n4);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    n6 = jj_consume_token(37);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new CallOrIndexedArray(n0,n1,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public MatrixConstructor MatrixConstructor() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   ExpressionSeqs n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(40);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
    case TOC:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 36:
    case 40:
    case 54:
    case 56:
    case 61:
           n3 = new NodeSequence(2);
      n4 = ExpressionSeqs();
           n3.addNode(n4);
      n6 = jj_consume_token(41);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n3.addNode(n5);
           n2 = new NodeChoice(n3, 0);
      break;
    case 41:
      n8 = jj_consume_token(41);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n2 = new NodeChoice(n7, 1);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MatrixConstructor(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatingPointLiteral FloatingPointLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FLOATING_POINT_LITERAL);
                                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatingPointLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringLiteral StringLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierList IdentifierList() throws ParseException {
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   IdentifierRest n2;
    n0 = Identifier();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_18;
      }
      n2 = IdentifierRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new IdentifierList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierRest IdentifierRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(65);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new IdentifierRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CommandList CommandList() throws ParseException {
   Command n0;
   NodeListOptional n1 = new NodeListOptional();
   CommandsRest n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
    n0 = Command();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_19;
      }
      n2 = CommandsRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      n5 = jj_consume_token(38);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
     {if (true) return new CommandList(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public CommandsRest CommandsRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Command n2;
    n1 = jj_consume_token(65);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Command();
     {if (true) return new CommandsRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionList ExpressionList() throws ParseException {
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpressionRest n2;
    n0 = Expression();
    label_20:
    while (true) {
      if (jj_2_35(2147483647)) {
        ;
      } else {
        break label_20;
      }
      n2 = ExpressionRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionRest ExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
    n1 = jj_consume_token(65);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
     {if (true) return new ExpressionRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionSeq ExpressionSeq() throws ParseException {
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   Expression n6;
    n0 = Expression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END:
      case TOC:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 36:
      case 40:
      case 54:
      case 56:
      case 61:
      case 65:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_21;
      }
        n3 = new NodeOptional();
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        n5 = jj_consume_token(65);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
        n2.addNode(n3);
      n6 = Expression();
        n2.addNode(n6);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpressionSeq(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionSeqs ExpressionSeqs() throws ParseException {
   ExpressionSeq n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpressionSeqsRest n2;
    n0 = ExpressionSeq();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_22;
      }
      n2 = ExpressionSeqsRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpressionSeqs(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionSeqsRest ExpressionSeqsRest() throws ParseException {
   NodeToken n0;
   Token n1;
   ExpressionSeq n2;
    n1 = jj_consume_token(38);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ExpressionSeq();
     {if (true) return new ExpressionSeqsRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_3R_47()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_47()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_39()) return true;
    if (jj_scan_token(39)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_3R_166()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_3R_165()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_127()) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    return false;
  }

  static private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(37)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    jj_lookingAhead = true;
    jj_semLA = !getToken(2).toString().equals("=") && !getToken(2).toString().equals("(");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_124()) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_scan_token(TIC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(37)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_138()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_3R_143()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_3R_145()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_156()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_131()) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(OTHERWISE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_136()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_3R_167()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_136()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_148()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_scan_token(40)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_3R_146()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_39()) return true;
    if (jj_scan_token(36)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(39)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    if (jj_scan_token(36)) return true;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(47)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(TOC)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_145()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_144()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_143()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_129()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_141()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_scan_token(38)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(39)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_3R_172()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MatlabParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x2000,0x1000,0x800,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x41804000,0x0,0x41804000,0x41804000,0x41804000,0x0,0x0,0x0,0x41804000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x40,0x102,0x0,0x40,0x40,0x40,0x40,0x40,0x0,0x0,0x0,0x1,0x40,0x40,0x3f0000,0x400000,0x400000,0x1800000,0x1e000000,0x21000000,0x21000000,0x400113,0x80000000,0x400113,0x21400113,0x21400313,0x0,0x0,0x40,0x21400113,0x0,0x40,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x2,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[35];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MatlabParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MatlabParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MatlabParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MatlabParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MatlabParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MatlabParser(MatlabParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MatlabParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
