TOKENS

<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| "\f"
}


<DEFAULT> SPECIAL : {
<CONTINUATION: "...">
| <SINGLE_LINE_COMMENT: "%" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}


<DEFAULT> TOKEN : {
<ABS: "abs">
| <ANY: "any">
| <AXIS: "axis">
| <BESSELI: "besseli">
| <BREAK: "break">
| <CASE: "case">
| <CLC: "clc">
| <CLEAR: "clear">
| <CLOSEALL: "close all">
| <COLORMAP: "colormap">
| <DOUBLE: "double">
| <DRAWNOW: "drawnow">
| <ELSE: "else">
| <ELSEIF: "elseif">
| <END: "end">
| <ERROR: "error">
| <ETIME: "etime">
| <FIND: "find">
| <FCLOSE: "fclose">
| <FIGURE: "figure">
| <FOPEN: "fopen">
| <FOR: "for">
| <FPRINTF: "fprintf">
| <FREAD: "fread">
| <FULL: "full">
| <FUNCTION: "specification">
| <GRAY: "gray">
| <HELP: "help">
| <HOT: "hot">
| <IF: "if">
| <IMAGE: "image">
| <IMAGESC: "imagesc">
| <IMREAD: "imread">
| <ISFINITE: "isfinite">
| <ISREAL: "isreal">
| <IMSHOW: "imshow">
| <LENGTH: "length">
| <LINKAXES: "linkaxes">
| <LOAD: "load">
| <LOG10: "log10">
| <LOWER: "lower">
| <MAT2STR: "mat2str">
| <MAX: "max">
| <MEAN: "mean">
| <MIN: "min">
| <MOD: "mod">
| <NDIMS: "ndims">
| <NORM: "norm">
| <ONES: "ones">
| <OTHERWISE: "otherwise">
| <PHANTOM: "phantom">
| <PERMUTE: "permute">
| <RANDN: "randn">
| <RANDPERM: "randperm">
| <RESHAPE: "reshape">
| <RETURN: "return">
| <ROUND: "round">
| <SHG: "shg">
| <SIZE: "size">
| <SORT: "sort">
| <SPRINTF: "sprintf">
| <SQRT: "sqrt">
| <STR2DOUBLE: "str2double">
| <SUBPLOT: "subplot">
| <SUM: "sum">
| <SWITCH: "switch">
| <TEXT: "text">
| <TIC: "tic">
| <TITLE: "title">
| <TOC: "toc">
| <UNION: "union">
| <WHILE: "while">
| <XLABEL: "xlabel">
| <YLABEL: "ylabel">
| <ZEROS: "zeros">
}


<DEFAULT> TOKEN : {
<INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* | "0">
| <POINT_LITERAL: <DECIMAL_LITERAL> ["p","P"] | <HEX_LITERAL> ["p","P"] | <OCTAL_LITERAL> ["p","P"]>
| <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
| <HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
| <LONG_LITERAL: <INTEGER_LITERAL> "L" | <HEX_LITERAL> "L">
| <#OCTAL_LITERAL: "0" (["0"-"7"])*>
| <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
| <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
| <STRING_LITERAL: "\'" (~["\"","\'","\\","\n","\r"] | "\\infty" | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\'">
}


<DEFAULT> TOKEN : {
<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z","\u00c0"-"\u00d6","\u00d8"-"\u00f6","\u00f8"-"\u00ff","\u0100"-"\u1fff","\u3040"-"\u318f","\u3300"-"\u337f","\u3400"-"\u3d2d","\u4e00"-"\u9fff","\uf900"-"\ufaff"]>
| <#DIGIT: ["0"-"9","\u0660"-"\u0669","\u06f0"-"\u06f9","\u0966"-"\u096f","\u09e6"-"\u09ef","\u0a66"-"\u0a6f","\u0ae6"-"\u0aef","\u0b66"-"\u0b6f","\u0be7"-"\u0bef","\u0c66"-"\u0c6f","\u0ce6"-"\u0cef","\u0d66"-"\u0d6f","\u0e50"-"\u0e59","\u0ed0"-"\u0ed9","\u1040"-"\u1049"]>
}


NON-TERMINALS

File	::=	( FunctionHeader )? ( Statement )* <EOF>
FunctionHeader	::=	"specification" ( OutputClause )? Identifier "(" ( IdentifierList )? ")" ( ";" )?
OutputClause	::=	Output "="
Output	::=	BracketedIdentifier
|	Identifier
BracketedIdentifier	::=	"[" Identifier "]"
IdentifierList	::=	Identifier ( IdentifierRest )*
IdentifierRest	::=	"," Identifier
Statement	::=	Command
|	Assignment
|	VectorUpdate
|	MatrixUpdate
|	CallStatement
|	IdentifierStatement
|	BreakStatement
|	ForStatement
|	IfStatement
|	MatrixAssignment
|	MatrixAssignmentSize
|	MatrixAssignmentSort
|	ReturnStatement
|	SwitchStatement
|	WhileStatement
Command	::=	AxisImage
|	Axis
|	Clc
|	Clear
|	Closeall
|	ColormapGray
|	ColormapHot
|	Drawnow
|	ErrorCommand
|	Fclose
|	FigureWithArgument
|	Figure
|	Fprintf
|	Load
|	Help
|	Image
|	Imagesc
|	Imshow
|	Linkaxes
|	Shg
|	SubplotCommand
|	Tic
|	Title
|	Toc
|	Xlabel
|	Ylabel
AxisImage	::=	"axis" "image"
Axis	::=	"axis" Identifier
Clc	::=	"clc"
Clear	::=	"clear" ","
Closeall	::=	"close all" ","
ColormapGray	::=	"colormap" "(" "gray" "(" IntegerLiteral ")" ")" ( ";" )?
ColormapHot	::=	"colormap" "(" "hot" "(" IntegerLiteral ")" ")" ( ";" )?
Drawnow	::=	"drawnow" ";"
ErrorCommand	::=	"error" "(" Argument ")" ( ";" )?
Fclose	::=	"fclose" "(" Argument ")" ( ";" )?
FigureWithArgument	::=	"figure" "(" Argument ")" ( ";" )?
Figure	::=	"figure" ( ";" )?
Fprintf	::=	"fprintf" "(" ArgumentList ")" ( ";" )?
Load	::=	"load" "(" StringLiteral "," StringLiteral ")" ( ";" )?
Help	::=	"help" "(" Argument ")" ( ";" )?
Image	::=	"image" "(" Argument ")" ( ";" )?
Imagesc	::=	"imagesc" "(" Argument ")" ( ";" )?
Imshow	::=	"imshow" "(" Argument "," Argument ")" ( ";" )?
Linkaxes	::=	"linkaxes" "(" Argument "," Argument ")" ( ";" )?
Shg	::=	"shg" ";"
SubplotCommand	::=	"subplot" "(" Argument "," Argument "," Argument ")" ( ";" )?
Tic	::=	"tic"
Title	::=	"title" "(" Argument ")" ( ";" )?
Toc	::=	"toc"
Xlabel	::=	"xlabel" Identifier
Ylabel	::=	"ylabel" Identifier
Assignment	::=	Identifier "=" Expression ( ";" )?
VectorUpdate	::=	Identifier "(" Argument ")" "=" Expression ( ";" )?
MatrixUpdate	::=	Identifier "(" Argument "," Argument ")" "=" Expression ( ";" )?
CallStatement	::=	Call ";"
IdentifierStatement	::=	Identifier ( ";" )?
BreakStatement	::=	"break" ";"
ForStatement	::=	"for" Identifier "=" Expression ( Statement )* "end"
IfStatement	::=	"if" Expression ( Statement )* ( ElseIf )* ( ElseClause )? "end"
ElseIf	::=	"elseif" Expression ( Statement )*
ElseClause	::=	"else" ( Statement )*
MatrixAssignment	::=	"[" Identifier "]" "=" Call ( ";" )?
MatrixAssignmentSize	::=	"[" Identifier "," Identifier "]" "=" "size" "(" Argument ")" ( ";" )?
MatrixAssignmentSort	::=	"[" Identifier "," Identifier "]" "=" "sort" "(" Argument "," Argument ")" ( ";" )?
ReturnStatement	::=	"return" ";"
SwitchStatement	::=	"switch" Expression ( Case )* "otherwise" ( Statement )* "end"
Case	::=	"case" StringLiteral ( Statement )*
WhileStatement	::=	"while" Expression ( Statement )* "end"
Expression	::=	OrOrExpression
OrOrExpression	::=	ExclusiveAndExpression ( OrOrExpressionRest )*
OrOrExpressionRest	::=	"||" ExclusiveAndExpression
ExclusiveAndExpression	::=	InclusiveOrExpression ( ExclusiveAndExpressionRest )*
ExclusiveAndExpressionRest	::=	"&&" InclusiveOrExpression
InclusiveOrExpression	::=	ExclusiveOrExpression ( InclusiveOrExpressionRest )*
InclusiveOrExpressionRest	::=	"|" ExclusiveOrExpression
ExclusiveOrExpression	::=	AndExpression ( ExclusiveOrExpressionRest )*
ExclusiveOrExpressionRest	::=	"^" AndExpression
AndExpression	::=	EqualityExpression ( AndExpressionRest )*
AndExpressionRest	::=	"&" EqualityExpression
EqualityExpression	::=	RelationalExpression ( EqualityExpressionRest )?
EqualityExpressionRest	::=	EqualsExpression
|	NonEqualsExpression
EqualsExpression	::=	"==" RelationalExpression
NonEqualsExpression	::=	"~=" RelationalExpression
RelationalExpression	::=	AdditiveExpression ( RelationalExpressionRest )?
RelationalExpressionRest	::=	LessThanExpression
|	GreaterThanExpression
|	LessThanEqualExpression
|	GreaterThanEqualExpression
LessThanExpression	::=	"<" AdditiveExpression
GreaterThanExpression	::=	">" AdditiveExpression
LessThanEqualExpression	::=	"<=" AdditiveExpression
GreaterThanEqualExpression	::=	">=" AdditiveExpression
AdditiveExpression	::=	Term ( AdditiveExpressionRest )*
AdditiveExpressionRest	::=	Plus
|	Minus
Plus	::=	"+" Term
Minus	::=	"-" Term
Term	::=	Factor ( TermRest )*
TermRest	::=	Times
|	DotTimes
|	Divide
|	DotDivide
|	Exponent
|	ColonExpression
Times	::=	"*" Factor
DotTimes	::=	".*" Factor
Divide	::=	"/" Factor
DotDivide	::=	"./" Factor
Exponent	::=	".^" Factor
ColonExpression	::=	":" Factor
Factor	::=	Transpose
|	TransposeSum
|	TransposeCall
|	Call
|	BracketedExpression
|	UnaryMinusExpression
|	Not
|	Matrix
|	IntegerLiteral
|	FloatingPointLiteral
|	StringLiteral
|	End
|	Identifier
Call	::=	LibCall
|	FunCallorArrayAccess
LibCall	::=	Abs
|	Any
|	Besseli
|	DoubleCall
|	Etime
|	Find
|	Fopen
|	Fread
|	Full
|	Imread
|	Isfinite
|	Isreal
|	Length
|	Log10
|	Lower
|	Mat2str
|	Max1
|	Max2
|	Mean1
|	Mean2
|	Min
|	Mod
|	Ndims
|	Norm1
|	Norm2
|	Ones
|	Permute
|	Phantom
|	Randn1
|	Randn2
|	Randperm
|	Reshape2
|	Reshape3
|	Round
|	Size1
|	Size2
|	Sprintf
|	Sqrt
|	Str2double
|	Subplot
|	Sum1
|	Sum2
|	Union
|	Zeros
Abs	::=	"abs" "(" Argument ")"
Any	::=	"any" "(" Argument ")"
Besseli	::=	"besseli" "(" Argument "," Argument "," Argument ")"
DoubleCall	::=	"double" "(" Argument ")"
Etime	::=	"etime" "(" Argument "," Argument ")"
Find	::=	"find" "(" Argument ")"
Fopen	::=	"fopen" "(" StringLiteral "," StringLiteral ")"
Fread	::=	"fread" "(" Argument "," Argument "," Argument "," Argument "," Argument ")"
Full	::=	"full" "(" Argument ")"
Imread	::=	"imread" "(" StringLiteral ")"
Isfinite	::=	"isfinite" "(" Argument ")"
Isreal	::=	"isreal" "(" Argument ")"
Length	::=	"length" "(" Argument ")"
Log10	::=	"log10" "(" Argument ")"
Lower	::=	"lower" "(" Argument ")"
Mat2str	::=	"mat2str" "(" Argument ")"
Max1	::=	"max" "(" Argument ")"
Max2	::=	"max" "(" Argument "," Argument ")"
Mean1	::=	"mean" "(" Argument ")"
Mean2	::=	"mean" "(" Argument "," Argument ")"
Min	::=	"min" "(" Argument "," Argument ")"
Mod	::=	"mod" "(" Argument "," Argument ")"
Ndims	::=	"ndims" "(" Argument ")"
Norm1	::=	"norm" "(" Argument ")"
Norm2	::=	"norm" "(" Argument "," Argument ")"
Ones	::=	"ones" "(" Argument "," Argument ")"
Permute	::=	"permute" "(" Argument "," Argument ")"
Phantom	::=	"phantom" "(" Argument ")"
Randn1	::=	"randn" "(" Argument ")"
Randn2	::=	"randn" "(" Argument "," Argument ")"
Randperm	::=	"randperm" "(" Argument ")"
Reshape2	::=	"reshape" "(" Argument "," Argument ")"
Reshape3	::=	"reshape" "(" Argument "," Argument "," Argument ")"
Round	::=	"round" "(" Argument ")"
Size1	::=	"size" "(" Argument ")"
Size2	::=	"size" "(" Argument "," Argument ")"
Sprintf	::=	"sprintf" "(" ArgumentList ")"
Sqrt	::=	"sqrt" "(" Argument ")"
Str2double	::=	"str2double" "(" Argument ")"
Subplot	::=	"subplot" "(" Argument "," Argument "," Argument ")"
Sum1	::=	"sum" "(" Argument ")"
Sum2	::=	"sum" "(" Argument "," Argument ")"
Union	::=	"union" "(" Argument "," Argument ")"
Zeros	::=	"zeros" "(" Argument "," Argument ")"
FunCallorArrayAccess	::=	Identifier "(" ( ArgumentList )? ")"
ArgumentList	::=	Argument ( ArgumentRest )*
ArgumentRest	::=	"," Argument
Argument	::=	Colon
|	Expression
Colon	::=	":"
End	::=	"end"
Transpose	::=	Identifier "\'"
TransposeSum	::=	"sum" "(" Argument ")" "\'"
TransposeCall	::=	Identifier "(" Argument ")" "\'"
BracketedExpression	::=	"(" Expression ")"
UnaryMinusExpression	::=	"-" Expression
Not	::=	"~" Factor
Matrix	::=	"[" ( ExpressionList )? "]"
ExpressionList	::=	Expression ( ExpressionRest )*
ExpressionRest	::=	"," Expression
IntegerLiteral	::=	<INTEGER_LITERAL>
FloatingPointLiteral	::=	<FLOATING_POINT_LITERAL>
StringLiteral	::=	<STRING_LITERAL>
Identifier	::=	<IDENTIFIER>

