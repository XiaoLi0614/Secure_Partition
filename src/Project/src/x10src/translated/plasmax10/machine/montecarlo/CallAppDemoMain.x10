
import x10.compiler.*;

class Data1 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(300) = 104.2500;
		d(301) = 104.5000;
		d(302) = 105.0000;
		d(303) = 106.5000;
		d(304) = 105.6250;
		d(305) = 105.2500;
		d(306) = 105.3750;
		d(307) = 103.7500;
		d(308) = 102.5000;
		d(309) = 102.2500;
		d(310) = 103.3750;
		d(311) = 107.8750;
		d(312) = 107.5000;
		d(313) = 106.2500;
		d(314) = 105.5000;
		d(315) = 105.5000;
		d(316) = 106.0000;
		d(317) = 110.0000;
		d(318) = 109.5000;
		d(319) = 109.0000;
		d(320) = 107.1250;
		d(321) = 106.8750;
		d(322) = 105.6250;
		d(323) = 102.7500;
		d(324) = 102.0000;
		d(325) = 102.3750;
		d(326) = 102.2500;
		d(327) = 101.7500;
		d(328) = 103.0000;
		d(329) = 103.5000;
		d(330) = 107.2500;
		d(331) = 106.0000;
		d(332) = 108.6250;
		d(333) = 112.0000;
		d(334) = 111.1250;
		d(335) = 109.3750;
		d(336) = 110.0000;
		d(337) = 109.1250;
		d(338) = 108.2500;
		d(339) = 108.0000;
		d(340) = 107.3750;
		d(341) = 106.5000;
		d(342) = 106.2500;
		d(343) = 105.2500;
		d(344) = 105.2500;
		d(345) = 105.0000;
		d(346) = 106.7500;
		d(347) = 110.5000;
		d(348) = 108.8750;
		d(349) = 105.2500;
		d(350) = 102.5000;
		d(351) = 103.6250;
		d(352) = 99.5000;
		d(353) = 98.0000;
		d(354) = 101.5000;
		d(355) = 103.6250;
		d(356) = 102.6250;
		d(357) = 104.8750;
		d(358) = 104.2500;
		d(359) = 103.5000;
		d(360) = 100.6250;
		d(361) = 102.2500;
		d(362) = 101.8750;
		d(363) = 99.5000;
		d(364) = 98.5000;
		d(365) = 98.7500;
		d(366) = 98.8750;
		d(367) = 98.7500;
		d(368) = 95.0000;
		d(369) = 92.7500;
		d(370) = 92.8750;
		d(371) = 92.7500;
		d(372) = 95.1250;
		d(373) = 95.8750;
		d(374) = 96.8750;
		d(375) = 100.1250;
		d(376) = 102.5000;
		d(377) = 98.7500;
		d(378) = 97.7500;
		d(379) = 101.6250;
		d(380) = 96.8750;
		d(381) = 104.2500;
		d(382) = 105.6250;
		d(383) = 107.0000;
		d(384) = 106.8750;
		d(385) = 106.0000;
		d(386) = 103.6250;
		d(387) = 100.8750;
		d(388) = 99.2500;
		d(389) = 101.7500;
		d(390) = 100.8750;
		d(391) = 100.3750;
		d(392) = 99.5000;
		d(393) = 100.0000;
		d(394) = 99.1250;
		d(395) = 99.5000;
		d(396) = 99.1250;
		d(397) = 99.2500;
		d(398) = 100.8750;
		d(399) = 101.0000;
		d(400) = 101.0000;
		d(401) = 101.8750;
		d(402) = 102.2500;
		d(403) = 102.5000;
		d(404) = 102.0000;
		d(405) = 101.1250;
		d(406) = 105.0000;
		d(407) = 105.3750;
		d(408) = 104.6250;
		d(409) = 104.3750;
		d(410) = 105.7500;
		d(411) = 104.8750;
		d(412) = 102.8750;
		d(413) = 104.6250;
		d(414) = 104.6250;
		d(415) = 104.5000;
		d(416) = 104.7500;
		d(417) = 104.5000;
		d(418) = 103.7500;
		d(419) = 103.6250;
		d(420) = 103.2500;
		d(421) = 102.6250;
		d(422) = 103.6250;
		d(423) = 103.3750;
		d(424) = 103.7500;
		d(425) = 102.6250;
		d(426) = 100.7500;
		d(427) = 101.0000;
		d(428) = 100.6250;
		d(429) = 99.7500;
		d(430) = 100.0000;
		d(431) = 98.7500;
		d(432) = 98.1250;
		d(433) = 98.2500;
		d(434) = 98.0000;
		d(435) = 96.7500;
		d(436) = 95.0000;
		d(437) = 97.2500;
		d(438) = 101.0000;
		d(439) = 100.7500;
		d(440) = 98.8750;
		d(441) = 99.1250;
		d(442) = 99.1250;
		d(443) = 99.0000;
		d(444) = 100.2500;
		d(445) = 100.1250;
		d(446) = 100.2500;
		d(447) = 100.8750;
		d(448) = 101.1250;
		d(449) = 100.5000;
		d(450) = 104.6250;
		d(451) = 102.5000;
		d(452) = 100.5000;
		d(453) = 99.5000;
		d(454) = 98.2500;
		d(455) = 96.3750;
		d(456) = 96.1250;
		d(457) = 96.2500;
		d(458) = 94.0000;
		d(459) = 93.8750;
		d(460) = 95.5000;
		d(461) = 96.6250;
		d(462) = 94.0000;
		d(463) = 89.7500;
		d(464) = 87.0000;
		d(465) = 82.1250;
		d(466) = 86.0000;
		d(467) = 86.2500;
		d(468) = 85.2500;
		d(469) = 83.2500;
		d(470) = 82.7500;
		d(471) = 87.0000;
		d(472) = 90.7500;
		d(473) = 87.8750;
		d(474) = 86.5000;
		d(475) = 88.5000;
		d(476) = 84.7500;
		d(477) = 86.1250;
		d(478) = 84.0000;
		d(479) = 88.7500;
		d(480) = 94.3750;
		d(481) = 94.5000;
		d(482) = 95.2500;
		d(483) = 95.7500;
		d(484) = 95.0000;
		d(485) = 90.1250;
		d(486) = 90.2500;
		d(487) = 89.5000;
		d(488) = 91.0000;
		d(489) = 92.6250;
		d(490) = 91.0000;
		d(491) = 92.2500;
		d(492) = 92.0000;
		d(493) = 91.2500;
		d(494) = 89.3750;
		d(495) = 88.5000;
		d(496) = 87.0000;
		d(497) = 85.5000;
		d(498) = 88.3750;
		d(499) = 85.5000;
		d(500) = 88.5000;
		d(501) = 85.2500;
		d(502) = 85.2500;
		d(503) = 85.5000;
		d(504) = 91.7500;
		d(505) = 95.1250;
		d(506) = 93.5000;
		d(507) = 95.6250;
		d(508) = 97.2500;
		d(509) = 96.7500;
		d(510) = 92.7500;
		d(511) = 92.1250;
		d(512) = 90.7500;
		d(513) = 94.0000;
		d(514) = 94.2500;
		d(515) = 96.2500;
		d(516) = 97.5000;
		d(517) = 96.5000;
		d(518) = 97.8750;
		d(519) = 99.8750;
		d(520) = 96.7500;
		d(521) = 95.3750;
		d(522) = 94.7500;
		d(523) = 93.0000;
		d(524) = 93.2500;
		d(525) = 91.5000;
		d(526) = 91.0000;
		d(527) = 89.2500;
		d(528) = 91.1250;
		d(529) = 91.7500;
		d(530) = 89.5000;
		d(531) = 88.0000;
		d(532) = 85.6250;
		d(533) = 86.8750;
		d(534) = 89.5000;
		d(535) = 87.6250;
		d(536) = 87.2500;
		d(537) = 85.3750;
		d(538) = 85.0000;
		d(539) = 85.7500;
		d(540) = 84.3750;
		d(541) = 84.3750;
		d(542) = 85.7500;
		d(543) = 84.2500;
		d(544) = 85.5000;
		d(545) = 82.3750;
		d(546) = 78.7500;
		d(547) = 82.2500;
		d(548) = 78.5000;
		d(549) = 78.7500;
		d(550) = 80.0000;
		d(551) = 81.8750;
		d(552) = 84.8750;
		d(553) = 84.6250;
		d(554) = 83.7500;
		d(555) = 85.5000;
		d(556) = 86.3750;
		d(557) = 84.1250;
		d(558) = 82.3750;
		d(559) = 86.2500;
		d(560) = 85.5000;
		d(561) = 83.0000;
		d(562) = 82.8750;
		d(563) = 82.0000;
		d(564) = 82.2500;
		d(565) = 82.7500;
		d(566) = 82.3750;
		d(567) = 82.0000;
		d(568) = 82.5000;
		d(569) = 83.1250;
		d(570) = 83.0000;
		d(571) = 80.8750;
		d(572) = 80.0000;
		d(573) = 79.0000;
		d(574) = 81.5000;
		d(575) = 82.0000;
		d(576) = 80.1250;
		d(577) = 80.8750;
		d(578) = 79.0000;
		d(579) = 85.7500;
		d(580) = 85.2500;
		d(581) = 83.5000;
		d(582) = 83.8750;
		d(583) = 83.2500;
		d(584) = 84.2500;
		d(585) = 84.8750;
		d(586) = 84.8750;
		d(587) = 85.0000;
		d(588) = 86.0000;
		d(589) = 85.2500;
		d(590) = 85.5000;
		d(591) = 87.0000;
		d(592) = 88.3750;
		d(593) = 91.6250;
		d(594) = 90.8750;
		d(595) = 90.6250;
		d(596) = 93.0000;
		d(597) = 93.6250;
		d(598) = 95.0000;
		d(599) = 94.5000;
	}

}

class Random {
	private var seed: Long;
	private static val multiplier: Long = 0x5DEECE66DL;
	private static val addend: Long = 0xBL;
	private static val mask: Long = (((1L << 48)) - 1);
	private var haveNextNextGaussian: Boolean;
	private var nextNextGaussian: Double;

	public def this(val rseed: Long) {
		setSeed(rseed);
		haveNextNextGaussian = false;
	}


	@NonEscaping final
	public def setSeed(val rseed: Long) {
		seed = (((rseed ^ multiplier)) & mask);
	}

	private def nextbits(val bits: Int): Int {
		var oldseed: Long = seed;
		var nextseed: Long = ((((oldseed * multiplier) + addend)) & mask);
		seed = nextseed;
		return (((nextseed >>> ((48 - bits)))) as Int);
	}

	public def nextInt(): Int {
		return nextbits(32);
	}

	public def nextLong(): Long {
		return (((((nextbits(32)) as Long) << 32)) + nextbits(32));
	}

	public def nextBoolean(): Boolean {
		return (nextbits(1) != 0);
	}

	public def nextDouble(): Double {
		return (((((((nextbits(26)) as Long) << 27)) + nextbits(27))) / (((1L << 53)) as Double));
	}

	public def nextGaussian(): Double {
		if (haveNextNextGaussian) {
{
				haveNextNextGaussian = false;
				return nextNextGaussian;
			}		} else {
			var v1: Double = 0.0;
			var v2: Double = 0.0;
			var s: Double = 0.0;
			do {
				v1 = ((2 * nextDouble()) - 1);
				v2 = ((2 * nextDouble()) - 1);
				s = ((v1 * v1) + (v2 * v2));
			}			while (((s >= 1) || (s == 0)));
			var multiplier: Double = Math.sqrt(((-2 * Math.log(((s as Double) as Double))) / s));
			nextNextGaussian = (v2 * multiplier);
			haveNextNextGaussian = true;
			return (v1 * multiplier);
		}
	}

}

class ToInitAllTasks {
	private val dTime: Double;
	private val returnDefinition: Int;
	private val expectedReturnRate: Double;
	private val volatility: Double;
	private val nTimeSteps: Int;
	private val pathStartValue: Double;

	public def this(val r: ReturnPath, val nts: Int, val psv: Double) {
		dTime = r.getDTime();
		returnDefinition = r.getReturnDefinition();
		expectedReturnRate = r.getExpectedReturnRate();
		volatility = r.getVolatility();
		nTimeSteps = nts;
		pathStartValue = psv;
	}


	public def getDTime(): Double {
		return dTime;
	}

	public def getReturnDefinition(): Int {
		return returnDefinition;
	}

	public def getExpectedReturnRate(): Double {
		return expectedReturnRate;
	}

	public def getVolatility(): Double {
		return volatility;
	}

	public def getNTimeSteps(): Int {
		return nTimeSteps;
	}

	public def getPathStartValue(): Double {
		return pathStartValue;
	}

	public def toString(): String {
		return "";
	}

}

class CallAppDemo {
	private var ap: AppDemo;

	public def this() {
		ap = new AppDemo(1000, 1000);
	}


	public def runiters() {
		ap.runSerial();
	}

	public def presults() {
		ap.processResults();
	}

	public def go() {
		init();
		kernel();
		validate();
	}

	public def init() {
	}

	public def kernel() {
		runiters();
		presults();
	}

	public def validate() {
		var ref: Double = -0.03234469082617506;
		var dev: Double = Math.abs((ap.result(0) - ref));
		if ((dev > 1.0e-12)) {
{
				Console.OUT.println("Validation failed");
				Console.OUT.println(((((("ExpectedReturnRate = " + ap.result(0)) + " ") + ref) + " ") + dev));
				throw new RuntimeException("Validation failed");
			}		}
	}

}

class Data6 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(1800) = 100.5000;
		d(1801) = 99.2500;
		d(1802) = 102.0000;
		d(1803) = 101.0000;
		d(1804) = 101.0000;
		d(1805) = 102.2500;
		d(1806) = 102.5000;
		d(1807) = 103.0000;
		d(1808) = 101.3750;
		d(1809) = 101.6250;
		d(1810) = 103.3750;
		d(1811) = 103.5000;
		d(1812) = 104.0000;
		d(1813) = 101.5000;
		d(1814) = 100.5000;
		d(1815) = 100.0000;
		d(1816) = 96.0000;
		d(1817) = 95.0000;
		d(1818) = 95.2500;
		d(1819) = 95.7500;
		d(1820) = 97.0000;
		d(1821) = 97.3750;
		d(1822) = 100.5000;
		d(1823) = 100.8750;
		d(1824) = 101.5000;
		d(1825) = 100.5000;
		d(1826) = 102.0000;
		d(1827) = 104.0000;
		d(1828) = 107.5000;
		d(1829) = 106.2500;
		d(1830) = 104.5000;
		d(1831) = 102.5000;
		d(1832) = 101.7500;
		d(1833) = 101.0000;
		d(1834) = 98.1250;
		d(1835) = 97.5000;
		d(1836) = 99.8750;
		d(1837) = 98.7500;
		d(1838) = 99.0000;
		d(1839) = 97.8750;
		d(1840) = 98.8750;
		d(1841) = 97.2500;
		d(1842) = 96.7500;
		d(1843) = 96.6250;
		d(1844) = 97.0000;
		d(1845) = 98.0000;
		d(1846) = 100.1250;
		d(1847) = 101.1250;
		d(1848) = 101.3750;
		d(1849) = 100.0000;
		d(1850) = 102.3750;
		d(1851) = 101.0000;
		d(1852) = 102.8750;
		d(1853) = 102.5000;
		d(1854) = 101.2500;
		d(1855) = 101.7500;
		d(1856) = 99.1250;
		d(1857) = 98.8750;
		d(1858) = 98.5000;
		d(1859) = 99.0000;
		d(1860) = 98.1250;
		d(1861) = 98.7500;
		d(1862) = 99.7500;
		d(1863) = 99.2500;
		d(1864) = 100.3750;
		d(1865) = 99.1250;
		d(1866) = 98.8750;
		d(1867) = 100.7500;
		d(1868) = 102.2500;
		d(1869) = 100.6250;
		d(1870) = 101.1250;
		d(1871) = 100.3750;
		d(1872) = 98.5000;
		d(1873) = 96.8750;
		d(1874) = 97.1250;
		d(1875) = 97.0000;
		d(1876) = 95.5000;
		d(1877) = 95.8750;
		d(1878) = 96.0000;
		d(1879) = 95.6250;
		d(1880) = 94.0000;
		d(1881) = 96.0000;
		d(1882) = 95.2500;
		d(1883) = 94.8750;
		d(1884) = 96.7500;
		d(1885) = 97.0000;
		d(1886) = 97.3750;
		d(1887) = 96.8750;
		d(1888) = 97.6250;
		d(1889) = 98.0000;
		d(1890) = 98.1250;
		d(1891) = 98.3750;
		d(1892) = 98.3750;
		d(1893) = 96.0000;
		d(1894) = 97.8750;
		d(1895) = 97.8750;
		d(1896) = 99.7500;
		d(1897) = 100.0000;
		d(1898) = 100.6250;
		d(1899) = 99.7500;
		d(1900) = 100.6250;
		d(1901) = 100.6250;
		d(1902) = 101.3750;
		d(1903) = 102.5000;
		d(1904) = 104.7500;
		d(1905) = 106.3750;
		d(1906) = 107.2500;
		d(1907) = 106.5000;
		d(1908) = 107.0000;
		d(1909) = 107.6250;
		d(1910) = 106.2500;
		d(1911) = 106.0000;
		d(1912) = 105.8750;
		d(1913) = 105.3750;
		d(1914) = 105.0000;
		d(1915) = 105.0000;
		d(1916) = 102.6250;
		d(1917) = 102.1250;
		d(1918) = 100.8750;
		d(1919) = 101.0000;
		d(1920) = 102.5000;
		d(1921) = 103.5000;
		d(1922) = 101.6250;
		d(1923) = 101.0000;
		d(1924) = 99.0000;
		d(1925) = 97.7500;
		d(1926) = 95.5000;
		d(1927) = 95.0000;
		d(1928) = 95.0000;
		d(1929) = 94.2500;
		d(1930) = 92.8750;
		d(1931) = 93.7500;
		d(1932) = 93.3750;
		d(1933) = 93.6250;
		d(1934) = 93.5000;
		d(1935) = 93.6250;
		d(1936) = 93.3750;
		d(1937) = 93.0000;
		d(1938) = 92.8750;
		d(1939) = 94.8750;
		d(1940) = 96.5000;
		d(1941) = 97.6250;
		d(1942) = 97.3750;
		d(1943) = 97.6250;
		d(1944) = 96.0000;
		d(1945) = 96.3750;
		d(1946) = 95.7500;
		d(1947) = 96.5000;
		d(1948) = 95.7500;
		d(1949) = 94.0000;
		d(1950) = 93.7500;
		d(1951) = 93.7500;
		d(1952) = 93.5000;
		d(1953) = 93.7500;
		d(1954) = 92.5000;
		d(1955) = 94.0000;
		d(1956) = 93.6250;
		d(1957) = 94.1250;
		d(1958) = 94.1250;
		d(1959) = 93.6250;
		d(1960) = 94.1250;
		d(1961) = 92.3750;
		d(1962) = 90.0000;
		d(1963) = 90.3750;
		d(1964) = 91.7500;
		d(1965) = 90.6250;
		d(1966) = 90.5000;
		d(1967) = 90.6250;
		d(1968) = 89.7500;
		d(1969) = 91.3750;
		d(1970) = 90.7500;
		d(1971) = 89.6250;
		d(1972) = 89.3750;
		d(1973) = 90.7500;
		d(1974) = 91.6250;
		d(1975) = 93.0000;
		d(1976) = 93.3750;
		d(1977) = 92.5000;
		d(1978) = 93.5000;
		d(1979) = 93.5000;
		d(1980) = 94.3750;
		d(1981) = 94.5000;
		d(1982) = 94.5000;
		d(1983) = 94.0000;
		d(1984) = 94.0000;
		d(1985) = 95.3750;
		d(1986) = 95.3750;
		d(1987) = 95.3750;
		d(1988) = 94.5000;
		d(1989) = 94.0000;
		d(1990) = 93.3750;
		d(1991) = 93.5000;
		d(1992) = 93.7500;
		d(1993) = 91.7500;
		d(1994) = 91.2500;
		d(1995) = 91.7500;
		d(1996) = 91.2500;
		d(1997) = 90.7500;
		d(1998) = 90.6250;
		d(1999) = 91.2500;
		d(2000) = 90.6250;
		d(2001) = 90.0000;
		d(2002) = 90.0000;
		d(2003) = 90.5000;
		d(2004) = 91.0000;
		d(2005) = 91.6250;
		d(2006) = 92.0000;
		d(2007) = 92.1250;
		d(2008) = 93.0000;
		d(2009) = 93.3750;
		d(2010) = 93.3750;
		d(2011) = 92.0000;
		d(2012) = 95.0000;
		d(2013) = 95.6250;
		d(2014) = 96.0000;
		d(2015) = 96.2500;
		d(2016) = 97.0000;
		d(2017) = 98.5000;
		d(2018) = 97.2500;
		d(2019) = 95.3750;
		d(2020) = 95.0000;
		d(2021) = 95.0000;
		d(2022) = 94.0000;
		d(2023) = 94.5000;
		d(2024) = 94.7500;
		d(2025) = 95.0000;
		d(2026) = 94.7500;
		d(2027) = 94.5000;
		d(2028) = 94.6250;
		d(2029) = 94.3750;
		d(2030) = 93.0000;
		d(2031) = 92.3750;
		d(2032) = 91.7500;
		d(2033) = 91.1250;
		d(2034) = 90.2500;
		d(2035) = 89.1250;
		d(2036) = 90.1250;
		d(2037) = 90.2500;
		d(2038) = 89.3750;
		d(2039) = 90.3750;
		d(2040) = 90.6250;
		d(2041) = 90.7500;
		d(2042) = 91.5000;
		d(2043) = 91.8750;
		d(2044) = 93.1250;
		d(2045) = 93.1250;
		d(2046) = 93.7500;
		d(2047) = 92.2500;
		d(2048) = 92.5000;
		d(2049) = 92.2500;
		d(2050) = 90.7500;
		d(2051) = 90.7500;
		d(2052) = 92.1250;
		d(2053) = 93.5000;
		d(2054) = 94.7500;
		d(2055) = 95.3750;
		d(2056) = 93.5000;
		d(2057) = 94.6250;
		d(2058) = 94.6250;
		d(2059) = 93.8750;
		d(2060) = 92.7500;
		d(2061) = 95.0000;
		d(2062) = 95.5000;
		d(2063) = 94.7500;
		d(2064) = 95.0000;
		d(2065) = 96.0000;
		d(2066) = 94.3750;
		d(2067) = 94.2500;
		d(2068) = 93.0000;
		d(2069) = 92.7500;
		d(2070) = 93.0000;
		d(2071) = 92.3750;
		d(2072) = 91.1250;
		d(2073) = 91.6250;
		d(2074) = 90.5000;
		d(2075) = 91.8750;
		d(2076) = 91.7500;
		d(2077) = 92.3750;
		d(2078) = 92.2500;
		d(2079) = 92.5000;
		d(2080) = 93.2500;
		d(2081) = 92.1250;
		d(2082) = 94.8750;
		d(2083) = 94.1250;
		d(2084) = 94.0000;
		d(2085) = 93.7500;
		d(2086) = 91.6250;
		d(2087) = 90.5000;
		d(2088) = 90.8750;
		d(2089) = 91.8750;
		d(2090) = 92.0000;
		d(2091) = 90.0000;
		d(2092) = 87.7500;
		d(2093) = 88.8750;
		d(2094) = 87.1250;
		d(2095) = 86.6250;
		d(2096) = 87.6250;
		d(2097) = 86.5000;
		d(2098) = 88.6250;
		d(2099) = 88.0000;
	}

}

class AppDemo {
	private var D: Dist{(self.rank == 1)};
	private val expectedReturnRate: DistArray[Double]{(self.rank == 1)};
	private val volatility: DistArray[Double]{(self.rank == 1)};
	private var tasks: DistArray[ToTask]{(self.rank == 1)};
	public val result: DistArray[Double]{(self.rank == 1)};
	public var initAllTasks: ToInitAllTasks;
	public var psMC: PriceStock;
	public var aExpectedReturnRateMC: Double;
	public var aVolatilityMC: Double;
	public var nTimeStepsMC: Int;
	public var nRunsMC: Int;
	public var initialised: Boolean;

	public def this(val nTimeStepsMC0: Int, val nRunsMC0: Int) {
		var dResult: Dist{(self.rank == 1)} = ((0..0)->here);
		result = getDoubleArray(dResult);
		nTimeStepsMC = nTimeStepsMC0;
		nRunsMC = nRunsMC0;
		initialised = false;
		val tempD <: Dist{(self.rank == 1)} = (Dist.makeBlock((0..((nRunsMC0 - 1)))) as Dist{(self.rank == 1)});
		D = tempD;
		expectedReturnRate = getDoubleArray(tempD);
		volatility = getDoubleArray(tempD);
		val pathStartValue <: Double = 100.0;
		aExpectedReturnRateMC = 0.0;
		aVolatilityMC = 0.0;
		var rateP: RatePath = new RatePath();
		var returnP: ReturnPath = rateP.getReturnCompounded();
		returnP.estimatePath();
		var eRR: Double = returnP.getExpectedReturnRate();
		var vol: Double = returnP.getVolatility();
		initAllTasks = new ToInitAllTasks(returnP, nTimeStepsMC0, pathStartValue);
		initTasks(nRunsMC0, tempD);
	}


	@NonEscaping final
	public def getDoubleArray(val d: Dist{(self.rank == 1)}): DistArray[Double]{(self.rank == 1)} {
		return (DistArray.make[Double](d));
	}

	public def runSerial() {
		val t <: ToInitAllTasks = initAllTasks;
		val mytasks <: DistArray[ToTask]{(self.rank == 1)} = tasks;
		val myexpectedReturnRate <: DistArray[Double]{(self.rank == 1)} = expectedReturnRate;
		val myvolatility <: DistArray[Double]{(self.rank == 1)} = volatility;
		for (i: Point{(self.rank == 1)} in expectedReturnRate.dist) {
			val ps <: PriceStock = new PriceStock();
			ps.setInitAllTasks(t);
			ps.setTask(mytasks(i));
			ps.run();
			var r: ToResult = ps.getResult();
			myexpectedReturnRate(i) = r.getExpectedReturnRate();
			myvolatility(i) = r.getVolatility();
		}
	}

	public def presults() {
		processResults();
	}

	@NonEscaping final
	private def initTasks(val nRunsMC: Int, val aD: Dist{(self.rank == 1)}) {
		tasks = (DistArray.make[ToTask](aD, (p:Point{(self.rank == 1)}) => {
			return new ToTask(((p(0) as Long) * 11));
		}));
	}

	public def processResults() {
		val avgERRMC <: Double = (COMPILER_INSERTED_LIB.sum(expectedReturnRate) / nRunsMC);
		val aveVol <: Double = (COMPILER_INSERTED_LIB.sum(volatility) / nRunsMC);
		result(0) = avgERRMC;
	}

}

class MonteCarloPath {
	private var dTime: Double;
	private var fluctuations: DistArray[Double]{(self.rank == 1)};
	private var pathValue: DistArray[Double]{(self.rank == 1)};
	private var returnDefinition: Int;
	private var expectedReturnRate: Double;
	private var volatility: Double;
	private var nTimeSteps: Int;
	private var pathStartValue: Double;


	public def computeFluctuationsGaussian(val seed: Long) {
		var rnd: Random = new Random(seed);
		var mean: Double = (((expectedReturnRate - ((0.5 * volatility) * volatility))) * dTime);
		var sd: Double = (volatility * Math.sqrt(dTime));
		var gauss: Double = 0.0;
		var meanGauss: Double = 0.0;
		var variance: Double = 0.0;
		for (i: Point{(self.rank == 1)} in (0..(nTimeSteps - 1))) {
			gauss = rnd.nextGaussian();
			meanGauss = (meanGauss + gauss);
			variance = (variance + ((gauss * gauss)));
			fluctuations(i) = (mean + (sd * gauss));
		}
		meanGauss = (meanGauss / (nTimeSteps as Double));
		variance = (variance / (nTimeSteps as Double));
	}

	public def computePathValue(val startValue: Double) {
		pathValue(0) = startValue;
		if (((returnDefinition == ReturnPath.COMPOUNDED) || (returnDefinition == ReturnPath.NONCOMPOUNDED))) {

				for (i: Point{(self.rank == 1)} in (1..(nTimeSteps - 1))) 
					pathValue(i) = (pathValue((i + Point.make([-1]))) * Math.exp(fluctuations(i)));
		}	}

	public def getDTime(): Double {
		return dTime;
	}

	public def getPathValue(): DistArray[Double]{(self.rank == 1)} {
		return pathValue;
	}

	public def getNTimeSteps(): Int {
		return nTimeSteps;
	}

	public def setDTime(val d: Double) {
		dTime = d;
	}

	public def setReturnDefinition(val r: Int) {
		returnDefinition = r;
	}

	public def setExpectedReturnRate(val e: Double) {
		expectedReturnRate = e;
	}

	public def setVolatility(val v: Double) {
		volatility = v;
	}

	public def setNTimeSteps(val n: Int) {
		nTimeSteps = n;
	}

	public def setPathStartValue(val p: Double) {
		pathStartValue = p;
	}

	public def setPathValue(val p: DistArray[Double]{(self.rank == 1)}) {
		pathValue = p;
	}

	public def setFluctuations(val f: DistArray[Double]{(self.rank == 1)}) {
		fluctuations = f;
	}

}

class Data3 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(900) = 62.5000;
		d(901) = 63.3750;
		d(902) = 64.1250;
		d(903) = 63.8750;
		d(904) = 64.2500;
		d(905) = 64.0000;
		d(906) = 64.2500;
		d(907) = 64.0000;
		d(908) = 64.3750;
		d(909) = 65.1250;
		d(910) = 65.2500;
		d(911) = 64.7500;
		d(912) = 64.5000;
		d(913) = 64.7500;
		d(914) = 64.2500;
		d(915) = 63.0000;
		d(916) = 64.6250;
		d(917) = 65.5000;
		d(918) = 64.6250;
		d(919) = 63.8750;
		d(920) = 63.5000;
		d(921) = 63.3750;
		d(922) = 61.8750;
		d(923) = 62.5000;
		d(924) = 62.8750;
		d(925) = 63.0000;
		d(926) = 63.1250;
		d(927) = 62.6250;
		d(928) = 62.0000;
		d(929) = 62.6250;
		d(930) = 62.6250;
		d(931) = 62.3750;
		d(932) = 62.0000;
		d(933) = 62.2500;
		d(934) = 62.1250;
		d(935) = 61.0000;
		d(936) = 60.8750;
		d(937) = 60.1250;
		d(938) = 60.7500;
		d(939) = 61.0000;
		d(940) = 60.0000;
		d(941) = 60.1250;
		d(942) = 59.6250;
		d(943) = 61.2500;
		d(944) = 59.5000;
		d(945) = 59.7500;
		d(946) = 60.0000;
		d(947) = 62.2500;
		d(948) = 64.6250;
		d(949) = 63.3750;
		d(950) = 62.8750;
		d(951) = 63.6250;
		d(952) = 63.8750;
		d(953) = 64.0000;
		d(954) = 65.0000;
		d(955) = 64.5000;
		d(956) = 64.2500;
		d(957) = 64.0000;
		d(958) = 62.7500;
		d(959) = 61.2500;
		d(960) = 60.5000;
		d(961) = 59.2500;
		d(962) = 59.6250;
		d(963) = 58.6250;
		d(964) = 58.3750;
		d(965) = 58.2500;
		d(966) = 57.3750;
		d(967) = 56.7500;
		d(968) = 57.1250;
		d(969) = 57.0000;
		d(970) = 57.8750;
		d(971) = 58.8750;
		d(972) = 59.5000;
		d(973) = 58.7500;
		d(974) = 58.6250;
		d(975) = 58.1250;
		d(976) = 58.1250;
		d(977) = 58.2500;
		d(978) = 58.3750;
		d(979) = 59.5000;
		d(980) = 57.8750;
		d(981) = 58.5000;
		d(982) = 60.2500;
		d(983) = 62.7500;
		d(984) = 63.2500;
		d(985) = 63.8750;
		d(986) = 63.3750;
		d(987) = 64.8750;
		d(988) = 64.7500;
		d(989) = 64.7500;
		d(990) = 63.7500;
		d(991) = 63.1250;
		d(992) = 66.2500;
		d(993) = 66.0000;
		d(994) = 65.2500;
		d(995) = 65.7500;
		d(996) = 65.3750;
		d(997) = 63.5000;
		d(998) = 64.0000;
		d(999) = 64.1250;
		d(1000) = 63.1250;
		d(1001) = 63.0000;
		d(1002) = 63.3750;
		d(1003) = 63.0000;
		d(1004) = 63.2500;
		d(1005) = 63.3750;
		d(1006) = 63.2500;
		d(1007) = 63.0000;
		d(1008) = 62.8750;
		d(1009) = 62.2500;
		d(1010) = 61.0000;
		d(1011) = 61.5000;
		d(1012) = 61.2500;
		d(1013) = 60.7500;
		d(1014) = 61.7500;
		d(1015) = 61.7500;
		d(1016) = 61.6250;
		d(1017) = 61.2500;
		d(1018) = 62.2500;
		d(1019) = 62.5000;
		d(1020) = 62.7500;
		d(1021) = 62.8750;
		d(1022) = 62.2500;
		d(1023) = 61.1250;
		d(1024) = 59.6250;
		d(1025) = 59.7500;
		d(1026) = 59.7500;
		d(1027) = 59.1250;
		d(1028) = 58.1250;
		d(1029) = 59.2500;
		d(1030) = 58.7500;
		d(1031) = 58.0000;
		d(1032) = 58.0000;
		d(1033) = 58.6250;
		d(1034) = 59.3750;
		d(1035) = 59.7500;
		d(1036) = 59.5000;
		d(1037) = 59.0000;
		d(1038) = 58.3750;
		d(1039) = 58.3750;
		d(1040) = 58.0000;
		d(1041) = 57.8750;
		d(1042) = 57.3750;
		d(1043) = 56.5000;
		d(1044) = 56.5000;
		d(1045) = 58.7500;
		d(1046) = 58.2500;
		d(1047) = 57.5000;
		d(1048) = 57.3750;
		d(1049) = 56.8750;
		d(1050) = 56.7500;
		d(1051) = 57.8750;
		d(1052) = 58.7500;
		d(1053) = 58.3750;
		d(1054) = 58.2500;
		d(1055) = 58.2500;
		d(1056) = 58.1250;
		d(1057) = 58.7500;
		d(1058) = 59.2500;
		d(1059) = 58.8750;
		d(1060) = 59.8750;
		d(1061) = 59.8750;
		d(1062) = 59.7500;
		d(1063) = 59.8750;
		d(1064) = 60.0000;
		d(1065) = 60.6250;
		d(1066) = 60.8750;
		d(1067) = 60.7500;
		d(1068) = 61.0000;
		d(1069) = 60.8750;
		d(1070) = 60.8750;
		d(1071) = 59.8750;
		d(1072) = 59.8750;
		d(1073) = 60.1250;
		d(1074) = 59.8750;
		d(1075) = 60.3750;
		d(1076) = 60.6250;
		d(1077) = 60.5000;
		d(1078) = 60.5000;
		d(1079) = 60.2500;
		d(1080) = 60.5000;
		d(1081) = 60.1250;
		d(1082) = 58.8750;
		d(1083) = 58.5000;
		d(1084) = 58.8750;
		d(1085) = 58.7500;
		d(1086) = 58.5000;
		d(1087) = 58.1250;
		d(1088) = 57.6250;
		d(1089) = 57.1250;
		d(1090) = 57.2500;
		d(1091) = 56.5000;
		d(1092) = 55.7500;
		d(1093) = 56.7500;
		d(1094) = 57.5000;
		d(1095) = 57.2500;
		d(1096) = 56.8750;
		d(1097) = 57.5000;
		d(1098) = 57.7500;
		d(1099) = 57.3750;
		d(1100) = 57.7500;
		d(1101) = 57.7500;
		d(1102) = 57.7500;
		d(1103) = 57.7500;
		d(1104) = 56.7500;
		d(1105) = 56.3750;
		d(1106) = 56.3750;
		d(1107) = 56.7500;
		d(1108) = 56.8750;
		d(1109) = 57.7500;
		d(1110) = 57.2500;
		d(1111) = 57.0000;
		d(1112) = 57.1250;
		d(1113) = 57.7500;
		d(1114) = 57.7500;
		d(1115) = 58.1250;
		d(1116) = 58.3750;
		d(1117) = 58.3750;
		d(1118) = 58.8750;
		d(1119) = 61.0000;
		d(1120) = 62.2500;
		d(1121) = 62.5000;
		d(1122) = 63.3750;
		d(1123) = 63.1250;
		d(1124) = 63.2500;
		d(1125) = 64.1250;
		d(1126) = 64.6250;
		d(1127) = 66.0000;
		d(1128) = 66.2500;
		d(1129) = 66.7500;
		d(1130) = 65.5000;
		d(1131) = 64.3750;
		d(1132) = 66.3750;
		d(1133) = 70.5000;
		d(1134) = 72.3750;
		d(1135) = 72.0000;
		d(1136) = 73.3750;
		d(1137) = 74.7500;
		d(1138) = 74.2500;
		d(1139) = 77.7500;
		d(1140) = 77.2500;
		d(1141) = 79.8750;
		d(1142) = 77.7500;
		d(1143) = 76.8750;
		d(1144) = 79.5000;
		d(1145) = 79.2500;
		d(1146) = 79.1250;
		d(1147) = 77.2500;
		d(1148) = 75.6250;
		d(1149) = 74.0000;
		d(1150) = 75.1250;
		d(1151) = 74.3750;
		d(1152) = 73.5000;
		d(1153) = 76.0000;
		d(1154) = 78.3750;
		d(1155) = 79.1250;
		d(1156) = 80.1250;
		d(1157) = 84.0000;
		d(1158) = 83.6250;
		d(1159) = 84.0000;
		d(1160) = 84.6250;
		d(1161) = 83.0000;
		d(1162) = 82.0000;
		d(1163) = 83.2500;
		d(1164) = 82.0000;
		d(1165) = 80.0000;
		d(1166) = 79.5000;
		d(1167) = 79.7500;
		d(1168) = 79.0000;
		d(1169) = 78.0000;
		d(1170) = 79.3750;
		d(1171) = 79.2500;
		d(1172) = 79.6250;
		d(1173) = 79.8750;
		d(1174) = 79.7500;
		d(1175) = 79.5000;
		d(1176) = 79.3750;
		d(1177) = 79.5000;
		d(1178) = 79.1250;
		d(1179) = 79.7500;
		d(1180) = 82.1250;
		d(1181) = 81.8750;
		d(1182) = 81.8750;
		d(1183) = 80.6250;
		d(1184) = 80.6250;
		d(1185) = 79.5000;
		d(1186) = 80.8750;
		d(1187) = 81.2500;
		d(1188) = 79.7500;
		d(1189) = 79.5000;
		d(1190) = 77.8750;
		d(1191) = 74.6250;
		d(1192) = 70.5000;
		d(1193) = 71.5000;
		d(1194) = 72.2500;
		d(1195) = 73.3750;
		d(1196) = 75.0000;
		d(1197) = 76.0000;
		d(1198) = 75.5000;
		d(1199) = 75.1250;
	}

}

class Timer {
	public static val max_counters: Int = 64;
	private var start_time: DistArray[Double]{(self.rank == 1)};
	private var elapsed_time: DistArray[Double]{(self.rank == 1)};
	private var total_time: DistArray[Double]{(self.rank == 1)};

	public def this() {
		val d <: Dist{(self.rank == 1)} = ((0..max_counters)->Place.FIRST_PLACE);
		start_time = (DistArray.make[Double](d, (p:Point{(self.rank == 1)}) => {
			return 0.0;
		}));
		elapsed_time = (DistArray.make[Double](d, (p:Point{(self.rank == 1)}) => {
			return 0.0;
		}));
		total_time = (DistArray.make[Double](d, (p:Point{(self.rank == 1)}) => {
			return 0.0;
		}));
	}


	public def start(val n: Int) {
		start_time(n) = System.currentTimeMillis();
	}

	public def stop(val n: Int) {
		elapsed_time(n) = (System.currentTimeMillis() - start_time(n));
		elapsed_time(n) = (elapsed_time(n) / 1000);
		total_time(n) = (total_time(n) + elapsed_time(n));
	}

	public def readTimer(val n: Int): Double {
		return total_time(n);
	}

	public def resetTimer(val n: Int) {
		total_time(n) = 0;
		start_time(n) = 0;
		elapsed_time(n) = 0;
	}

	public def resetAllTimers() {
		var i: Int = 0;
		while ((i < max_counters)) {
			resetTimer(i);
			i++;
		}
	}

}

class ReturnPath {
	public static val COMPOUNDED: Int = 1;
	public static val NONCOMPOUNDED: Int = 2;
	private var dTime: Double;
	private var pathValue: DistArray[Double]{(self.rank == 1)};
	private var nPathValue: Int;
	private var returnDefinition: Int;
	private var expectedReturnRate: Double;
	private var volatility: Double;
	private var volatility2: Double;
	private var mean: Double;
	private var variance: Double;

	public def this(val pv: DistArray[Double]{(self.rank == 1)}, val npv: Int, val rd: Int) {
		pathValue = pv;
		nPathValue = npv;
		returnDefinition = rd;
	}


	public def setDTime(val d: Double) {
		dTime = d;
	}

	public def getDTime(): Double {
		return dTime;
	}

	public def getReturnDefinition(): Int {
		return returnDefinition;
	}

	public def getExpectedReturnRate(): Double {
		return expectedReturnRate;
	}

	public def getVolatility(): Double {
		return volatility;
	}

	public def getVolatility2(): Double {
		return volatility2;
	}

	public def estimatePath() {
		computeMean();
		computeVariance();
		computeExpectedReturnRate();
		computeVolatility();
	}

	public def computeMean() {
		mean = 0.0;
		for (i: Point{(self.rank == 1)} in (1..(nPathValue - 1))) 
			mean = (mean + pathValue(i));
		mean = (mean / ((((nPathValue - 1.0)) as Double)));
	}

	public def computeVariance() {
		variance = 0.0;
		for (i: Point{(self.rank == 1)} in (1..(nPathValue - 1))) 
			variance = (variance + ((((pathValue(i) - mean)) * ((pathValue(i) - mean)))));
		variance = (variance / ((((nPathValue - 1.0)) as Double)));
	}

	public def computeExpectedReturnRate() {
		expectedReturnRate = ((mean / dTime) + (0.5 * volatility2));
	}

	public def computeVolatility() {
		volatility2 = (variance / dTime);
		volatility = Math.sqrt(volatility2);
	}

}

class Data4 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(1200) = 75.7500;
		d(1201) = 74.1250;
		d(1202) = 75.6250;
		d(1203) = 76.5000;
		d(1204) = 75.7500;
		d(1205) = 76.0000;
		d(1206) = 77.0000;
		d(1207) = 78.3750;
		d(1208) = 79.3750;
		d(1209) = 79.5000;
		d(1210) = 81.6250;
		d(1211) = 81.0000;
		d(1212) = 80.8750;
		d(1213) = 79.5000;
		d(1214) = 79.7500;
		d(1215) = 77.8750;
		d(1216) = 77.7500;
		d(1217) = 78.5000;
		d(1218) = 79.3750;
		d(1219) = 80.6250;
		d(1220) = 81.2500;
		d(1221) = 81.6250;
		d(1222) = 80.5000;
		d(1223) = 80.5000;
		d(1224) = 81.0000;
		d(1225) = 80.5000;
		d(1226) = 81.2500;
		d(1227) = 81.8750;
		d(1228) = 82.8750;
		d(1229) = 83.3750;
		d(1230) = 83.0000;
		d(1231) = 84.3750;
		d(1232) = 84.3750;
		d(1233) = 83.7500;
		d(1234) = 81.5000;
		d(1235) = 80.7500;
		d(1236) = 81.2500;
		d(1237) = 81.0000;
		d(1238) = 80.3750;
		d(1239) = 80.8750;
		d(1240) = 81.2500;
		d(1241) = 81.5000;
		d(1242) = 80.6250;
		d(1243) = 80.5000;
		d(1244) = 81.1250;
		d(1245) = 83.2500;
		d(1246) = 83.3750;
		d(1247) = 82.0000;
		d(1248) = 82.2500;
		d(1249) = 82.2500;
		d(1250) = 83.0000;
		d(1251) = 82.6250;
		d(1252) = 82.3750;
		d(1253) = 80.7500;
		d(1254) = 79.6250;
		d(1255) = 78.2500;
		d(1256) = 77.0000;
		d(1257) = 78.0000;
		d(1258) = 78.5000;
		d(1259) = 78.7500;
		d(1260) = 78.2500;
		d(1261) = 78.2500;
		d(1262) = 77.7500;
		d(1263) = 77.3750;
		d(1264) = 77.7500;
		d(1265) = 77.7500;
		d(1266) = 78.1250;
		d(1267) = 79.7500;
		d(1268) = 79.7500;
		d(1269) = 80.0000;
		d(1270) = 79.7500;
		d(1271) = 79.0000;
		d(1272) = 79.0000;
		d(1273) = 77.7500;
		d(1274) = 78.5000;
		d(1275) = 78.0000;
		d(1276) = 78.5000;
		d(1277) = 78.7500;
		d(1278) = 78.3750;
		d(1279) = 79.5000;
		d(1280) = 79.5000;
		d(1281) = 78.5000;
		d(1282) = 77.6250;
		d(1283) = 77.0000;
		d(1284) = 79.2500;
		d(1285) = 78.8750;
		d(1286) = 78.7500;
		d(1287) = 78.5000;
		d(1288) = 76.5000;
		d(1289) = 75.5000;
		d(1290) = 75.6250;
		d(1291) = 74.0000;
		d(1292) = 74.8750;
		d(1293) = 75.2500;
		d(1294) = 76.5000;
		d(1295) = 75.2500;
		d(1296) = 75.0000;
		d(1297) = 74.2500;
		d(1298) = 76.0000;
		d(1299) = 74.3750;
		d(1300) = 73.2500;
		d(1301) = 73.0000;
		d(1302) = 72.2500;
		d(1303) = 69.8750;
		d(1304) = 67.7500;
		d(1305) = 70.1250;
		d(1306) = 73.1250;
		d(1307) = 73.1250;
		d(1308) = 72.3750;
		d(1309) = 71.0000;
		d(1310) = 71.2500;
		d(1311) = 72.0000;
		d(1312) = 72.5000;
		d(1313) = 74.3750;
		d(1314) = 77.0000;
		d(1315) = 74.8750;
		d(1316) = 76.2500;
		d(1317) = 75.8750;
		d(1318) = 76.1250;
		d(1319) = 73.3750;
		d(1320) = 73.6250;
		d(1321) = 72.8750;
		d(1322) = 72.5000;
		d(1323) = 71.6250;
		d(1324) = 72.5000;
		d(1325) = 72.7500;
		d(1326) = 72.5000;
		d(1327) = 73.5000;
		d(1328) = 72.6250;
		d(1329) = 72.5000;
		d(1330) = 74.2500;
		d(1331) = 73.0000;
		d(1332) = 74.6250;
		d(1333) = 76.5000;
		d(1334) = 75.3750;
		d(1335) = 76.3750;
		d(1336) = 76.2500;
		d(1337) = 77.5000;
		d(1338) = 77.1250;
		d(1339) = 76.7500;
		d(1340) = 77.8750;
		d(1341) = 77.3750;
		d(1342) = 74.8750;
		d(1343) = 73.7500;
		d(1344) = 75.5000;
		d(1345) = 76.7500;
		d(1346) = 76.6250;
		d(1347) = 80.7500;
		d(1348) = 84.2500;
		d(1349) = 83.2500;
		d(1350) = 83.5000;
		d(1351) = 81.2500;
		d(1352) = 80.3750;
		d(1353) = 81.7500;
		d(1354) = 82.2500;
		d(1355) = 82.6250;
		d(1356) = 83.0000;
		d(1357) = 83.2500;
		d(1358) = 85.0000;
		d(1359) = 84.0000;
		d(1360) = 84.3750;
		d(1361) = 85.3750;
		d(1362) = 85.0000;
		d(1363) = 90.3750;
		d(1364) = 89.7500;
		d(1365) = 90.0000;
		d(1366) = 87.7500;
		d(1367) = 88.1250;
		d(1368) = 88.1250;
		d(1369) = 86.7500;
		d(1370) = 87.8750;
		d(1371) = 89.0000;
		d(1372) = 89.8750;
		d(1373) = 90.1250;
		d(1374) = 90.8750;
		d(1375) = 92.1250;
		d(1376) = 91.7500;
		d(1377) = 91.1250;
		d(1378) = 91.3750;
		d(1379) = 90.0000;
		d(1380) = 89.3750;
		d(1381) = 90.0000;
		d(1382) = 91.0000;
		d(1383) = 91.3750;
		d(1384) = 90.1250;
		d(1385) = 88.8750;
		d(1386) = 87.6250;
		d(1387) = 90.8750;
		d(1388) = 90.3750;
		d(1389) = 90.6250;
		d(1390) = 90.5000;
		d(1391) = 92.5000;
		d(1392) = 92.8750;
		d(1393) = 93.0000;
		d(1394) = 93.6250;
		d(1395) = 94.5000;
		d(1396) = 95.6250;
		d(1397) = 94.2500;
		d(1398) = 92.6250;
		d(1399) = 92.0000;
		d(1400) = 92.6250;
		d(1401) = 92.7500;
		d(1402) = 92.8750;
		d(1403) = 93.6250;
		d(1404) = 94.8750;
		d(1405) = 93.2500;
		d(1406) = 93.7500;
		d(1407) = 93.6250;
		d(1408) = 92.5000;
		d(1409) = 92.8750;
		d(1410) = 93.2500;
		d(1411) = 92.8750;
		d(1412) = 93.5000;
		d(1413) = 93.8750;
		d(1414) = 95.0000;
		d(1415) = 95.7500;
		d(1416) = 95.7500;
		d(1417) = 96.8750;
		d(1418) = 96.2500;
		d(1419) = 96.5000;
		d(1420) = 97.1250;
		d(1421) = 97.1250;
		d(1422) = 97.5000;
		d(1423) = 97.6250;
		d(1424) = 101.2500;
		d(1425) = 104.2500;
		d(1426) = 104.6250;
		d(1427) = 103.2500;
		d(1428) = 103.2500;
		d(1429) = 101.0000;
		d(1430) = 102.7500;
		d(1431) = 105.0000;
		d(1432) = 105.7500;
		d(1433) = 106.1250;
		d(1434) = 107.3750;
		d(1435) = 107.0000;
		d(1436) = 105.7500;
		d(1437) = 105.5000;
		d(1438) = 105.2500;
		d(1439) = 102.2500;
		d(1440) = 100.8750;
		d(1441) = 102.5000;
		d(1442) = 102.2500;
		d(1443) = 102.0000;
		d(1444) = 101.3750;
		d(1445) = 101.1250;
		d(1446) = 102.5000;
		d(1447) = 104.0000;
		d(1448) = 104.8750;
		d(1449) = 110.6250;
		d(1450) = 109.3750;
		d(1451) = 107.5000;
		d(1452) = 106.7500;
		d(1453) = 105.6250;
		d(1454) = 104.1250;
		d(1455) = 103.8750;
		d(1456) = 104.1250;
		d(1457) = 104.1250;
		d(1458) = 103.0000;
		d(1459) = 104.1250;
		d(1460) = 102.6250;
		d(1461) = 103.0000;
		d(1462) = 101.8750;
		d(1463) = 99.6250;
		d(1464) = 99.0000;
		d(1465) = 97.7500;
		d(1466) = 97.7500;
		d(1467) = 97.5000;
		d(1468) = 98.7500;
		d(1469) = 100.7500;
		d(1470) = 100.8750;
		d(1471) = 101.0000;
		d(1472) = 99.1250;
		d(1473) = 100.5000;
		d(1474) = 99.8750;
		d(1475) = 100.5000;
		d(1476) = 99.7500;
		d(1477) = 99.1250;
		d(1478) = 99.8750;
		d(1479) = 99.8750;
		d(1480) = 100.6250;
		d(1481) = 100.7500;
		d(1482) = 100.0000;
		d(1483) = 99.1250;
		d(1484) = 99.5000;
		d(1485) = 99.3750;
		d(1486) = 97.7500;
		d(1487) = 98.1250;
		d(1488) = 97.8750;
		d(1489) = 98.5000;
		d(1490) = 99.3750;
		d(1491) = 99.7500;
		d(1492) = 101.2500;
		d(1493) = 99.8750;
		d(1494) = 99.5000;
		d(1495) = 98.2500;
		d(1496) = 96.8750;
		d(1497) = 97.7500;
		d(1498) = 98.2500;
		d(1499) = 98.2500;
	}

}

class Data8 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(2400) = 74.3750;
		d(2401) = 74.3750;
		d(2402) = 76.7500;
		d(2403) = 76.6875;
		d(2404) = 74.6250;
		d(2405) = 75.0000;
		d(2406) = 74.2500;
		d(2407) = 74.7500;
		d(2408) = 74.4375;
		d(2409) = 73.3125;
		d(2410) = 73.6250;
		d(2411) = 70.9375;
		d(2412) = 71.3750;
		d(2413) = 71.3750;
		d(2414) = 72.2500;
		d(2415) = 71.3750;
		d(2416) = 72.0000;
		d(2417) = 71.8125;
		d(2418) = 70.9375;
		d(2419) = 70.3750;
		d(2420) = 70.9375;
		d(2421) = 73.2500;
		d(2422) = 73.6875;
		d(2423) = 74.1875;
		d(2424) = 73.5625;
		d(2425) = 73.5000;
		d(2426) = 74.1250;
		d(2427) = 74.8750;
		d(2428) = 73.2500;
		d(2429) = 73.2500;
		d(2430) = 72.8750;
		d(2431) = 70.6875;
		d(2432) = 70.2500;
		d(2433) = 67.7500;
		d(2434) = 66.3750;
		d(2435) = 64.0625;
		d(2436) = 64.7500;
		d(2437) = 64.3125;
		d(2438) = 65.0000;
		d(2439) = 64.8125;
		d(2440) = 63.2500;
		d(2441) = 64.5000;
		d(2442) = 64.3750;
		d(2443) = 61.6875;
		d(2444) = 61.0000;
		d(2445) = 60.0000;
		d(2446) = 62.1875;
		d(2447) = 65.5000;
		d(2448) = 63.3750;
		d(2449) = 65.1875;
		d(2450) = 64.5625;
		d(2451) = 63.1250;
		d(2452) = 62.8750;
		d(2453) = 61.5000;
		d(2454) = 61.1250;
		d(2455) = 62.1250;
		d(2456) = 64.5000;
		d(2457) = 68.2500;
		d(2458) = 66.6875;
		d(2459) = 64.0000;
		d(2460) = 64.8750;
		d(2461) = 64.5000;
		d(2462) = 65.0000;
		d(2463) = 63.3750;
		d(2464) = 63.8750;
		d(2465) = 64.0000;
		d(2466) = 64.8750;
		d(2467) = 64.5625;
		d(2468) = 65.3750;
		d(2469) = 65.8125;
		d(2470) = 64.2500;
		d(2471) = 62.9375;
		d(2472) = 61.8125;
		d(2473) = 62.9375;
		d(2474) = 61.5625;
		d(2475) = 61.0000;
		d(2476) = 60.7500;
		d(2477) = 63.1250;
		d(2478) = 62.5625;
		d(2479) = 62.0000;
		d(2480) = 60.8750;
		d(2481) = 61.5000;
		d(2482) = 60.3750;
		d(2483) = 58.6875;
		d(2484) = 57.6250;
		d(2485) = 55.1250;
		d(2486) = 54.8750;
		d(2487) = 55.7500;
		d(2488) = 55.5625;
		d(2489) = 54.2500;
		d(2490) = 56.1875;
		d(2491) = 54.3750;
		d(2492) = 53.4375;
		d(2493) = 52.4375;
		d(2494) = 51.8750;
		d(2495) = 51.7500;
		d(2496) = 50.0000;
		d(2497) = 50.0000;
		d(2498) = 48.7500;
		d(2499) = 49.3750;
		d(2500) = 52.2500;
		d(2501) = 54.7500;
		d(2502) = 49.2500;
		d(2503) = 47.5000;
		d(2504) = 47.1875;
		d(2505) = 46.3750;
		d(2506) = 46.0000;
		d(2507) = 45.5625;
		d(2508) = 46.3125;
		d(2509) = 44.5000;
		d(2510) = 43.3750;
		d(2511) = 41.6875;
		d(2512) = 41.5000;
		d(2513) = 40.5000;
		d(2514) = 41.6250;
		d(2515) = 42.7500;
		d(2516) = 44.1875;
		d(2517) = 44.1875;
		d(2518) = 45.6250;
		d(2519) = 45.0000;
		d(2520) = 43.3750;
		d(2521) = 40.8750;
		d(2522) = 44.1250;
		d(2523) = 41.0625;
		d(2524) = 43.0000;
		d(2525) = 43.2500;
		d(2526) = 46.2500;
		d(2527) = 46.5000;
		d(2528) = 46.5000;
		d(2529) = 45.5000;
		d(2530) = 45.1250;
		d(2531) = 47.0000;
		d(2532) = 47.0625;
		d(2533) = 48.6250;
		d(2534) = 49.5000;
		d(2535) = 50.4375;
		d(2536) = 51.0000;
		d(2537) = 52.3750;
		d(2538) = 51.2500;
		d(2539) = 49.8750;
		d(2540) = 49.8750;
		d(2541) = 51.0000;
		d(2542) = 49.7500;
		d(2543) = 51.0000;
		d(2544) = 56.0000;
		d(2545) = 55.8750;
		d(2546) = 59.8125;
		d(2547) = 60.5000;
		d(2548) = 58.5000;
		d(2549) = 54.1250;
		d(2550) = 53.4375;
		d(2551) = 54.5625;
		d(2552) = 53.2500;
		d(2553) = 53.6875;
		d(2554) = 56.3125;
		d(2555) = 56.5000;
		d(2556) = 56.7500;
		d(2557) = 59.7500;
		d(2558) = 60.7500;
		d(2559) = 62.9375;
		d(2560) = 61.0625;
		d(2561) = 61.0625;
		d(2562) = 63.5000;
		d(2563) = 59.0000;
		d(2564) = 59.2500;
		d(2565) = 61.7500;
		d(2566) = 60.3750;
		d(2567) = 61.2500;
		d(2568) = 58.4375;
		d(2569) = 59.3125;
		d(2570) = 61.3125;
		d(2571) = 60.8750;
		d(2572) = 60.0625;
		d(2573) = 60.0625;
		d(2574) = 58.7500;
		d(2575) = 58.1875;
		d(2576) = 60.1250;
		d(2577) = 62.6875;
		d(2578) = 64.5000;
		d(2579) = 65.0000;
		d(2580) = 62.0000;
		d(2581) = 62.1875;
		d(2582) = 61.1250;
		d(2583) = 61.1250;
		d(2584) = 60.5000;
		d(2585) = 60.5000;
		d(2586) = 61.1875;
		d(2587) = 59.0000;
		d(2588) = 60.4375;
		d(2589) = 60.4375;
		d(2590) = 62.5000;
		d(2591) = 63.0000;
		d(2592) = 63.6875;
		d(2593) = 65.5625;
		d(2594) = 66.5000;
		d(2595) = 67.0625;
		d(2596) = 66.8125;
	}

}

class Data0 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(0) = 121.7500;
		d(1) = 122.5000;
		d(2) = 117.8750;
		d(3) = 115.2500;
		d(4) = 118.5000;
		d(5) = 119.1250;
		d(6) = 118.1250;
		d(7) = 113.0000;
		d(8) = 114.7500;
		d(9) = 115.5000;
		d(10) = 116.7500;
		d(11) = 118.1250;
		d(12) = 118.2500;
		d(13) = 119.0000;
		d(14) = 117.8750;
		d(15) = 114.3750;
		d(16) = 113.2500;
		d(17) = 114.7500;
		d(18) = 115.2500;
		d(19) = 115.7500;
		d(20) = 119.0000;
		d(21) = 119.0000;
		d(22) = 116.0000;
		d(23) = 116.1250;
		d(24) = 114.3750;
		d(25) = 112.7500;
		d(26) = 117.2500;
		d(27) = 116.2500;
		d(28) = 116.2500;
		d(29) = 116.7500;
		d(30) = 116.6250;
		d(31) = 117.8750;
		d(32) = 122.2500;
		d(33) = 128.0000;
		d(34) = 124.7500;
		d(35) = 122.7500;
		d(36) = 122.6250;
		d(37) = 123.0000;
		d(38) = 126.0000;
		d(39) = 126.0000;
		d(40) = 133.0000;
		d(41) = 132.0000;
		d(42) = 129.0000;
		d(43) = 128.0000;
		d(44) = 130.0000;
		d(45) = 128.7500;
		d(46) = 130.3750;
		d(47) = 130.2500;
		d(48) = 130.5000;
		d(49) = 128.0000;
		d(50) = 127.2500;
		d(51) = 131.3750;
		d(52) = 129.2500;
		d(53) = 130.5000;
		d(54) = 132.5000;
		d(55) = 130.2500;
		d(56) = 130.1250;
		d(57) = 129.3750;
		d(58) = 127.8750;
		d(59) = 127.5000;
		d(60) = 127.0000;
		d(61) = 128.2500;
		d(62) = 129.0000;
		d(63) = 128.8750;
		d(64) = 128.2500;
		d(65) = 126.5000;
		d(66) = 125.5000;
		d(67) = 129.2500;
		d(68) = 132.0000;
		d(69) = 133.5000;
		d(70) = 132.0000;
		d(71) = 133.1250;
		d(72) = 133.2500;
		d(73) = 132.7500;
		d(74) = 131.7500;
		d(75) = 127.2500;
		d(76) = 127.5000;
		d(77) = 127.2500;
		d(78) = 129.0000;
		d(79) = 126.8750;
		d(80) = 126.0000;
		d(81) = 127.2500;
		d(82) = 127.0000;
		d(83) = 125.8750;
		d(84) = 125.7500;
		d(85) = 125.5000;
		d(86) = 126.3750;
		d(87) = 124.8750;
		d(88) = 124.5000;
		d(89) = 125.2500;
		d(90) = 127.0000;
		d(91) = 126.0000;
		d(92) = 123.0000;
		d(93) = 125.6250;
		d(94) = 126.1250;
		d(95) = 122.5000;
		d(96) = 123.5000;
		d(97) = 122.1250;
		d(98) = 127.2500;
		d(99) = 129.5000;
		d(100) = 128.7500;
		d(101) = 129.0000;
		d(102) = 129.7500;
		d(103) = 129.7500;
		d(104) = 131.0000;
		d(105) = 128.7500;
		d(106) = 125.2500;
		d(107) = 125.7500;
		d(108) = 124.7500;
		d(109) = 122.2500;
		d(110) = 122.1250;
		d(111) = 121.2500;
		d(112) = 121.5000;
		d(113) = 123.6250;
		d(114) = 123.0000;
		d(115) = 120.3750;
		d(116) = 117.5000;
		d(117) = 119.1250;
		d(118) = 116.2500;
		d(119) = 116.3750;
		d(120) = 114.8750;
		d(121) = 119.2500;
		d(122) = 117.2500;
		d(123) = 115.7500;
		d(124) = 115.5000;
		d(125) = 117.0000;
		d(126) = 118.2500;
		d(127) = 119.2500;
		d(128) = 116.0000;
		d(129) = 117.6250;
		d(130) = 115.8750;
		d(131) = 117.1250;
		d(132) = 118.7500;
		d(133) = 117.3750;
		d(134) = 118.2500;
		d(135) = 116.7500;
		d(136) = 117.8750;
		d(137) = 115.5000;
		d(138) = 115.6250;
		d(139) = 115.7500;
		d(140) = 115.0000;
		d(141) = 115.3750;
		d(142) = 115.1250;
		d(143) = 115.2500;
		d(144) = 115.7500;
		d(145) = 116.0000;
		d(146) = 119.5000;
		d(147) = 119.6250;
		d(148) = 119.6250;
		d(149) = 120.0000;
		d(150) = 119.7500;
		d(151) = 123.2500;
		d(152) = 122.5000;
		d(153) = 121.5000;
		d(154) = 120.7500;
		d(155) = 119.0000;
		d(156) = 120.6250;
		d(157) = 119.8750;
		d(158) = 119.1250;
		d(159) = 121.5000;
		d(160) = 122.2500;
		d(161) = 120.5000;
		d(162) = 118.0000;
		d(163) = 119.6250;
		d(164) = 118.6250;
		d(165) = 116.2500;
		d(166) = 119.0000;
		d(167) = 119.3750;
		d(168) = 119.6250;
		d(169) = 116.0000;
		d(170) = 113.8750;
		d(171) = 114.0000;
		d(172) = 112.7500;
		d(173) = 111.6250;
		d(174) = 107.3750;
		d(175) = 107.1250;
		d(176) = 108.0000;
		d(177) = 109.2500;
		d(178) = 109.0000;
		d(179) = 111.0000;
		d(180) = 111.5000;
		d(181) = 113.2500;
		d(182) = 114.2500;
		d(183) = 115.3750;
		d(184) = 113.6250;
		d(185) = 111.8750;
		d(186) = 110.0000;
		d(187) = 108.3750;
		d(188) = 106.7500;
		d(189) = 109.7500;
		d(190) = 116.7500;
		d(191) = 117.3750;
		d(192) = 118.1250;
		d(193) = 118.0000;
		d(194) = 115.1250;
		d(195) = 115.1250;
		d(196) = 115.2500;
		d(197) = 114.5000;
		d(198) = 113.3750;
		d(199) = 112.2500;
		d(200) = 113.1250;
		d(201) = 112.8750;
		d(202) = 114.7500;
		d(203) = 112.5000;
		d(204) = 114.5000;
		d(205) = 114.7500;
		d(206) = 115.0000;
		d(207) = 114.2500;
		d(208) = 115.2500;
		d(209) = 116.1250;
		d(210) = 115.6250;
		d(211) = 115.7500;
		d(212) = 115.3750;
		d(213) = 114.6250;
		d(214) = 116.8750;
		d(215) = 116.1250;
		d(216) = 120.1250;
		d(217) = 120.2500;
		d(218) = 120.3750;
		d(219) = 121.0000;
		d(220) = 120.5000;
		d(221) = 119.5000;
		d(222) = 118.5000;
		d(223) = 117.7500;
		d(224) = 117.8750;
		d(225) = 117.5000;
		d(226) = 116.2500;
		d(227) = 115.0000;
		d(228) = 112.7500;
		d(229) = 112.7500;
		d(230) = 110.7500;
		d(231) = 109.8750;
		d(232) = 108.6250;
		d(233) = 108.7500;
		d(234) = 108.0000;
		d(235) = 107.0000;
		d(236) = 106.0000;
		d(237) = 105.8750;
		d(238) = 107.6250;
		d(239) = 107.1250;
		d(240) = 106.7500;
		d(241) = 107.7500;
		d(242) = 107.3750;
		d(243) = 106.8750;
		d(244) = 107.2500;
		d(245) = 107.5000;
		d(246) = 108.3750;
		d(247) = 111.2500;
		d(248) = 112.6250;
		d(249) = 112.0000;
		d(250) = 110.3750;
		d(251) = 111.1250;
		d(252) = 110.6250;
		d(253) = 108.7500;
		d(254) = 105.2500;
		d(255) = 105.7500;
		d(256) = 105.0000;
		d(257) = 106.0000;
		d(258) = 105.5000;
		d(259) = 105.5000;
		d(260) = 104.2500;
		d(261) = 100.5000;
		d(262) = 103.0000;
		d(263) = 103.5000;
		d(264) = 105.0000;
		d(265) = 106.7500;
		d(266) = 103.8750;
		d(267) = 104.2500;
		d(268) = 103.2500;
		d(269) = 103.3750;
		d(270) = 103.6250;
		d(271) = 103.7500;
		d(272) = 103.7500;
		d(273) = 104.0000;
		d(274) = 102.8750;
		d(275) = 102.6250;
		d(276) = 102.6250;
		d(277) = 102.6250;
		d(278) = 102.7500;
		d(279) = 102.2500;
		d(280) = 101.7500;
		d(281) = 102.0000;
		d(282) = 101.8750;
		d(283) = 103.5000;
		d(284) = 102.8750;
		d(285) = 101.1250;
		d(286) = 101.3750;
		d(287) = 100.5000;
		d(288) = 101.6250;
		d(289) = 101.6250;
		d(290) = 102.2500;
		d(291) = 105.0000;
		d(292) = 104.8750;
		d(293) = 109.6250;
		d(294) = 110.0000;
		d(295) = 108.5000;
		d(296) = 110.5000;
		d(297) = 107.6250;
		d(298) = 106.6250;
		d(299) = 105.5000;
	}

}

class PriceStock {
	private val mcPath: MonteCarloPath;
	private var randomSeed: Long;
	private var pathStartValue: Double;
	private var expectedReturnRate: Double;
	private var volatility: Double;
	private var volatility2: Double;
	private var finalStockPrice: Double;
	private var pathValue: DistArray[Double]{(self.rank == 1)};

	public def this() {
		randomSeed = -1;
		mcPath = new MonteCarloPath();
	}


	public def setInitAllTasks(val initAllTasks: ToInitAllTasks) {
{
			mcPath.setDTime(initAllTasks.getDTime());
			mcPath.setReturnDefinition(initAllTasks.getReturnDefinition());
			mcPath.setExpectedReturnRate(initAllTasks.getExpectedReturnRate());
			mcPath.setVolatility(initAllTasks.getVolatility());
			val nTimeSteps <: Int = initAllTasks.getNTimeSteps();
			mcPath.setNTimeSteps(nTimeSteps);
			pathStartValue = initAllTasks.getPathStartValue();
			mcPath.setPathStartValue(pathStartValue);
			val dTS <: Dist{(self.rank == 1)} = ((0..(nTimeSteps - 1))->here);
			mcPath.setPathValue((DistArray.make[Double](dTS)));
			mcPath.setFluctuations((DistArray.make[Double](dTS)));
		}	}

	public def setTask(val task: ToTask) {
		randomSeed = task.getRandomSeed();
	}

	public def run() {
		mcPath.computeFluctuationsGaussian(randomSeed);
		mcPath.computePathValue(pathStartValue);
		var rateP: RatePath = new RatePath(mcPath);
		var returnP: ReturnPath = rateP.getReturnCompounded();
		returnP.estimatePath();
		expectedReturnRate = returnP.getExpectedReturnRate();
		volatility = returnP.getVolatility();
		volatility2 = returnP.getVolatility2();
		finalStockPrice = rateP.getEndPathValue();
		pathValue = mcPath.getPathValue();
	}

	public def getResult(): ToResult {
		var res: ToResult = new ToResult(expectedReturnRate, volatility, volatility2, finalStockPrice, pathValue);
		return res;
	}

}

class RatePath {
	private var pathValue: DistArray[Double]{(self.rank == 1)};
	private var nAcceptedPathValue: Int;
	private var dTime: Double;

	public def this() {
		var dPath: Dist{(self.rank == 1)} = ((0..2596)->here);
		val pv <: DistArray[Double]{(self.rank == 1)} = (DistArray.make[Double](dPath));
		pathValue = pv;
		Data0.fill(pv);
		Data1.fill(pv);
		Data2.fill(pv);
		Data3.fill(pv);
		Data4.fill(pv);
		Data5.fill(pv);
		Data6.fill(pv);
		Data7.fill(pv);
		Data8.fill(pv);
		nAcceptedPathValue = dPath.region.size();
		dTime = ((1.0 / 365.0));
	}

	public def this(val mc: MonteCarloPath) {
		dTime = mc.getDTime();
		pathValue = mc.getPathValue();
		nAcceptedPathValue = mc.getNTimeSteps();
	}


	public def getReturnCompounded(): ReturnPath {
		var dAPV: Dist{(self.rank == 1)} = ((0..(nAcceptedPathValue - 1))->here);
		var returnPathValue: DistArray[Double]{(self.rank == 1)} = (DistArray.make[Double](dAPV));
		returnPathValue(0) = 0.0;
		for (i: Point{(self.rank == 1)} in (1..(nAcceptedPathValue - 1))) 
			returnPathValue(i) = Math.log(((pathValue(i) / pathValue((i + Point.make([-1])))) as Double));
		var rPath: ReturnPath = new ReturnPath(returnPathValue, nAcceptedPathValue, ReturnPath.COMPOUNDED);
		rPath.setDTime(dTime);
		rPath.estimatePath();
		return rPath;
	}

	public def getEndPathValue(): Double {
		return pathValue((pathValue.region.size() - 1));
	}

}

class Data7 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(2100) = 87.5000;
		d(2101) = 89.7500;
		d(2102) = 89.6250;
		d(2103) = 90.5000;
		d(2104) = 89.5000;
		d(2105) = 88.7500;
		d(2106) = 89.2500;
		d(2107) = 89.3750;
		d(2108) = 89.5000;
		d(2109) = 89.2500;
		d(2110) = 92.5000;
		d(2111) = 92.6250;
		d(2112) = 93.7500;
		d(2113) = 92.5000;
		d(2114) = 92.7500;
		d(2115) = 92.0000;
		d(2116) = 91.0000;
		d(2117) = 90.7500;
		d(2118) = 90.0000;
		d(2119) = 89.5000;
		d(2120) = 87.7500;
		d(2121) = 88.0000;
		d(2122) = 88.2500;
		d(2123) = 87.7500;
		d(2124) = 86.8750;
		d(2125) = 87.7500;
		d(2126) = 88.2500;
		d(2127) = 86.7500;
		d(2128) = 88.8750;
		d(2129) = 87.5000;
		d(2130) = 87.1250;
		d(2131) = 88.0000;
		d(2132) = 88.2500;
		d(2133) = 87.7500;
		d(2134) = 87.3750;
		d(2135) = 86.7500;
		d(2136) = 87.6250;
		d(2137) = 86.1250;
		d(2138) = 86.6250;
		d(2139) = 87.8750;
		d(2140) = 87.8750;
		d(2141) = 88.6250;
		d(2142) = 90.0000;
		d(2143) = 91.3750;
		d(2144) = 91.5000;
		d(2145) = 90.0000;
		d(2146) = 91.3750;
		d(2147) = 89.6250;
		d(2148) = 89.1250;
		d(2149) = 89.1250;
		d(2150) = 88.6250;
		d(2151) = 88.3750;
		d(2152) = 89.5000;
		d(2153) = 90.0000;
		d(2154) = 90.3750;
		d(2155) = 90.7500;
		d(2156) = 89.7500;
		d(2157) = 90.2500;
		d(2158) = 90.8750;
		d(2159) = 90.2500;
		d(2160) = 90.7500;
		d(2161) = 91.5000;
		d(2162) = 91.7500;
		d(2163) = 95.7500;
		d(2164) = 97.2500;
		d(2165) = 98.1250;
		d(2166) = 102.0000;
		d(2167) = 100.2500;
		d(2168) = 101.3750;
		d(2169) = 101.3750;
		d(2170) = 103.0000;
		d(2171) = 105.0000;
		d(2172) = 105.6250;
		d(2173) = 104.5000;
		d(2174) = 105.3750;
		d(2175) = 106.7500;
		d(2176) = 110.1250;
		d(2177) = 108.6250;
		d(2178) = 104.7500;
		d(2179) = 108.0000;
		d(2180) = 106.3750;
		d(2181) = 107.5000;
		d(2182) = 111.0000;
		d(2183) = 108.5000;
		d(2184) = 109.3750;
		d(2185) = 109.6250;
		d(2186) = 111.0000;
		d(2187) = 109.6250;
		d(2188) = 110.6250;
		d(2189) = 111.8750;
		d(2190) = 112.3750;
		d(2191) = 112.3750;
		d(2192) = 112.3750;
		d(2193) = 111.3750;
		d(2194) = 113.7500;
		d(2195) = 113.7500;
		d(2196) = 113.6250;
		d(2197) = 115.0000;
		d(2198) = 115.8750;
		d(2199) = 115.7500;
		d(2200) = 115.9375;
		d(2201) = 116.5000;
		d(2202) = 117.1250;
		d(2203) = 115.5000;
		d(2204) = 112.8125;
		d(2205) = 112.6875;
		d(2206) = 113.7500;
		d(2207) = 114.5000;
		d(2208) = 114.5000;
		d(2209) = 114.2500;
		d(2210) = 113.7500;
		d(2211) = 114.0000;
		d(2212) = 112.8125;
		d(2213) = 113.0000;
		d(2214) = 113.2500;
		d(2215) = 117.0000;
		d(2216) = 116.2500;
		d(2217) = 114.6250;
		d(2218) = 114.1875;
		d(2219) = 113.0000;
		d(2220) = 112.2500;
		d(2221) = 112.6875;
		d(2222) = 112.0000;
		d(2223) = 112.7500;
		d(2224) = 112.7500;
		d(2225) = 113.0000;
		d(2226) = 112.6250;
		d(2227) = 113.9375;
		d(2228) = 114.6250;
		d(2229) = 112.1250;
		d(2230) = 112.7500;
		d(2231) = 112.7500;
		d(2232) = 114.2500;
		d(2233) = 112.2500;
		d(2234) = 112.1250;
		d(2235) = 108.5000;
		d(2236) = 108.7500;
		d(2237) = 107.3125;
		d(2238) = 106.0000;
		d(2239) = 103.0000;
		d(2240) = 106.3750;
		d(2241) = 106.0000;
		d(2242) = 103.9375;
		d(2243) = 101.6875;
		d(2244) = 101.6875;
		d(2245) = 97.5625;
		d(2246) = 93.7500;
		d(2247) = 93.2500;
		d(2248) = 92.8750;
		d(2249) = 95.0000;
		d(2250) = 93.0000;
		d(2251) = 91.6250;
		d(2252) = 89.8750;
		d(2253) = 90.3750;
		d(2254) = 89.7500;
		d(2255) = 88.0000;
		d(2256) = 87.0000;
		d(2257) = 88.1250;
		d(2258) = 85.9375;
		d(2259) = 85.5000;
		d(2260) = 88.0625;
		d(2261) = 87.6250;
		d(2262) = 91.5000;
		d(2263) = 91.2500;
		d(2264) = 92.7500;
		d(2265) = 89.0625;
		d(2266) = 87.2500;
		d(2267) = 88.1250;
		d(2268) = 88.1875;
		d(2269) = 86.6875;
		d(2270) = 88.0000;
		d(2271) = 90.9375;
		d(2272) = 93.1875;
		d(2273) = 93.5625;
		d(2274) = 93.8125;
		d(2275) = 92.5000;
		d(2276) = 93.5000;
		d(2277) = 90.5000;
		d(2278) = 90.9375;
		d(2279) = 90.6875;
		d(2280) = 90.5000;
		d(2281) = 89.6250;
		d(2282) = 88.6875;
		d(2283) = 87.1875;
		d(2284) = 87.0625;
		d(2285) = 87.3750;
		d(2286) = 86.1250;
		d(2287) = 79.7500;
		d(2288) = 83.1875;
		d(2289) = 83.2500;
		d(2290) = 80.4375;
		d(2291) = 80.0000;
		d(2292) = 83.0625;
		d(2293) = 80.6250;
		d(2294) = 79.2500;
		d(2295) = 77.9375;
		d(2296) = 73.6250;
		d(2297) = 71.6875;
		d(2298) = 72.0000;
		d(2299) = 70.5000;
		d(2300) = 73.1875;
		d(2301) = 72.9375;
		d(2302) = 75.6250;
		d(2303) = 74.3125;
		d(2304) = 71.6250;
		d(2305) = 72.8750;
		d(2306) = 73.4375;
		d(2307) = 71.2500;
		d(2308) = 72.8750;
		d(2309) = 72.3750;
		d(2310) = 71.7500;
		d(2311) = 73.1250;
		d(2312) = 73.7500;
		d(2313) = 74.3125;
		d(2314) = 73.3125;
		d(2315) = 74.0000;
		d(2316) = 72.6875;
		d(2317) = 73.5000;
		d(2318) = 73.0000;
		d(2319) = 72.2500;
		d(2320) = 71.8125;
		d(2321) = 73.1250;
		d(2322) = 72.3750;
		d(2323) = 74.8750;
		d(2324) = 73.0000;
		d(2325) = 71.0000;
		d(2326) = 69.5000;
		d(2327) = 68.5000;
		d(2328) = 68.0000;
		d(2329) = 68.8750;
		d(2330) = 69.6250;
		d(2331) = 70.6875;
		d(2332) = 69.1250;
		d(2333) = 71.1250;
		d(2334) = 72.3125;
		d(2335) = 72.5625;
		d(2336) = 73.3125;
		d(2337) = 71.8750;
		d(2338) = 68.3125;
		d(2339) = 69.8125;
		d(2340) = 71.0000;
		d(2341) = 71.3750;
		d(2342) = 71.9375;
		d(2343) = 77.1250;
		d(2344) = 78.3750;
		d(2345) = 80.2500;
		d(2346) = 83.0000;
		d(2347) = 83.5000;
		d(2348) = 83.8750;
		d(2349) = 84.6250;
		d(2350) = 81.6875;
		d(2351) = 80.7500;
		d(2352) = 80.0625;
		d(2353) = 83.0000;
		d(2354) = 84.0625;
		d(2355) = 82.7500;
		d(2356) = 82.2500;
		d(2357) = 83.4375;
		d(2358) = 82.6875;
		d(2359) = 82.0000;
		d(2360) = 81.8750;
		d(2361) = 80.5000;
		d(2362) = 80.4375;
		d(2363) = 78.5000;
		d(2364) = 77.0000;
		d(2365) = 76.9375;
		d(2366) = 75.8750;
		d(2367) = 76.1250;
		d(2368) = 73.3750;
		d(2369) = 72.7500;
		d(2370) = 75.2500;
		d(2371) = 75.7500;
		d(2372) = 79.0000;
		d(2373) = 78.1875;
		d(2374) = 77.6875;
		d(2375) = 76.2500;
		d(2376) = 77.4375;
		d(2377) = 76.1875;
		d(2378) = 76.3125;
		d(2379) = 75.5000;
		d(2380) = 73.5000;
		d(2381) = 75.3750;
		d(2382) = 74.1250;
		d(2383) = 74.0000;
		d(2384) = 72.4375;
		d(2385) = 72.6875;
		d(2386) = 73.7500;
		d(2387) = 73.1250;
		d(2388) = 72.0000;
		d(2389) = 73.1250;
		d(2390) = 75.8750;
		d(2391) = 75.7500;
		d(2392) = 74.0000;
		d(2393) = 73.5000;
		d(2394) = 74.7500;
		d(2395) = 74.2500;
		d(2396) = 70.6250;
		d(2397) = 71.3750;
		d(2398) = 70.6250;
		d(2399) = 72.6250;
	}

}

class ToTask {
	private var rseed: Long;

	public def this(val rseed0: Long) {
		rseed = rseed0;
	}


	public def getRandomSeed(): Long {
		return rseed;
	}

}

class Data2 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(600) = 99.5000;
		d(601) = 99.2500;
		d(602) = 97.6250;
		d(603) = 96.3750;
		d(604) = 97.1250;
		d(605) = 98.2500;
		d(606) = 95.0000;
		d(607) = 97.7500;
		d(608) = 97.5000;
		d(609) = 94.2500;
		d(610) = 94.5000;
		d(611) = 95.7500;
		d(612) = 97.6250;
		d(613) = 95.3750;
		d(614) = 96.0000;
		d(615) = 94.2500;
		d(616) = 95.0000;
		d(617) = 95.0000;
		d(618) = 95.0000;
		d(619) = 95.2500;
		d(620) = 94.6250;
		d(621) = 92.8750;
		d(622) = 92.3750;
		d(623) = 92.8750;
		d(624) = 91.0000;
		d(625) = 89.3750;
		d(626) = 89.6250;
		d(627) = 88.1250;
		d(628) = 87.7500;
		d(629) = 87.0000;
		d(630) = 90.0000;
		d(631) = 91.2500;
		d(632) = 92.2500;
		d(633) = 90.5000;
		d(634) = 91.0000;
		d(635) = 90.0000;
		d(636) = 90.0000;
		d(637) = 90.5000;
		d(638) = 91.5000;
		d(639) = 92.0000;
		d(640) = 92.7500;
		d(641) = 92.1250;
		d(642) = 90.5000;
		d(643) = 89.0000;
		d(644) = 86.7500;
		d(645) = 88.1250;
		d(646) = 87.8750;
		d(647) = 86.6250;
		d(648) = 87.2500;
		d(649) = 87.0000;
		d(650) = 88.2500;
		d(651) = 88.5000;
		d(652) = 88.5000;
		d(653) = 88.2500;
		d(654) = 87.7500;
		d(655) = 87.6250;
		d(656) = 87.7500;
		d(657) = 87.7500;
		d(658) = 86.2500;
		d(659) = 86.3750;
		d(660) = 85.0000;
		d(661) = 84.3750;
		d(662) = 84.5000;
		d(663) = 83.1250;
		d(664) = 80.0000;
		d(665) = 80.2500;
		d(666) = 81.2500;
		d(667) = 81.5000;
		d(668) = 81.7500;
		d(669) = 82.1250;
		d(670) = 83.8750;
		d(671) = 85.0000;
		d(672) = 85.2500;
		d(673) = 83.7500;
		d(674) = 83.2500;
		d(675) = 82.8750;
		d(676) = 83.0000;
		d(677) = 80.5000;
		d(678) = 79.3750;
		d(679) = 80.2500;
		d(680) = 79.6250;
		d(681) = 79.8750;
		d(682) = 80.7500;
		d(683) = 79.3750;
		d(684) = 78.2500;
		d(685) = 76.5000;
		d(686) = 78.3750;
		d(687) = 78.1250;
		d(688) = 76.2500;
		d(689) = 79.0000;
		d(690) = 77.7500;
		d(691) = 79.5000;
		d(692) = 78.7500;
		d(693) = 82.6250;
		d(694) = 82.6250;
		d(695) = 80.2500;
		d(696) = 82.3750;
		d(697) = 81.8750;
		d(698) = 84.2500;
		d(699) = 84.7500;
		d(700) = 84.2500;
		d(701) = 85.6250;
		d(702) = 84.8750;
		d(703) = 83.3750;
		d(704) = 81.8750;
		d(705) = 82.0000;
		d(706) = 82.5000;
		d(707) = 81.7500;
		d(708) = 82.1250;
		d(709) = 83.0000;
		d(710) = 81.2500;
		d(711) = 83.6250;
		d(712) = 83.6250;
		d(713) = 85.0000;
		d(714) = 84.7500;
		d(715) = 84.2500;
		d(716) = 84.7500;
		d(717) = 84.1250;
		d(718) = 83.7500;
		d(719) = 82.7500;
		d(720) = 82.3750;
		d(721) = 81.7500;
		d(722) = 81.1250;
		d(723) = 80.8750;
		d(724) = 80.5000;
		d(725) = 79.2500;
		d(726) = 77.3750;
		d(727) = 74.7500;
		d(728) = 75.1250;
		d(729) = 79.6250;
		d(730) = 78.7500;
		d(731) = 78.5000;
		d(732) = 76.5000;
		d(733) = 75.3750;
		d(734) = 76.5000;
		d(735) = 76.7500;
		d(736) = 76.5000;
		d(737) = 76.5000;
		d(738) = 77.0000;
		d(739) = 76.6250;
		d(740) = 77.5000;
		d(741) = 78.2500;
		d(742) = 77.0000;
		d(743) = 76.0000;
		d(744) = 76.5000;
		d(745) = 77.1250;
		d(746) = 77.5000;
		d(747) = 77.5000;
		d(748) = 78.1250;
		d(749) = 77.7500;
		d(750) = 77.2500;
		d(751) = 76.7500;
		d(752) = 78.1250;
		d(753) = 78.2500;
		d(754) = 77.3750;
		d(755) = 78.0000;
		d(756) = 78.3750;
		d(757) = 78.7500;
		d(758) = 79.3750;
		d(759) = 79.3750;
		d(760) = 79.0000;
		d(761) = 78.7500;
		d(762) = 78.0000;
		d(763) = 78.2500;
		d(764) = 77.7500;
		d(765) = 77.3750;
		d(766) = 77.6250;
		d(767) = 77.1250;
		d(768) = 77.2500;
		d(769) = 77.5000;
		d(770) = 77.5000;
		d(771) = 76.2500;
		d(772) = 76.0000;
		d(773) = 75.2500;
		d(774) = 75.5000;
		d(775) = 75.7500;
		d(776) = 75.7500;
		d(777) = 76.0000;
		d(778) = 76.2500;
		d(779) = 76.8750;
		d(780) = 76.7500;
		d(781) = 77.2500;
		d(782) = 76.8750;
		d(783) = 76.8750;
		d(784) = 76.7500;
		d(785) = 75.7500;
		d(786) = 75.2500;
		d(787) = 75.2500;
		d(788) = 75.0000;
		d(789) = 72.8750;
		d(790) = 70.8750;
		d(791) = 72.5000;
		d(792) = 70.8750;
		d(793) = 71.0000;
		d(794) = 70.0000;
		d(795) = 69.7500;
		d(796) = 70.5000;
		d(797) = 70.0000;
		d(798) = 67.7500;
		d(799) = 68.5000;
		d(800) = 69.8750;
		d(801) = 70.5000;
		d(802) = 73.0000;
		d(803) = 72.2500;
		d(804) = 71.5000;
		d(805) = 71.1250;
		d(806) = 70.1250;
		d(807) = 69.7500;
		d(808) = 71.2500;
		d(809) = 70.3750;
		d(810) = 71.0000;
		d(811) = 70.7500;
		d(812) = 70.1250;
		d(813) = 68.7500;
		d(814) = 68.2500;
		d(815) = 68.7500;
		d(816) = 69.0000;
		d(817) = 70.7500;
		d(818) = 69.7500;
		d(819) = 73.5000;
		d(820) = 74.5000;
		d(821) = 75.0000;
		d(822) = 76.3750;
		d(823) = 75.6250;
		d(824) = 75.2500;
		d(825) = 73.5000;
		d(826) = 72.5000;
		d(827) = 71.5000;
		d(828) = 70.5000;
		d(829) = 71.7500;
		d(830) = 71.8750;
		d(831) = 71.6250;
		d(832) = 73.0000;
		d(833) = 73.1250;
		d(834) = 74.5000;
		d(835) = 75.7500;
		d(836) = 75.5000;
		d(837) = 74.0000;
		d(838) = 73.1250;
		d(839) = 73.2500;
		d(840) = 72.7500;
		d(841) = 73.8750;
		d(842) = 73.8750;
		d(843) = 73.5000;
		d(844) = 73.8750;
		d(845) = 73.5000;
		d(846) = 72.7500;
		d(847) = 72.1250;
		d(848) = 71.0000;
		d(849) = 69.7500;
		d(850) = 69.3750;
		d(851) = 69.2500;
		d(852) = 68.5000;
		d(853) = 67.1250;
		d(854) = 66.1250;
		d(855) = 66.6250;
		d(856) = 66.7500;
		d(857) = 66.3750;
		d(858) = 65.6250;
		d(859) = 66.0000;
		d(860) = 65.1250;
		d(861) = 64.6250;
		d(862) = 64.5000;
		d(863) = 63.0000;
		d(864) = 62.0000;
		d(865) = 60.5000;
		d(866) = 59.8750;
		d(867) = 59.0000;
		d(868) = 58.0000;
		d(869) = 56.5000;
		d(870) = 58.7500;
		d(871) = 57.7500;
		d(872) = 57.0000;
		d(873) = 57.7500;
		d(874) = 58.0000;
		d(875) = 58.7500;
		d(876) = 58.2500;
		d(877) = 58.1250;
		d(878) = 58.7500;
		d(879) = 59.2500;
		d(880) = 59.0000;
		d(881) = 58.6250;
		d(882) = 58.8750;
		d(883) = 58.7500;
		d(884) = 57.1250;
		d(885) = 58.0000;
		d(886) = 57.6250;
		d(887) = 59.0000;
		d(888) = 58.7500;
		d(889) = 58.3750;
		d(890) = 60.8750;
		d(891) = 61.6250;
		d(892) = 60.7500;
		d(893) = 62.2500;
		d(894) = 62.7500;
		d(895) = 62.6250;
		d(896) = 61.1250;
		d(897) = 61.2500;
		d(898) = 61.8750;
		d(899) = 62.5000;
	}

}

class Data5 {

	public static def fill(val d: DistArray[Double]{(self.rank == 1)}) {
		d(1500) = 98.1250;
		d(1501) = 97.2500;
		d(1502) = 96.2500;
		d(1503) = 95.8750;
		d(1504) = 97.0000;
		d(1505) = 98.0000;
		d(1506) = 98.1250;
		d(1507) = 98.5000;
		d(1508) = 98.0000;
		d(1509) = 97.5000;
		d(1510) = 97.2500;
		d(1511) = 97.2500;
		d(1512) = 96.7500;
		d(1513) = 95.8750;
		d(1514) = 96.5000;
		d(1515) = 97.0000;
		d(1516) = 98.5000;
		d(1517) = 98.5000;
		d(1518) = 99.1250;
		d(1519) = 98.8750;
		d(1520) = 100.0000;
		d(1521) = 100.1250;
		d(1522) = 101.1250;
		d(1523) = 102.1250;
		d(1524) = 102.5000;
		d(1525) = 102.3750;
		d(1526) = 101.2500;
		d(1527) = 102.2500;
		d(1528) = 101.6250;
		d(1529) = 102.1250;
		d(1530) = 102.5000;
		d(1531) = 101.7500;
		d(1532) = 102.2500;
		d(1533) = 102.7500;
		d(1534) = 102.6250;
		d(1535) = 101.7500;
		d(1536) = 100.7500;
		d(1537) = 99.8750;
		d(1538) = 99.2500;
		d(1539) = 98.8750;
		d(1540) = 98.7500;
		d(1541) = 99.0000;
		d(1542) = 99.0000;
		d(1543) = 99.5000;
		d(1544) = 99.5000;
		d(1545) = 99.5000;
		d(1546) = 98.0000;
		d(1547) = 96.7500;
		d(1548) = 96.2500;
		d(1549) = 96.2500;
		d(1550) = 96.3750;
		d(1551) = 96.6250;
		d(1552) = 97.5000;
		d(1553) = 97.5000;
		d(1554) = 98.1250;
		d(1555) = 98.5000;
		d(1556) = 98.7500;
		d(1557) = 97.8750;
		d(1558) = 98.0000;
		d(1559) = 97.3750;
		d(1560) = 97.5000;
		d(1561) = 96.5000;
		d(1562) = 96.6250;
		d(1563) = 96.2500;
		d(1564) = 96.2500;
		d(1565) = 96.1250;
		d(1566) = 96.5000;
		d(1567) = 96.2500;
		d(1568) = 96.2500;
		d(1569) = 96.5000;
		d(1570) = 97.2500;
		d(1571) = 97.6250;
		d(1572) = 98.7500;
		d(1573) = 98.7500;
		d(1574) = 98.6250;
		d(1575) = 97.8750;
		d(1576) = 98.0000;
		d(1577) = 97.8750;
		d(1578) = 98.5000;
		d(1579) = 98.3750;
		d(1580) = 98.2500;
		d(1581) = 97.7500;
		d(1582) = 97.1250;
		d(1583) = 98.3750;
		d(1584) = 95.7500;
		d(1585) = 93.5000;
		d(1586) = 92.3750;
		d(1587) = 92.0000;
		d(1588) = 87.7500;
		d(1589) = 88.7500;
		d(1590) = 90.2500;
		d(1591) = 89.1250;
		d(1592) = 89.0000;
		d(1593) = 89.6250;
		d(1594) = 87.8750;
		d(1595) = 87.0000;
		d(1596) = 87.2500;
		d(1597) = 86.6250;
		d(1598) = 86.6250;
		d(1599) = 85.7500;
		d(1600) = 85.8750;
		d(1601) = 86.5000;
		d(1602) = 87.5000;
		d(1603) = 88.5000;
		d(1604) = 86.5000;
		d(1605) = 85.5000;
		d(1606) = 82.8750;
		d(1607) = 86.3750;
		d(1608) = 86.7500;
		d(1609) = 87.8750;
		d(1610) = 87.0000;
		d(1611) = 86.5000;
		d(1612) = 85.6250;
		d(1613) = 86.8750;
		d(1614) = 87.5000;
		d(1615) = 90.0000;
		d(1616) = 93.3750;
		d(1617) = 94.5000;
		d(1618) = 94.3750;
		d(1619) = 93.0000;
		d(1620) = 93.0000;
		d(1621) = 92.7500;
		d(1622) = 92.6250;
		d(1623) = 92.6250;
		d(1624) = 93.6250;
		d(1625) = 93.8750;
		d(1626) = 93.1250;
		d(1627) = 92.7500;
		d(1628) = 92.2500;
		d(1629) = 92.6250;
		d(1630) = 92.0000;
		d(1631) = 93.7500;
		d(1632) = 95.5000;
		d(1633) = 98.6250;
		d(1634) = 98.0000;
		d(1635) = 99.5000;
		d(1636) = 101.6250;
		d(1637) = 98.5000;
		d(1638) = 99.7500;
		d(1639) = 100.2500;
		d(1640) = 99.1250;
		d(1641) = 99.2500;
		d(1642) = 100.2500;
		d(1643) = 100.2500;
		d(1644) = 102.0000;
		d(1645) = 103.7500;
		d(1646) = 104.6250;
		d(1647) = 104.3750;
		d(1648) = 104.7500;
		d(1649) = 106.3750;
		d(1650) = 107.0000;
		d(1651) = 106.6250;
		d(1652) = 106.0000;
		d(1653) = 103.7500;
		d(1654) = 104.2500;
		d(1655) = 102.7500;
		d(1656) = 103.0000;
		d(1657) = 105.0000;
		d(1658) = 105.2500;
		d(1659) = 106.1250;
		d(1660) = 107.0000;
		d(1661) = 106.7500;
		d(1662) = 102.5000;
		d(1663) = 101.0000;
		d(1664) = 98.2500;
		d(1665) = 98.7500;
		d(1666) = 97.0000;
		d(1667) = 97.7500;
		d(1668) = 98.5000;
		d(1669) = 98.0000;
		d(1670) = 97.5000;
		d(1671) = 96.0000;
		d(1672) = 95.3750;
		d(1673) = 96.1250;
		d(1674) = 97.2500;
		d(1675) = 100.2500;
		d(1676) = 99.3750;
		d(1677) = 98.2500;
		d(1678) = 97.6250;
		d(1679) = 98.6250;
		d(1680) = 100.0000;
		d(1681) = 98.6250;
		d(1682) = 99.8750;
		d(1683) = 99.8750;
		d(1684) = 96.0000;
		d(1685) = 95.5000;
		d(1686) = 94.6250;
		d(1687) = 95.5000;
		d(1688) = 97.3750;
		d(1689) = 96.8750;
		d(1690) = 97.1250;
		d(1691) = 96.5000;
		d(1692) = 97.5000;
		d(1693) = 98.3750;
		d(1694) = 99.0000;
		d(1695) = 100.8750;
		d(1696) = 101.0000;
		d(1697) = 102.0000;
		d(1698) = 98.8750;
		d(1699) = 100.2500;
		d(1700) = 101.0000;
		d(1701) = 101.5000;
		d(1702) = 102.3750;
		d(1703) = 106.0000;
		d(1704) = 107.1250;
		d(1705) = 109.3750;
		d(1706) = 110.5000;
		d(1707) = 110.0000;
		d(1708) = 110.5000;
		d(1709) = 110.0000;
		d(1710) = 108.2500;
		d(1711) = 106.0000;
		d(1712) = 106.0000;
		d(1713) = 106.0000;
		d(1714) = 109.7500;
		d(1715) = 107.3750;
		d(1716) = 107.0000;
		d(1717) = 108.5000;
		d(1718) = 107.3750;
		d(1719) = 107.3750;
		d(1720) = 106.1250;
		d(1721) = 109.7500;
		d(1722) = 114.0000;
		d(1723) = 111.5000;
		d(1724) = 112.0000;
		d(1725) = 112.3750;
		d(1726) = 111.5000;
		d(1727) = 111.0000;
		d(1728) = 110.5000;
		d(1729) = 112.1250;
		d(1730) = 112.1250;
		d(1731) = 111.5000;
		d(1732) = 110.1250;
		d(1733) = 109.5000;
		d(1734) = 110.0000;
		d(1735) = 107.6250;
		d(1736) = 108.1250;
		d(1737) = 107.6250;
		d(1738) = 106.0000;
		d(1739) = 106.3750;
		d(1740) = 110.0000;
		d(1741) = 106.6250;
		d(1742) = 108.7500;
		d(1743) = 110.2500;
		d(1744) = 111.3750;
		d(1745) = 110.7500;
		d(1746) = 110.7500;
		d(1747) = 109.6250;
		d(1748) = 113.1250;
		d(1749) = 110.8750;
		d(1750) = 109.2500;
		d(1751) = 110.1250;
		d(1752) = 108.7500;
		d(1753) = 103.7500;
		d(1754) = 104.0000;
		d(1755) = 102.6250;
		d(1756) = 105.2500;
		d(1757) = 105.2500;
		d(1758) = 105.2500;
		d(1759) = 106.0000;
		d(1760) = 107.0000;
		d(1761) = 108.7500;
		d(1762) = 110.2500;
		d(1763) = 106.0000;
		d(1764) = 108.0000;
		d(1765) = 108.0000;
		d(1766) = 108.7500;
		d(1767) = 108.5000;
		d(1768) = 108.7500;
		d(1769) = 106.2500;
		d(1770) = 105.1250;
		d(1771) = 107.3750;
		d(1772) = 106.6250;
		d(1773) = 106.0000;
		d(1774) = 105.3750;
		d(1775) = 104.1250;
		d(1776) = 105.6250;
		d(1777) = 105.8750;
		d(1778) = 107.2500;
		d(1779) = 106.7500;
		d(1780) = 105.0000;
		d(1781) = 104.8750;
		d(1782) = 103.6250;
		d(1783) = 104.2500;
		d(1784) = 104.6250;
		d(1785) = 104.2500;
		d(1786) = 105.0000;
		d(1787) = 105.0000;
		d(1788) = 105.3750;
		d(1789) = 103.8750;
		d(1790) = 102.3750;
		d(1791) = 103.5000;
		d(1792) = 103.0000;
		d(1793) = 103.2500;
		d(1794) = 102.0000;
		d(1795) = 100.5000;
		d(1796) = 102.1250;
		d(1797) = 102.3750;
		d(1798) = 102.0000;
		d(1799) = 102.6250;
	}

}

class ToResult {
	private var expectedReturnRate: Double;
	private var volatility: Double;
	private var volatility2: Double;
	private var finalStockPrice: Double;
	private var pathValue: DistArray[Double]{(self.rank == 1)};

	public def this(val e: Double, val v: Double, val v2: Double, val f: Double, val p: DistArray[Double]{(self.rank == 1)}) {
		expectedReturnRate = e;
		volatility = v;
		volatility2 = v2;
		finalStockPrice = f;
		pathValue = p;
	}


	public def getExpectedReturnRate(): Double {
		return expectedReturnRate;
	}

	public def getVolatility(): Double {
		return volatility;
	}

	public def getVolatility2(): Double {
		return volatility2;
	}

	public def getFinalStockPrice(): Double {
		return finalStockPrice;
	}

	public def getPathValue(): DistArray[Double]{(self.rank == 1)} {
		return pathValue;
	}

}

class CallAppDemoMain {

	public static def main(args: Array[String]) {
{
			var tmr: Timer = new Timer();
			var count: Int = 0;

				tmr.start(count);

				new CallAppDemo().go();
			tmr.stop(count);
			Console.OUT.println((("Wall-clock time for montecarlo: " + tmr.readTimer(count)) + " secs"));
		}	}

}


class COMPILER_INSERTED_LIB {

	public static def coord(region: Region, pointIndex: Int, coordIndex: Int): Int {
		val iterator = (region.iterator() as (Iterator[Point]));
		var i: Int = 0;
		while (iterator.hasNext()) {
			val point = iterator.next();
			if (i == pointIndex)
				return point(coordIndex);
			i = i + 1;
		}
		return -1;
	}

	public static def ordinal(region: Region, point: Point): Int {
		val iterator = (region.iterator() as (Iterator[Point]));
		var i: Int = 0;
		while (iterator.hasNext()) {
			val p = iterator.next();
			if (point.equals(p))
				return i;
			i = i + 1;
		}
		return -1;
	}

	private static def traverseAll(array: DistArray[Int], fun: (Int, Int) => (Int)): Int {
		val places = array.dist.places();
		//var region: Region(1) = Region.makeEmpty(1);
		//for (place in places) {
			//region = region + [place.id];
			//region = region + Point.make(place.id);
			// "Region +" does not work in this implementation!
			//region = region.union(Region.make(place.id, place.id));
		//}
		val region = 0..(places.size()-1);
		val centralArray = DistArray.make[Int](region->here, (p:Point(1)) => 0);
		val center = here;
		finish {
			var i: Int = -1;
			for (place in places) {
			i = i + 1;
			val j = i;
				async at (place) {
					val localPart = array | here;
					var result: Int = 0;
					for (point in localPart)
						result = fun(result, array(point));
					val finalResult = result;
					async at (center) {
						centralArray(Point.make(j)) = finalResult;
					}
				}
			}
		}
		var result: Int = 0;
		for (point in centralArray.region)
			result += centralArray(point);
		return result;
	}
	private static def traverseAll(array: DistArray[Double], fun: (Double, Double) => (Double)): Double {
		val places = array.dist.places();
		//var region: Region(1) = Region.makeEmpty(1);
		//for (place in places) {
			//region = region + [place.id];
			//region = region + Point.make(place.id);
			// "Region +" does not work in this implementation!
			//region = region.union(Region.make(place.id, place.id));
		//}
		val region = 0..(places.size()-1);
		val centralArray = DistArray.make[Double](region->here, (p:Point(1)) => 0.0);
		val center = here;
		finish {
			var i: Int = -1;
			for (place in places) {
			i = i + 1;
			val j = i;
				async at (place) {
					val localPart = array | here;
					var result: Double = 0;
					for (point in localPart)
						result = fun(result, array(point));
					val finalResult = result;
					async at (center) {
						centralArray(Point.make(j)) = finalResult;
					}
				}
			}
		}
		var result: Double = 0;
		for (point:Point(1) in centralArray.region)
			result += centralArray(point);
		return result;
	}

	public static def sum(array: DistArray[Int]): Int {
		return traverseAll(array, (i1: Int, i2: Int) => i1 + i2);
	}
	public static def sum(array: DistArray[Double]): Double {
		return traverseAll(array, (i1: Double, i2: Double) => i1 + i2);
	}
	public static def max(array: DistArray[Int]): Int {
		return traverseAll(array, (i1: Int, i2: Int) => Math.max(i1,i2));
	}
	public static def max(array: DistArray[Double]): Double {
		return traverseAll(array, (i1: Double, i2: Double) => Math.max(i1,i2));
	}
}