CompilationUnit
	mainClass: MainClass
		name: Identifier
			token:  "LinkedList"
		parameterName: Identifier
			token:  "a"
		varDeclarations: List
		statements: List
			[0]: Print
				argument: MethodCall
					receiver: Allocation
						className: Identifier
							token:  "LL"
					methodName: Identifier
						token:  "Start"
					arguments: List
	classes: List
		[0]: Class
			name: Identifier
				token:  "Element"
			varDeclarations: List
				[0]: VarDeclaration
					type: IntType
					identifier: Identifier
						token:  "Age"
				[1]: VarDeclaration
					type: IntType
					identifier: Identifier
						token:  "Salary"
				[2]: VarDeclaration
					type: BooleanType
					identifier: Identifier
						token:  "Married"
			methodDeclarations: List
				[0]: Method
					returnType: BooleanType
					name: Identifier
						token:  "Init"
					parameters: List
						[0]: Parameter
							type: IntType
							name: Identifier
								token:  "v_Age"
						[1]: Parameter
							type: IntType
							name: Identifier
								token:  "v_Salary"
						[2]: Parameter
							type: BooleanType
							name: Identifier
								token:  "v_Married"
					varDeclarations: List
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "Age"
							right: Identifier
								token:  "v_Age"
						[1]: Assign
							identifier: Identifier
								token:  "Salary"
							right: Identifier
								token:  "v_Salary"
						[2]: Assign
							identifier: Identifier
								token:  "Married"
							right: Identifier
								token:  "v_Married"
					returnExpression: TrueLiteral
				[1]: Method
					returnType: IntType
					name: Identifier
						token:  "GetAge"
					parameters: List
					varDeclarations: List
					statements: List
					returnExpression: Identifier
						token:  "Age"
				[2]: Method
					returnType: IntType
					name: Identifier
						token:  "GetSalary"
					parameters: List
					varDeclarations: List
					statements: List
					returnExpression: Identifier
						token:  "Salary"
				[3]: Method
					returnType: BooleanType
					name: Identifier
						token:  "GetMarried"
					parameters: List
					varDeclarations: List
					statements: List
					returnExpression: Identifier
						token:  "Married"
				[4]: Method
					returnType: BooleanType
					name: Identifier
						token:  "Equal"
					parameters: List
						[0]: Parameter
							type: Identifier
								token:  "Element"
							name: Identifier
								token:  "other"
					varDeclarations: List
						[0]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "ret_val"
						[1]: VarDeclaration
							type: IntType
							identifier: Identifier
								token:  "aux01"
						[2]: VarDeclaration
							type: IntType
							identifier: Identifier
								token:  "aux02"
						[3]: VarDeclaration
							type: IntType
							identifier: Identifier
								token:  "nt"
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "ret_val"
							right: TrueLiteral
						[1]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "other"
								methodName: Identifier
									token:  "GetAge"
								arguments: List
						[2]: If
							condition: Not
								operand: MethodCall
									receiver: This
									methodName: Identifier
										token:  "Compare"
									arguments: List
										[0]: Identifier
											token:  "aux01"
										[1]: Identifier
											token:  "Age"
							ifStatement: Assign
								identifier: Identifier
									token:  "ret_val"
								right: FalseLiteral
							elseStatement: Block
								statements: List
									[0]: Assign
										identifier: Identifier
											token:  "aux02"
										right: MethodCall
											receiver: Identifier
												token:  "other"
											methodName: Identifier
												token:  "GetSalary"
											arguments: List
									[1]: If
										condition: Not
											operand: MethodCall
												receiver: This
												methodName: Identifier
													token:  "Compare"
												arguments: List
													[0]: Identifier
														token:  "aux02"
													[1]: Identifier
														token:  "Salary"
										ifStatement: Assign
											identifier: Identifier
												token:  "ret_val"
											right: FalseLiteral
										elseStatement: If
											condition: Identifier
												token:  "Married"
											ifStatement: If
												condition: Not
													operand: MethodCall
														receiver: Identifier
															token:  "other"
														methodName: Identifier
															token:  "GetMarried"
														arguments: List
												ifStatement: Assign
													identifier: Identifier
														token:  "ret_val"
													right: FalseLiteral
												elseStatement: Assign
													identifier: Identifier
														token:  "nt"
													right: IntLiteral
														token:  "0"
											elseStatement: If
												condition: MethodCall
													receiver: Identifier
														token:  "other"
													methodName: Identifier
														token:  "GetMarried"
													arguments: List
												ifStatement: Assign
													identifier: Identifier
														token:  "ret_val"
													right: FalseLiteral
												elseStatement: Assign
													identifier: Identifier
														token:  "nt"
													right: IntLiteral
														token:  "0"
					returnExpression: Identifier
						token:  "ret_val"
				[5]: Method
					returnType: BooleanType
					name: Identifier
						token:  "Compare"
					parameters: List
						[0]: Parameter
							type: IntType
							name: Identifier
								token:  "num1"
						[1]: Parameter
							type: IntType
							name: Identifier
								token:  "num2"
					varDeclarations: List
						[0]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "retval"
						[1]: VarDeclaration
							type: IntType
							identifier: Identifier
								token:  "aux02"
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "retval"
							right: FalseLiteral
						[1]: Assign
							identifier: Identifier
								token:  "aux02"
							right: Plus
								operand1: Identifier
									token:  "num2"
								operand2: IntLiteral
									token:  "1"
						[2]: If
							condition: LessThan
								operand1: Identifier
									token:  "num1"
								operand2: Identifier
									token:  "num2"
							ifStatement: Assign
								identifier: Identifier
									token:  "retval"
								right: FalseLiteral
							elseStatement: If
								condition: Not
									operand: LessThan
										operand1: Identifier
											token:  "num1"
										operand2: Identifier
											token:  "aux02"
								ifStatement: Assign
									identifier: Identifier
										token:  "retval"
									right: FalseLiteral
								elseStatement: Assign
									identifier: Identifier
										token:  "retval"
									right: TrueLiteral
					returnExpression: Identifier
						token:  "retval"
		[1]: Class
			name: Identifier
				token:  "List"
			varDeclarations: List
				[0]: VarDeclaration
					type: Identifier
						token:  "Element"
					identifier: Identifier
						token:  "elem"
				[1]: VarDeclaration
					type: Identifier
						token:  "List"
					identifier: Identifier
						token:  "next"
				[2]: VarDeclaration
					type: BooleanType
					identifier: Identifier
						token:  "end"
			methodDeclarations: List
				[0]: Method
					returnType: BooleanType
					name: Identifier
						token:  "Init"
					parameters: List
					varDeclarations: List
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "end"
							right: TrueLiteral
					returnExpression: TrueLiteral
				[1]: Method
					returnType: BooleanType
					name: Identifier
						token:  "InitNew"
					parameters: List
						[0]: Parameter
							type: Identifier
								token:  "Element"
							name: Identifier
								token:  "v_elem"
						[1]: Parameter
							type: Identifier
								token:  "List"
							name: Identifier
								token:  "v_next"
						[2]: Parameter
							type: BooleanType
							name: Identifier
								token:  "v_end"
					varDeclarations: List
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "end"
							right: Identifier
								token:  "v_end"
						[1]: Assign
							identifier: Identifier
								token:  "elem"
							right: Identifier
								token:  "v_elem"
						[2]: Assign
							identifier: Identifier
								token:  "next"
							right: Identifier
								token:  "v_next"
					returnExpression: TrueLiteral
				[2]: Method
					returnType: Identifier
						token:  "List"
					name: Identifier
						token:  "Insert"
					parameters: List
						[0]: Parameter
							type: Identifier
								token:  "Element"
							name: Identifier
								token:  "new_elem"
					varDeclarations: List
						[0]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "ret_val"
						[1]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "aux03"
						[2]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "aux02"
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "aux03"
							right: This
						[1]: Assign
							identifier: Identifier
								token:  "aux02"
							right: Allocation
								className: Identifier
									token:  "List"
						[2]: Assign
							identifier: Identifier
								token:  "ret_val"
							right: MethodCall
								receiver: Identifier
									token:  "aux02"
								methodName: Identifier
									token:  "InitNew"
								arguments: List
									[0]: Identifier
										token:  "new_elem"
									[1]: Identifier
										token:  "aux03"
									[2]: FalseLiteral
					returnExpression: Identifier
						token:  "aux02"
				[3]: Method
					returnType: BooleanType
					name: Identifier
						token:  "SetNext"
					parameters: List
						[0]: Parameter
							type: Identifier
								token:  "List"
							name: Identifier
								token:  "v_next"
					varDeclarations: List
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "next"
							right: Identifier
								token:  "v_next"
					returnExpression: IntLiteral
						token:  "0"
				[4]: Method
					returnType: Identifier
						token:  "List"
					name: Identifier
						token:  "Delete"
					parameters: List
						[0]: Parameter
							type: Identifier
								token:  "Element"
							name: Identifier
								token:  "e"
					varDeclarations: List
						[0]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "my_head"
						[1]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "ret_val"
						[2]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "aux05"
						[3]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "aux01"
						[4]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "prev"
						[5]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "var_end"
						[6]: VarDeclaration
							type: Identifier
								token:  "Element"
							identifier: Identifier
								token:  "var_elem"
						[7]: VarDeclaration
							type: IntType
							identifier: Identifier
								token:  "aux04"
						[8]: VarDeclaration
							type: IntType
							identifier: Identifier
								token:  "nt"
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "my_head"
							right: This
						[1]: Assign
							identifier: Identifier
								token:  "ret_val"
							right: FalseLiteral
						[2]: Assign
							identifier: Identifier
								token:  "aux04"
							right: Minus
								operand1: IntLiteral
									token:  "0"
								operand2: IntLiteral
									token:  "1"
						[3]: Assign
							identifier: Identifier
								token:  "aux01"
							right: This
						[4]: Assign
							identifier: Identifier
								token:  "prev"
							right: This
						[5]: Assign
							identifier: Identifier
								token:  "var_end"
							right: Identifier
								token:  "end"
						[6]: Assign
							identifier: Identifier
								token:  "var_elem"
							right: Identifier
								token:  "elem"
						[7]: While
							condition: And
								operand1: Not
									operand: Identifier
										token:  "var_end"
								operand2: Not
									operand: Identifier
										token:  "ret_val"
							body: Block
								statements: List
									[0]: If
										condition: MethodCall
											receiver: Identifier
												token:  "e"
											methodName: Identifier
												token:  "Equal"
											arguments: List
												[0]: Identifier
													token:  "var_elem"
										ifStatement: Block
											statements: List
												[0]: Assign
													identifier: Identifier
														token:  "ret_val"
													right: TrueLiteral
												[1]: If
													condition: LessThan
														operand1: Identifier
															token:  "aux04"
														operand2: IntLiteral
															token:  "0"
													ifStatement: Block
														statements: List
															[0]: Assign
																identifier: Identifier
																	token:  "my_head"
																right: MethodCall
																	receiver: Identifier
																		token:  "aux01"
																	methodName: Identifier
																		token:  "GetNext"
																	arguments: List
													elseStatement: Block
														statements: List
															[0]: Print
																argument: Minus
																	operand1: IntLiteral
																		token:  "0"
																	operand2: IntLiteral
																		token:  "555"
															[1]: Assign
																identifier: Identifier
																	token:  "aux05"
																right: MethodCall
																	receiver: Identifier
																		token:  "prev"
																	methodName: Identifier
																		token:  "SetNext"
																	arguments: List
																		[0]: MethodCall
																			receiver: Identifier
																				token:  "aux01"
																			methodName: Identifier
																				token:  "GetNext"
																			arguments: List
															[2]: Print
																argument: Minus
																	operand1: IntLiteral
																		token:  "0"
																	operand2: IntLiteral
																		token:  "555"
										elseStatement: Assign
											identifier: Identifier
												token:  "nt"
											right: IntLiteral
												token:  "0"
									[1]: If
										condition: Not
											operand: Identifier
												token:  "ret_val"
										ifStatement: Block
											statements: List
												[0]: Assign
													identifier: Identifier
														token:  "prev"
													right: Identifier
														token:  "aux01"
												[1]: Assign
													identifier: Identifier
														token:  "aux01"
													right: MethodCall
														receiver: Identifier
															token:  "aux01"
														methodName: Identifier
															token:  "GetNext"
														arguments: List
												[2]: Assign
													identifier: Identifier
														token:  "var_end"
													right: MethodCall
														receiver: Identifier
															token:  "aux01"
														methodName: Identifier
															token:  "GetEnd"
														arguments: List
												[3]: Assign
													identifier: Identifier
														token:  "var_elem"
													right: MethodCall
														receiver: Identifier
															token:  "aux01"
														methodName: Identifier
															token:  "GetElem"
														arguments: List
												[4]: Assign
													identifier: Identifier
														token:  "aux04"
													right: IntLiteral
														token:  "1"
										elseStatement: Assign
											identifier: Identifier
												token:  "nt"
											right: IntLiteral
												token:  "0"
					returnExpression: Identifier
						token:  "my_head"
				[5]: Method
					returnType: IntType
					name: Identifier
						token:  "Search"
					parameters: List
						[0]: Parameter
							type: Identifier
								token:  "Element"
							name: Identifier
								token:  "e"
					varDeclarations: List
						[0]: VarDeclaration
							type: IntType
							identifier: Identifier
								token:  "int_ret_val"
						[1]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "aux01"
						[2]: VarDeclaration
							type: Identifier
								token:  "Element"
							identifier: Identifier
								token:  "var_elem"
						[3]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "var_end"
						[4]: VarDeclaration
							type: IntType
							identifier: Identifier
								token:  "nt"
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "int_ret_val"
							right: IntLiteral
								token:  "0"
						[1]: Assign
							identifier: Identifier
								token:  "aux01"
							right: This
						[2]: Assign
							identifier: Identifier
								token:  "var_end"
							right: Identifier
								token:  "end"
						[3]: Assign
							identifier: Identifier
								token:  "var_elem"
							right: Identifier
								token:  "elem"
						[4]: While
							condition: Not
								operand: Identifier
									token:  "var_end"
							body: Block
								statements: List
									[0]: If
										condition: MethodCall
											receiver: Identifier
												token:  "e"
											methodName: Identifier
												token:  "Equal"
											arguments: List
												[0]: Identifier
													token:  "var_elem"
										ifStatement: Block
											statements: List
												[0]: Assign
													identifier: Identifier
														token:  "int_ret_val"
													right: IntLiteral
														token:  "1"
										elseStatement: Assign
											identifier: Identifier
												token:  "nt"
											right: IntLiteral
												token:  "0"
									[1]: Assign
										identifier: Identifier
											token:  "aux01"
										right: MethodCall
											receiver: Identifier
												token:  "aux01"
											methodName: Identifier
												token:  "GetNext"
											arguments: List
									[2]: Assign
										identifier: Identifier
											token:  "var_end"
										right: MethodCall
											receiver: Identifier
												token:  "aux01"
											methodName: Identifier
												token:  "GetEnd"
											arguments: List
									[3]: Assign
										identifier: Identifier
											token:  "var_elem"
										right: MethodCall
											receiver: Identifier
												token:  "aux01"
											methodName: Identifier
												token:  "GetElem"
											arguments: List
					returnExpression: Identifier
						token:  "int_ret_val"
				[6]: Method
					returnType: BooleanType
					name: Identifier
						token:  "GetEnd"
					parameters: List
					varDeclarations: List
					statements: List
					returnExpression: Identifier
						token:  "end"
				[7]: Method
					returnType: Identifier
						token:  "Element"
					name: Identifier
						token:  "GetElem"
					parameters: List
					varDeclarations: List
					statements: List
					returnExpression: Identifier
						token:  "elem"
				[8]: Method
					returnType: Identifier
						token:  "List"
					name: Identifier
						token:  "GetNext"
					parameters: List
					varDeclarations: List
					statements: List
					returnExpression: Identifier
						token:  "next"
				[9]: Method
					returnType: BooleanType
					name: Identifier
						token:  "Print"
					parameters: List
					varDeclarations: List
						[0]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "aux01"
						[1]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "var_end"
						[2]: VarDeclaration
							type: Identifier
								token:  "Element"
							identifier: Identifier
								token:  "var_elem"
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "aux01"
							right: This
						[1]: Assign
							identifier: Identifier
								token:  "var_end"
							right: Identifier
								token:  "end"
						[2]: Assign
							identifier: Identifier
								token:  "var_elem"
							right: Identifier
								token:  "elem"
						[3]: While
							condition: Not
								operand: Identifier
									token:  "var_end"
							body: Block
								statements: List
									[0]: Print
										argument: MethodCall
											receiver: Identifier
												token:  "var_elem"
											methodName: Identifier
												token:  "GetAge"
											arguments: List
									[1]: Assign
										identifier: Identifier
											token:  "aux01"
										right: MethodCall
											receiver: Identifier
												token:  "aux01"
											methodName: Identifier
												token:  "GetNext"
											arguments: List
									[2]: Assign
										identifier: Identifier
											token:  "var_end"
										right: MethodCall
											receiver: Identifier
												token:  "aux01"
											methodName: Identifier
												token:  "GetEnd"
											arguments: List
									[3]: Assign
										identifier: Identifier
											token:  "var_elem"
										right: MethodCall
											receiver: Identifier
												token:  "aux01"
											methodName: Identifier
												token:  "GetElem"
											arguments: List
					returnExpression: TrueLiteral
		[2]: Class
			name: Identifier
				token:  "LL"
			varDeclarations: List
			methodDeclarations: List
				[0]: Method
					returnType: IntType
					name: Identifier
						token:  "Start"
					parameters: List
					varDeclarations: List
						[0]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "head"
						[1]: VarDeclaration
							type: Identifier
								token:  "List"
							identifier: Identifier
								token:  "last_elem"
						[2]: VarDeclaration
							type: BooleanType
							identifier: Identifier
								token:  "aux01"
						[3]: VarDeclaration
							type: Identifier
								token:  "Element"
							identifier: Identifier
								token:  "el01"
						[4]: VarDeclaration
							type: Identifier
								token:  "Element"
							identifier: Identifier
								token:  "el02"
						[5]: VarDeclaration
							type: Identifier
								token:  "Element"
							identifier: Identifier
								token:  "el03"
					statements: List
						[0]: Assign
							identifier: Identifier
								token:  "last_elem"
							right: Allocation
								className: Identifier
									token:  "List"
						[1]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "last_elem"
								methodName: Identifier
									token:  "Init"
								arguments: List
						[2]: Assign
							identifier: Identifier
								token:  "head"
							right: Identifier
								token:  "last_elem"
						[3]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Init"
								arguments: List
						[4]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Print"
								arguments: List
						[5]: Assign
							identifier: Identifier
								token:  "el01"
							right: Allocation
								className: Identifier
									token:  "Element"
						[6]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "el01"
								methodName: Identifier
									token:  "Init"
								arguments: List
									[0]: IntLiteral
										token:  "25"
									[1]: IntLiteral
										token:  "37000"
									[2]: FalseLiteral
						[7]: Assign
							identifier: Identifier
								token:  "head"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Insert"
								arguments: List
									[0]: Identifier
										token:  "el01"
						[8]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Print"
								arguments: List
						[9]: Print
							argument: IntLiteral
								token:  "10000000"
						[10]: Assign
							identifier: Identifier
								token:  "el01"
							right: Allocation
								className: Identifier
									token:  "Element"
						[11]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "el01"
								methodName: Identifier
									token:  "Init"
								arguments: List
									[0]: IntLiteral
										token:  "39"
									[1]: IntLiteral
										token:  "42000"
									[2]: TrueLiteral
						[12]: Assign
							identifier: Identifier
								token:  "el02"
							right: Identifier
								token:  "el01"
						[13]: Assign
							identifier: Identifier
								token:  "head"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Insert"
								arguments: List
									[0]: Identifier
										token:  "el01"
						[14]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Print"
								arguments: List
						[15]: Print
							argument: IntLiteral
								token:  "10000000"
						[16]: Assign
							identifier: Identifier
								token:  "el01"
							right: Allocation
								className: Identifier
									token:  "Element"
						[17]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "el01"
								methodName: Identifier
									token:  "Init"
								arguments: List
									[0]: IntLiteral
										token:  "22"
									[1]: IntLiteral
										token:  "34000"
									[2]: FalseLiteral
						[18]: Assign
							identifier: Identifier
								token:  "head"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Insert"
								arguments: List
									[0]: Identifier
										token:  "el01"
						[19]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Print"
								arguments: List
						[20]: Assign
							identifier: Identifier
								token:  "el03"
							right: Allocation
								className: Identifier
									token:  "Element"
						[21]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "el03"
								methodName: Identifier
									token:  "Init"
								arguments: List
									[0]: IntLiteral
										token:  "27"
									[1]: IntLiteral
										token:  "34000"
									[2]: FalseLiteral
						[22]: Print
							argument: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Search"
								arguments: List
									[0]: Identifier
										token:  "el02"
						[23]: Print
							argument: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Search"
								arguments: List
									[0]: Identifier
										token:  "el03"
						[24]: Print
							argument: IntLiteral
								token:  "10000000"
						[25]: Assign
							identifier: Identifier
								token:  "el01"
							right: Allocation
								className: Identifier
									token:  "Element"
						[26]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "el01"
								methodName: Identifier
									token:  "Init"
								arguments: List
									[0]: IntLiteral
										token:  "28"
									[1]: IntLiteral
										token:  "35000"
									[2]: FalseLiteral
						[27]: Assign
							identifier: Identifier
								token:  "head"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Insert"
								arguments: List
									[0]: Identifier
										token:  "el01"
						[28]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Print"
								arguments: List
						[29]: Print
							argument: IntLiteral
								token:  "2220000"
						[30]: Assign
							identifier: Identifier
								token:  "head"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Delete"
								arguments: List
									[0]: Identifier
										token:  "el02"
						[31]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Print"
								arguments: List
						[32]: Print
							argument: IntLiteral
								token:  "33300000"
						[33]: Assign
							identifier: Identifier
								token:  "head"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Delete"
								arguments: List
									[0]: Identifier
										token:  "el01"
						[34]: Assign
							identifier: Identifier
								token:  "aux01"
							right: MethodCall
								receiver: Identifier
									token:  "head"
								methodName: Identifier
									token:  "Print"
								arguments: List
						[35]: Print
							argument: IntLiteral
								token:  "44440000"
					returnExpression: IntLiteral
						token:  "0"
